{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intalos AI Bot Builder Help Welcome to the Intalos Bot Builder Help Center! This comprehensive guide will help you build powerful bots using our visual flow editor. Component Guides Question Components Collect input and information from users: QuestionText - Free-form text input from users QuestionButtons - Button selection (up to 3 options) QuestionList - Dropdown selection (up to 10 options) QuestionMedia - Collect photos, videos, audio, and documents Communication Components Send messages and content to users: Media - Send images, videos, audio, and documents Email - Send automated emails Logic & Processing Components Perform calculations, validations, and custom operations: Formula - Calculations, comparisons, and conditional routing CustomCode - Custom Python code for advanced logic AI Components Integrate artificial intelligence: LLM Conversation - AI-powered conversations and natural language processing Integration Components Connect to external services: APIRequest - Connect to external APIs and web services GoogleSheets - Read and write data to Google Sheets GoogleDrive - Upload files to Google Drive Support Need help? We're here to assist you. Email : contact@intalos.de Last updated: October 20, 2025","title":"Home"},{"location":"#intalos-ai-bot-builder-help","text":"Welcome to the Intalos Bot Builder Help Center! This comprehensive guide will help you build powerful bots using our visual flow editor.","title":"Intalos AI Bot Builder Help"},{"location":"#component-guides","text":"","title":"Component Guides"},{"location":"#question-components","text":"Collect input and information from users: QuestionText - Free-form text input from users QuestionButtons - Button selection (up to 3 options) QuestionList - Dropdown selection (up to 10 options) QuestionMedia - Collect photos, videos, audio, and documents","title":"Question Components"},{"location":"#communication-components","text":"Send messages and content to users: Media - Send images, videos, audio, and documents Email - Send automated emails","title":"Communication Components"},{"location":"#logic-processing-components","text":"Perform calculations, validations, and custom operations: Formula - Calculations, comparisons, and conditional routing CustomCode - Custom Python code for advanced logic","title":"Logic &amp; Processing Components"},{"location":"#ai-components","text":"Integrate artificial intelligence: LLM Conversation - AI-powered conversations and natural language processing","title":"AI Components"},{"location":"#integration-components","text":"Connect to external services: APIRequest - Connect to external APIs and web services GoogleSheets - Read and write data to Google Sheets GoogleDrive - Upload files to Google Drive","title":"Integration Components"},{"location":"#support","text":"Need help? We're here to assist you. Email : contact@intalos.de Last updated: October 20, 2025","title":"Support"},{"location":"api-request/","text":"APIRequest Component Overview The APIRequest component allows you to connect your WhatsApp bot to external APIs and web services. Use it to fetch data from your CRM, validate information, send data to third-party services, or integrate with any HTTP-based API. When to Use APIRequest Perfect for scenarios like: - Fetching user data from your CRM or database - Validating customer information with external services - Sending collected data to third-party platforms - Synchronizing data between systems - Routing conversations based on API responses Configuration Adding Query Parameters Query parameters are added to the end of your URL (e.g., ?search=test&limit=10 ) Toggle \"Send Params\" to ON Click \"Add Parameter\" Enter the parameter name (Key) and value Repeat for multiple parameters Example : Key: search Value: {searchTerm} Key: limit Value: 10 Key: includeEmail Value: true Variables in Parameters : Use {{variableName}} syntax: Key: userId Value: {{customerID}} Custom Headers Headers are used for authentication and content type specification. Toggle \"Customize Headers\" to ON Click \"Add Header\" Enter header name and value Common Examples : Key: Authorization Value: Bearer YOUR_API_KEY Key: Content-Type Value: application/json Key: X-API-Key Value: {apiKey} Request Body (POST/PUT) Send data in the request body for POST and PUT requests. Toggle \"Customize Body\" to ON Enter your JSON data in the editor Example : { \"name\" : \"{{userName}}\" , \"email\" : \"{{userEmail}}\" , \"phone\" : \"{{userPhone}}\" } Body Variables : Use {{variableName}} syntax for variables in the body. Testing Your API Call Before deploying, test your API request: Toggle \"Add test values\" to ON Add test values for any variables: Variable: {userName} Test Value: John Doe Variable: {userEmail} Test Value: john@example.com Click \"Test the request\" button Review the response in the popup modal A successful test shows: - Status code (e.g., 200) - Response headers - Response body Response Routing Route your conversation flow based on API response status codes. Toggle \"Response Routing\" to ON Connect output arrows from your component: Label each arrow with a status code ( 200 , 404 , 500 , etc.) Add a \"default\" arrow for unlisted status codes Example Flow : APIRequest -> 200 -> Success Message -> 404 -> \"User not found\" Message -> default -> Error Handling Storing API Responses Save API responses in variables to use later in your flow. Scroll to \"Store output in variable\" Type a variable name or select an existing one Example: apiResponse Access response data in later components : Status Code: {apiResponse.status_code} Response Text: {apiResponse.text} JSON Data: {apiResponse.json.fieldName} Error Handling Error Output Port When enabled, creates a separate path for errors: Toggle \"Error Output Port\" to ON Connect the error arrow (marked with warning icon) to error handling components Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: We're having trouble connecting to our system. Please try again later. Dynamic Error Messages : Use variables in error messages: Sorry {userName}, we couldn't process your request. Error: {errorDetails} Admin Email Notification Get notified when API errors occur: Toggle \"Send Error Admin Email\" to ON Errors will be sent to your registered admin email Variable Reference Guide Using Variables in URLs Syntax: {variableName} Example: https://api.example.com/users/{userId}/orders/{orderId} Using Variables in Parameters Syntax: {{variableName}} Example: Key: search Value: {{searchTerm}} Using Variables in Headers Syntax: {variableName} Example: Key: Authorization Value: Bearer {apiToken} Using Variables in Body Syntax: {{variableName}} Example: { \"user\": \"{{userName}}\", \"action\": \"{{userAction}}\" } Common Use Cases 1. Fetch User Profile from CRM Configuration : - Method: GET - URL: https://your-crm.com/api/users/{phoneNumber} - Store in: userProfile Usage in next component : Welcome back, {userProfile.json.firstName}! Your account status: {userProfile.json.status} 2. Validate Email Address Configuration : - Method: POST - URL: https://api.emailvalidation.com/validate - Body: { \"email\" : \"{{userEmail}}\" } - Response Routing: ON - 200 -> \"Email is valid\" - 400 -> \"Invalid email format\" 3. Create Support Ticket Configuration : - Method: POST - URL: https://your-helpdesk.com/api/tickets - Headers: Authorization: Bearer YOUR_API_KEY Content-Type: application/json - Body: { \"subject\" : \"{{ticketSubject}}\" , \"description\" : \"{{ticketDescription}}\" , \"customer_phone\" : \"{{userPhone}}\" } 4. Update Customer Preferences Configuration : - Method: PUT - URL: https://api.yourservice.com/customers/{customerId}/preferences - Body: { \"newsletter\" : {{ subscribeNewsle tter }}, \"notifications\" : {{ e na bleNo t i f ica t io ns }} } Best Practices Security DO : - Store API keys in environment variables - Use HTTPS endpoints only - Implement proper authentication headers - Test with non-production data first DON'T : - Hardcode sensitive credentials in the component - Use HTTP (non-secure) for sensitive data - Skip error handling Performance DO : - Keep API calls efficient and targeted - Use response routing to handle failures gracefully - Set appropriate timeout expectations - Store frequently used data in variables DON'T : - Make unnecessary API calls in loops - Fetch large datasets without pagination - Ignore rate limits User Experience DO : - Provide clear error messages - Show loading indicators (in error messages) - Handle all possible response codes - Test thoroughly before deployment DON'T : - Leave users hanging without feedback - Show technical error messages to users - Assume APIs will always work Troubleshooting Issue: \"Variable not found\" error Solution : Make sure the variable exists before the APIRequest component: 1. Check if the variable is set in a previous component 2. Verify variable name spelling matches exactly 3. Use the test values feature to simulate the variable Issue: API request fails with 401/403 Solution : Authentication problem: 1. Check your API key is correct 2. Verify the Authorization header format 3. Ensure the API key has proper permissions 4. Check if the API requires additional headers Issue: Request timeout Solution : The API is taking too long (30-second limit): 1. Optimize the API endpoint on your server 2. Reduce the amount of data being transferred 3. Consider using webhooks instead for long operations Issue: Variables not being replaced Solution : Check variable syntax: - URLs: Use {variableName} - Parameters: Use {{variableName}} - Body: Use {{variableName}} - Ensure no extra spaces in variable names Issue: JSON parsing error in body Solution : Invalid JSON format: 1. Validate your JSON using an online validator 2. Check for missing commas or quotes 3. Ensure proper quote escaping 4. Test without variables first, then add them Important Notes API Endpoint Whitelisting Important : If your API has firewall restrictions, you must whitelist our backend server: Hostname to whitelist: https://magic.intalos.de Contact your IT team to add this to your API's allowed origins. Response Format The API response is stored with this structure: { \"status_code\" : 200 , \"headers\" : { ... }, \"text\" : \"raw response text\" , \"json\" : { ... } // Only if response is JSON } Timeout Limits Maximum timeout : 30 seconds Requests taking longer will fail with a timeout error For long-running operations, consider using webhooks Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"APIRequest"},{"location":"api-request/#apirequest-component","text":"","title":"APIRequest Component"},{"location":"api-request/#overview","text":"The APIRequest component allows you to connect your WhatsApp bot to external APIs and web services. Use it to fetch data from your CRM, validate information, send data to third-party services, or integrate with any HTTP-based API.","title":"Overview"},{"location":"api-request/#when-to-use-apirequest","text":"Perfect for scenarios like: - Fetching user data from your CRM or database - Validating customer information with external services - Sending collected data to third-party platforms - Synchronizing data between systems - Routing conversations based on API responses","title":"When to Use APIRequest"},{"location":"api-request/#configuration","text":"","title":"Configuration"},{"location":"api-request/#adding-query-parameters","text":"Query parameters are added to the end of your URL (e.g., ?search=test&limit=10 ) Toggle \"Send Params\" to ON Click \"Add Parameter\" Enter the parameter name (Key) and value Repeat for multiple parameters Example : Key: search Value: {searchTerm} Key: limit Value: 10 Key: includeEmail Value: true Variables in Parameters : Use {{variableName}} syntax: Key: userId Value: {{customerID}}","title":"Adding Query Parameters"},{"location":"api-request/#custom-headers","text":"Headers are used for authentication and content type specification. Toggle \"Customize Headers\" to ON Click \"Add Header\" Enter header name and value Common Examples : Key: Authorization Value: Bearer YOUR_API_KEY Key: Content-Type Value: application/json Key: X-API-Key Value: {apiKey}","title":"Custom Headers"},{"location":"api-request/#request-body-postput","text":"Send data in the request body for POST and PUT requests. Toggle \"Customize Body\" to ON Enter your JSON data in the editor Example : { \"name\" : \"{{userName}}\" , \"email\" : \"{{userEmail}}\" , \"phone\" : \"{{userPhone}}\" } Body Variables : Use {{variableName}} syntax for variables in the body.","title":"Request Body (POST/PUT)"},{"location":"api-request/#testing-your-api-call","text":"Before deploying, test your API request: Toggle \"Add test values\" to ON Add test values for any variables: Variable: {userName} Test Value: John Doe Variable: {userEmail} Test Value: john@example.com Click \"Test the request\" button Review the response in the popup modal A successful test shows: - Status code (e.g., 200) - Response headers - Response body","title":"Testing Your API Call"},{"location":"api-request/#response-routing","text":"Route your conversation flow based on API response status codes. Toggle \"Response Routing\" to ON Connect output arrows from your component: Label each arrow with a status code ( 200 , 404 , 500 , etc.) Add a \"default\" arrow for unlisted status codes Example Flow : APIRequest -> 200 -> Success Message -> 404 -> \"User not found\" Message -> default -> Error Handling","title":"Response Routing"},{"location":"api-request/#storing-api-responses","text":"Save API responses in variables to use later in your flow. Scroll to \"Store output in variable\" Type a variable name or select an existing one Example: apiResponse Access response data in later components : Status Code: {apiResponse.status_code} Response Text: {apiResponse.text} JSON Data: {apiResponse.json.fieldName}","title":"Storing API Responses"},{"location":"api-request/#error-handling","text":"","title":"Error Handling"},{"location":"api-request/#error-output-port","text":"When enabled, creates a separate path for errors: Toggle \"Error Output Port\" to ON Connect the error arrow (marked with warning icon) to error handling components","title":"Error Output Port"},{"location":"api-request/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: We're having trouble connecting to our system. Please try again later. Dynamic Error Messages : Use variables in error messages: Sorry {userName}, we couldn't process your request. Error: {errorDetails}","title":"Error Message to User"},{"location":"api-request/#admin-email-notification","text":"Get notified when API errors occur: Toggle \"Send Error Admin Email\" to ON Errors will be sent to your registered admin email","title":"Admin Email Notification"},{"location":"api-request/#variable-reference-guide","text":"","title":"Variable Reference Guide"},{"location":"api-request/#using-variables-in-urls","text":"Syntax: {variableName} Example: https://api.example.com/users/{userId}/orders/{orderId}","title":"Using Variables in URLs"},{"location":"api-request/#using-variables-in-parameters","text":"Syntax: {{variableName}} Example: Key: search Value: {{searchTerm}}","title":"Using Variables in Parameters"},{"location":"api-request/#using-variables-in-headers","text":"Syntax: {variableName} Example: Key: Authorization Value: Bearer {apiToken}","title":"Using Variables in Headers"},{"location":"api-request/#using-variables-in-body","text":"Syntax: {{variableName}} Example: { \"user\": \"{{userName}}\", \"action\": \"{{userAction}}\" }","title":"Using Variables in Body"},{"location":"api-request/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"api-request/#1-fetch-user-profile-from-crm","text":"Configuration : - Method: GET - URL: https://your-crm.com/api/users/{phoneNumber} - Store in: userProfile Usage in next component : Welcome back, {userProfile.json.firstName}! Your account status: {userProfile.json.status}","title":"1. Fetch User Profile from CRM"},{"location":"api-request/#2-validate-email-address","text":"Configuration : - Method: POST - URL: https://api.emailvalidation.com/validate - Body: { \"email\" : \"{{userEmail}}\" } - Response Routing: ON - 200 -> \"Email is valid\" - 400 -> \"Invalid email format\"","title":"2. Validate Email Address"},{"location":"api-request/#3-create-support-ticket","text":"Configuration : - Method: POST - URL: https://your-helpdesk.com/api/tickets - Headers: Authorization: Bearer YOUR_API_KEY Content-Type: application/json - Body: { \"subject\" : \"{{ticketSubject}}\" , \"description\" : \"{{ticketDescription}}\" , \"customer_phone\" : \"{{userPhone}}\" }","title":"3. Create Support Ticket"},{"location":"api-request/#4-update-customer-preferences","text":"Configuration : - Method: PUT - URL: https://api.yourservice.com/customers/{customerId}/preferences - Body: { \"newsletter\" : {{ subscribeNewsle tter }}, \"notifications\" : {{ e na bleNo t i f ica t io ns }} }","title":"4. Update Customer Preferences"},{"location":"api-request/#best-practices","text":"","title":"Best Practices"},{"location":"api-request/#security","text":"DO : - Store API keys in environment variables - Use HTTPS endpoints only - Implement proper authentication headers - Test with non-production data first DON'T : - Hardcode sensitive credentials in the component - Use HTTP (non-secure) for sensitive data - Skip error handling","title":"Security"},{"location":"api-request/#performance","text":"DO : - Keep API calls efficient and targeted - Use response routing to handle failures gracefully - Set appropriate timeout expectations - Store frequently used data in variables DON'T : - Make unnecessary API calls in loops - Fetch large datasets without pagination - Ignore rate limits","title":"Performance"},{"location":"api-request/#user-experience","text":"DO : - Provide clear error messages - Show loading indicators (in error messages) - Handle all possible response codes - Test thoroughly before deployment DON'T : - Leave users hanging without feedback - Show technical error messages to users - Assume APIs will always work","title":"User Experience"},{"location":"api-request/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"api-request/#issue-variable-not-found-error","text":"Solution : Make sure the variable exists before the APIRequest component: 1. Check if the variable is set in a previous component 2. Verify variable name spelling matches exactly 3. Use the test values feature to simulate the variable","title":"Issue: \"Variable not found\" error"},{"location":"api-request/#issue-api-request-fails-with-401403","text":"Solution : Authentication problem: 1. Check your API key is correct 2. Verify the Authorization header format 3. Ensure the API key has proper permissions 4. Check if the API requires additional headers","title":"Issue: API request fails with 401/403"},{"location":"api-request/#issue-request-timeout","text":"Solution : The API is taking too long (30-second limit): 1. Optimize the API endpoint on your server 2. Reduce the amount of data being transferred 3. Consider using webhooks instead for long operations","title":"Issue: Request timeout"},{"location":"api-request/#issue-variables-not-being-replaced","text":"Solution : Check variable syntax: - URLs: Use {variableName} - Parameters: Use {{variableName}} - Body: Use {{variableName}} - Ensure no extra spaces in variable names","title":"Issue: Variables not being replaced"},{"location":"api-request/#issue-json-parsing-error-in-body","text":"Solution : Invalid JSON format: 1. Validate your JSON using an online validator 2. Check for missing commas or quotes 3. Ensure proper quote escaping 4. Test without variables first, then add them","title":"Issue: JSON parsing error in body"},{"location":"api-request/#important-notes","text":"","title":"Important Notes"},{"location":"api-request/#api-endpoint-whitelisting","text":"Important : If your API has firewall restrictions, you must whitelist our backend server: Hostname to whitelist: https://magic.intalos.de Contact your IT team to add this to your API's allowed origins.","title":"API Endpoint Whitelisting"},{"location":"api-request/#response-format","text":"The API response is stored with this structure: { \"status_code\" : 200 , \"headers\" : { ... }, \"text\" : \"raw response text\" , \"json\" : { ... } // Only if response is JSON }","title":"Response Format"},{"location":"api-request/#timeout-limits","text":"Maximum timeout : 30 seconds Requests taking longer will fail with a timeout error For long-running operations, consider using webhooks","title":"Timeout Limits"},{"location":"api-request/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"custom-code/","text":"CustomCode Component Overview The CustomCode component allows you to write custom Python code to perform advanced operations, complex validations, data transformations, and custom logic that goes beyond the built-in components. When to Use CustomCode Ideal for scenarios like: - Complex data validation and formatting - Advanced string manipulation - Custom business logic - Multi-step calculations - Data transformations - Pattern matching and extraction - Custom algorithms Configuration Writing Your Code Click on the CustomCode component to open the code editor. Required structure : def __custom_fn__ ( variables ): # Your code here # Access variables user_name = variables . get ( 'userName' , '' ) user_age = variables [ 'userAge' ] # Your logic result = some_calculation () # Update variables (optional) variables [ 'newVariable' ] = result # Return your result return result Key points : - Must define __custom_fn__(variables) - Receives variables dictionary as parameter - Can read and modify variables - Must return a value Store Result in Variable Save the return value: In \"Store output in variable\" , enter a variable name: Example: processedData Example: validationResult Example: formattedOutput The value returned by __custom_fn__ will be stored in this variable Accessing Variables Reading Variables def __custom_fn__ ( variables ): # Method 1: Safe access with default name = variables . get ( 'userName' , 'Guest' ) # Method 2: Direct access (raises error if missing) email = variables [ 'userEmail' ] # Method 3: Check if exists if 'userAge' in variables : age = variables [ 'userAge' ] Hint : Use variables['variable_name'] or variables.get('variable_name', 'default_value') to access variables in your code. Updating Variables def __custom_fn__ ( variables ): # Update existing variable variables [ 'userName' ] = \"John Doe\" # Create new variable variables [ 'processedEmail' ] = email . lower () # Update multiple variables variables [ 'firstName' ] = \"John\" variables [ 'lastName' ] = \"Doe\" return \"Success\" Available Built-in Functions Your code has access to these safe Python built-ins: Function Purpose Example int(x) Convert to integer int(\"123\") -> 123 float(x) Convert to decimal float(\"10.5\") -> 10.5 str(x) Convert to string str(123) -> \"123\" len(x) Get length len(\"hello\") -> 5 min(a, b, ...) Find minimum min(5, 10, 3) -> 3 max(a, b, ...) Find maximum max(5, 10, 3) -> 10 sum(list) Sum numbers sum([1, 2, 3]) -> 6 bool(x) Convert to boolean bool(\"text\") -> True Note : No imports allowed, no file access, no network requests. Use Cases & Examples 1. Email Validation def __custom_fn__ ( variables ): email = variables . get ( 'userEmail' , '' ) # Check if email has @ and . has_at = '@' in email has_dot = '.' in email is_valid = has_at and has_dot and len ( email ) > 5 if is_valid : variables [ 'emailValidated' ] = True return \"valid\" else : variables [ 'emailValidated' ] = False return \"invalid\" Output routing : - Return \"valid\" -> Email valid path - Return \"invalid\" -> Error message path 2. Name Formatting def __custom_fn__ ( variables ): full_name = variables . get ( 'userName' , '' ) # Split into first and last name parts = full_name . split ( ' ' , 1 ) first_name = parts [ 0 ] if len ( parts ) > 0 else '' last_name = parts [ 1 ] if len ( parts ) > 1 else '' # Store separately variables [ 'firstName' ] = first_name . capitalize () variables [ 'lastName' ] = last_name . capitalize () # Create formatted version formatted = f \" { first_name . upper () } { last_name . upper () } \" return formatted 3. Price Calculation with Tax def __custom_fn__ ( variables ): subtotal = float ( variables . get ( 'subtotal' , 0 )) tax_rate = float ( variables . get ( 'taxRate' , 0.1 )) # Calculate tax tax_amount = subtotal * tax_rate total = subtotal + tax_amount # Store results variables [ 'taxAmount' ] = round ( tax_amount , 2 ) variables [ 'orderTotal' ] = round ( total , 2 ) return round ( total , 2 ) 4. Phone Number Formatting def __custom_fn__ ( variables ): phone = variables . get ( 'userPhone' , '' ) # Remove all non-digits digits = '' . join ( c for c in phone if c . isdigit ()) # Format as (XXX) XXX-XXXX if len ( digits ) == 10 : formatted = f \"( { digits [ 0 : 3 ] } ) { digits [ 3 : 6 ] } - { digits [ 6 : 10 ] } \" variables [ 'formattedPhone' ] = formatted return formatted else : return \"invalid\" 5. Age Category Calculation def __custom_fn__ ( variables ): age = int ( variables . get ( 'userAge' , 0 )) if age < 18 : category = \"minor\" elif age < 65 : category = \"adult\" else : category = \"senior\" variables [ 'ageCategory' ] = category return category Output routing : - \"minor\" -> Minor flow - \"adult\" -> Adult flow - \"senior\" -> Senior flow 6. Text Analysis def __custom_fn__ ( variables ): user_text = variables . get ( 'userFeedback' , '' ) # Analyze text word_count = len ( user_text . split ()) char_count = len ( user_text ) has_positive = any ( word in user_text . lower () for word in [ 'good' , 'great' , 'excellent' , 'happy' ]) # Store analysis variables [ 'wordCount' ] = word_count variables [ 'charCount' ] = char_count variables [ 'sentiment' ] = 'positive' if has_positive else 'neutral' return word_count Flow Routing Success/Error Routing Every CustomCode component has two output paths: Success port (green): Used when code executes without errors Return value can be used for further routing Error port (red, if enabled): Used when code raises an exception Catches syntax errors, runtime errors Routes to error handling flow Custom Return Value Routing The value you return determines the flow: def __custom_fn__ ( variables ): score = int ( variables . get ( 'testScore' , 0 )) if score >= 90 : return \"excellent\" elif score >= 70 : return \"good\" elif score >= 50 : return \"pass\" else : return \"fail\" Then connect outputs: - \"excellent\" -> High achiever path - \"good\" -> Good performance path - \"pass\" -> Standard path - \"fail\" -> Retry path Best Practices Code Quality DO : - Write clear, readable code - Add comments for complex logic - Handle edge cases (empty values, None) - Use try-except for risky operations - Test thoroughly before publishing DON'T : - Write overly complex code in one component - Ignore error handling - Assume variables exist without checking - Use Python features not in allowed list Variable Access DO : # Safe with default name = variables . get ( 'userName' , 'Guest' ) # Check before access if 'userAge' in variables : age = variables [ 'userAge' ] # Type conversion with safety age = int ( variables . get ( 'userAge' , 0 )) DON'T : # Risky - may raise KeyError name = variables [ 'userName' ] # If userName doesn't exist # Unsafe conversion age = int ( variables [ 'userAge' ]) # If userAge is not a number Performance DO : - Keep code execution fast (< 100ms) - Avoid complex loops over large data - Use efficient algorithms - Return quickly DON'T : - Create infinite loops - Process large datasets - Perform slow operations - Block execution Error Handling Error Output Port Route the conversation when code fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Syntax errors in code Runtime exceptions Type errors Division by zero Missing variables Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we encountered an issue processing your request. Admin Email Notification Get notified when code fails: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes full traceback for debugging Security & Limitations What's Allowed Basic Python syntax : if/else, for loops, functions Safe built-ins : int, float, str, len, min, max, sum, bool String operations : split, join, upper, lower, strip, etc. List operations : append, index, slice Dictionary operations : get, set, keys, values What's NOT Allowed Imports : No import statements File operations : No file read/write Network : No HTTP requests or socket operations System calls : No os, sys, subprocess Dangerous functions : No eval, exec (except internally), compile External libraries : No numpy, pandas, requests, etc. Sandboxed Environment Code runs in restricted environment Limited built-in functions only No access to file system No network access Protects against malicious code Advanced Examples Complex Validation def __custom_fn__ ( variables ): email = variables . get ( 'userEmail' , '' ) phone = variables . get ( 'userPhone' , '' ) # Validate email email_valid = '@' in email and '.' in email and len ( email ) > 5 # Validate phone (10 digits) phone_digits = '' . join ( c for c in phone if c . isdigit ()) phone_valid = len ( phone_digits ) == 10 # Store validation results variables [ 'emailValid' ] = email_valid variables [ 'phoneValid' ] = phone_valid # Overall validation if email_valid and phone_valid : return \"valid\" elif not email_valid : return \"invalid_email\" else : return \"invalid_phone\" Data Aggregation def __custom_fn__ ( variables ): # Collect all cart items item1_qty = int ( variables . get ( 'item1Qty' , 0 )) item2_qty = int ( variables . get ( 'item2Qty' , 0 )) item3_qty = int ( variables . get ( 'item3Qty' , 0 )) # Calculate totals total_items = item1_qty + item2_qty + item3_qty # Calculate costs item1_cost = item1_qty * 10.00 item2_cost = item2_qty * 15.00 item3_cost = item3_qty * 20.00 subtotal = item1_cost + item2_cost + item3_cost # Store results variables [ 'totalItems' ] = total_items variables [ 'subtotal' ] = round ( subtotal , 2 ) return total_items Text Processing def __custom_fn__ ( variables ): user_input = variables . get ( 'userMessage' , '' ) # Clean and normalize cleaned = user_input . strip () . lower () # Extract keywords keywords = cleaned . split () # Categorize if any ( word in keywords for word in [ 'urgent' , 'emergency' , 'asap' ]): priority = 'high' elif any ( word in keywords for word in [ 'question' , 'help' , 'info' ]): priority = 'medium' else : priority = 'low' variables [ 'messagePriority' ] = priority variables [ 'keywordCount' ] = len ( keywords ) return priority Debugging Tips Testing Your Code Start simple : Test with basic code first Add logging : Use return values to debug Test edge cases : Empty values, None, zeros Error routing : Connect error port to see failures Common Errors Error : KeyError: 'variableName' # Fix: Use .get() with default value = variables . get ( 'variableName' , 'default' ) Error : ValueError: invalid literal for int() # Fix: Validate before converting value = variables . get ( 'number' , '0' ) if value . isdigit (): number = int ( value ) else : number = 0 Error : NameError: name 'something' is not defined # Fix: All variables must be accessed via variables dict # Wrong: x = userName # Right: x = variables['userName'] Print Debugging While print() is not available, you can debug by: - Storing intermediate values in variables - Returning debug information - Using error messages to trace execution Best Practices Code Structure DO : def __custom_fn__ ( variables ): # Get inputs with defaults value1 = variables . get ( 'var1' , 0 ) value2 = variables . get ( 'var2' , 0 ) # Validate if value1 < 0 or value2 < 0 : return \"error\" # Calculate result = value1 + value2 # Store variables [ 'result' ] = result # Return return result DON'T : def __custom_fn__ ( variables ): # No error handling result = variables [ 'var1' ] + variables [ 'var2' ] # May crash return result Variable Handling DO : - Use .get() with defaults for optional variables - Validate variable types before operations - Handle None and empty values - Use descriptive variable names DON'T : - Assume variables exist - Skip type checking - Use cryptic variable names - Modify variables carelessly Error Prevention DO : - Add validation checks - Handle edge cases - Use try-except for risky operations - Test with various inputs DON'T : - Ignore potential errors - Use operations that might fail - Skip input validation Common Patterns Input Validation Pattern def __custom_fn__ ( variables ): user_input = variables . get ( 'userInput' , '' ) # Validation logic is_valid = len ( user_input ) >= 3 and user_input . isalnum () variables [ 'isValid' ] = is_valid return \"valid\" if is_valid else \"invalid\" Flow : QuestionText -> CustomCode (validate) |-- \"valid\" -> Continue \\-- \"invalid\" -> Error message -> Ask again Data Transformation Pattern def __custom_fn__ ( variables ): raw_data = variables . get ( 'rawInput' , '' ) # Transform cleaned = raw_data . strip () . upper () formatted = cleaned . replace ( ' ' , '_' ) # Store variables [ 'cleanedData' ] = formatted return formatted Multi-Field Validation Pattern def __custom_fn__ ( variables ): name = variables . get ( 'userName' , '' ) email = variables . get ( 'userEmail' , '' ) phone = variables . get ( 'userPhone' , '' ) # Validate each name_valid = len ( name ) >= 2 email_valid = '@' in email and '.' in email phone_valid = len ( phone ) >= 10 # Store individual results variables [ 'nameValid' ] = name_valid variables [ 'emailValid' ] = email_valid variables [ 'phoneValid' ] = phone_valid # Overall result if name_valid and email_valid and phone_valid : return \"all_valid\" else : return \"validation_failed\" Error Handling Error Output Port Route the conversation when code fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Syntax errors in Python code Runtime exceptions Type conversion errors Logic errors Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we encountered an issue. Please contact support. Note : Don't reveal technical error details to users. Admin Email Notification Get notified when code fails: Toggle \"Admin email when error\" to ON Notifications include: Full error traceback Variable values Component ID Timestamp Technical Details Execution Environment Python version : 3.12+ Execution : Synchronous Timeout : 5 seconds max Memory : Limited to prevent abuse Safety : Sandboxed execution Function Requirements def __custom_fn__ ( variables ): # Required signature # Must accept 'variables' parameter # Must return a value pass Required : - Function must be named __custom_fn__ - Must accept one parameter: variables - Must return a value (any type) Optional : - Can modify variables dictionary - Can perform multiple operations - Can have multiple return statements Allowed Operations Supported : - Arithmetic: + , - , * , / , // , % , ** - Comparison: == , != , < , > , <= , >= - Logical: and , or , not - String methods: .upper() , .lower() , .split() , .join() , etc. - List operations: append , extend , slicing - Dictionary operations: get , set , keys , values Not supported : - Imports - Lambda functions - Generators - Decorators - Classes (beyond basic usage) Troubleshooting Issue: \"must define custom_fn (variables)\" Solution : # Correct structure def __custom_fn__ ( variables ): return \"result\" # Wrong - different function name def my_function ( variables ): # Won't work return \"result\" Issue: \"Variable not found\" error Solution : Use .get() with defaults: # Safe value = variables . get ( 'varName' , 'default' ) # Unsafe - crashes if varName doesn't exist value = variables [ 'varName' ] Issue: Code execution times out Check : - No infinite loops - Loops are bounded - Operations complete quickly - No heavy computations Issue: Return value not routing correctly Check : - Return value matches output port label exactly - Return value is converted to string for routing - All possible return values have connected ports - Default port is connected Issue: Variables not updating Check : - You're modifying variables dict correctly - Variable names are valid - Changes are made before return statement - No syntax errors in assignment When NOT to Use CustomCode Consider alternatives when : Simple calculations : Use Formula component instead API calls : Use APIRequest component instead Text manipulation : Use Formula with ToString Comparisons : Use Formula True/False mode Email sending : Use Email component instead CustomCode is powerful but should be used when built-in components can't handle your needs. Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"CustomCode"},{"location":"custom-code/#customcode-component","text":"","title":"CustomCode Component"},{"location":"custom-code/#overview","text":"The CustomCode component allows you to write custom Python code to perform advanced operations, complex validations, data transformations, and custom logic that goes beyond the built-in components.","title":"Overview"},{"location":"custom-code/#when-to-use-customcode","text":"Ideal for scenarios like: - Complex data validation and formatting - Advanced string manipulation - Custom business logic - Multi-step calculations - Data transformations - Pattern matching and extraction - Custom algorithms","title":"When to Use CustomCode"},{"location":"custom-code/#configuration","text":"","title":"Configuration"},{"location":"custom-code/#writing-your-code","text":"Click on the CustomCode component to open the code editor. Required structure : def __custom_fn__ ( variables ): # Your code here # Access variables user_name = variables . get ( 'userName' , '' ) user_age = variables [ 'userAge' ] # Your logic result = some_calculation () # Update variables (optional) variables [ 'newVariable' ] = result # Return your result return result Key points : - Must define __custom_fn__(variables) - Receives variables dictionary as parameter - Can read and modify variables - Must return a value","title":"Writing Your Code"},{"location":"custom-code/#store-result-in-variable","text":"Save the return value: In \"Store output in variable\" , enter a variable name: Example: processedData Example: validationResult Example: formattedOutput The value returned by __custom_fn__ will be stored in this variable","title":"Store Result in Variable"},{"location":"custom-code/#accessing-variables","text":"","title":"Accessing Variables"},{"location":"custom-code/#reading-variables","text":"def __custom_fn__ ( variables ): # Method 1: Safe access with default name = variables . get ( 'userName' , 'Guest' ) # Method 2: Direct access (raises error if missing) email = variables [ 'userEmail' ] # Method 3: Check if exists if 'userAge' in variables : age = variables [ 'userAge' ] Hint : Use variables['variable_name'] or variables.get('variable_name', 'default_value') to access variables in your code.","title":"Reading Variables"},{"location":"custom-code/#updating-variables","text":"def __custom_fn__ ( variables ): # Update existing variable variables [ 'userName' ] = \"John Doe\" # Create new variable variables [ 'processedEmail' ] = email . lower () # Update multiple variables variables [ 'firstName' ] = \"John\" variables [ 'lastName' ] = \"Doe\" return \"Success\"","title":"Updating Variables"},{"location":"custom-code/#available-built-in-functions","text":"Your code has access to these safe Python built-ins: Function Purpose Example int(x) Convert to integer int(\"123\") -> 123 float(x) Convert to decimal float(\"10.5\") -> 10.5 str(x) Convert to string str(123) -> \"123\" len(x) Get length len(\"hello\") -> 5 min(a, b, ...) Find minimum min(5, 10, 3) -> 3 max(a, b, ...) Find maximum max(5, 10, 3) -> 10 sum(list) Sum numbers sum([1, 2, 3]) -> 6 bool(x) Convert to boolean bool(\"text\") -> True Note : No imports allowed, no file access, no network requests.","title":"Available Built-in Functions"},{"location":"custom-code/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"custom-code/#1-email-validation","text":"def __custom_fn__ ( variables ): email = variables . get ( 'userEmail' , '' ) # Check if email has @ and . has_at = '@' in email has_dot = '.' in email is_valid = has_at and has_dot and len ( email ) > 5 if is_valid : variables [ 'emailValidated' ] = True return \"valid\" else : variables [ 'emailValidated' ] = False return \"invalid\" Output routing : - Return \"valid\" -> Email valid path - Return \"invalid\" -> Error message path","title":"1. Email Validation"},{"location":"custom-code/#2-name-formatting","text":"def __custom_fn__ ( variables ): full_name = variables . get ( 'userName' , '' ) # Split into first and last name parts = full_name . split ( ' ' , 1 ) first_name = parts [ 0 ] if len ( parts ) > 0 else '' last_name = parts [ 1 ] if len ( parts ) > 1 else '' # Store separately variables [ 'firstName' ] = first_name . capitalize () variables [ 'lastName' ] = last_name . capitalize () # Create formatted version formatted = f \" { first_name . upper () } { last_name . upper () } \" return formatted","title":"2. Name Formatting"},{"location":"custom-code/#3-price-calculation-with-tax","text":"def __custom_fn__ ( variables ): subtotal = float ( variables . get ( 'subtotal' , 0 )) tax_rate = float ( variables . get ( 'taxRate' , 0.1 )) # Calculate tax tax_amount = subtotal * tax_rate total = subtotal + tax_amount # Store results variables [ 'taxAmount' ] = round ( tax_amount , 2 ) variables [ 'orderTotal' ] = round ( total , 2 ) return round ( total , 2 )","title":"3. Price Calculation with Tax"},{"location":"custom-code/#4-phone-number-formatting","text":"def __custom_fn__ ( variables ): phone = variables . get ( 'userPhone' , '' ) # Remove all non-digits digits = '' . join ( c for c in phone if c . isdigit ()) # Format as (XXX) XXX-XXXX if len ( digits ) == 10 : formatted = f \"( { digits [ 0 : 3 ] } ) { digits [ 3 : 6 ] } - { digits [ 6 : 10 ] } \" variables [ 'formattedPhone' ] = formatted return formatted else : return \"invalid\"","title":"4. Phone Number Formatting"},{"location":"custom-code/#5-age-category-calculation","text":"def __custom_fn__ ( variables ): age = int ( variables . get ( 'userAge' , 0 )) if age < 18 : category = \"minor\" elif age < 65 : category = \"adult\" else : category = \"senior\" variables [ 'ageCategory' ] = category return category Output routing : - \"minor\" -> Minor flow - \"adult\" -> Adult flow - \"senior\" -> Senior flow","title":"5. Age Category Calculation"},{"location":"custom-code/#6-text-analysis","text":"def __custom_fn__ ( variables ): user_text = variables . get ( 'userFeedback' , '' ) # Analyze text word_count = len ( user_text . split ()) char_count = len ( user_text ) has_positive = any ( word in user_text . lower () for word in [ 'good' , 'great' , 'excellent' , 'happy' ]) # Store analysis variables [ 'wordCount' ] = word_count variables [ 'charCount' ] = char_count variables [ 'sentiment' ] = 'positive' if has_positive else 'neutral' return word_count","title":"6. Text Analysis"},{"location":"custom-code/#flow-routing","text":"","title":"Flow Routing"},{"location":"custom-code/#successerror-routing","text":"Every CustomCode component has two output paths: Success port (green): Used when code executes without errors Return value can be used for further routing Error port (red, if enabled): Used when code raises an exception Catches syntax errors, runtime errors Routes to error handling flow","title":"Success/Error Routing"},{"location":"custom-code/#custom-return-value-routing","text":"The value you return determines the flow: def __custom_fn__ ( variables ): score = int ( variables . get ( 'testScore' , 0 )) if score >= 90 : return \"excellent\" elif score >= 70 : return \"good\" elif score >= 50 : return \"pass\" else : return \"fail\" Then connect outputs: - \"excellent\" -> High achiever path - \"good\" -> Good performance path - \"pass\" -> Standard path - \"fail\" -> Retry path","title":"Custom Return Value Routing"},{"location":"custom-code/#best-practices","text":"","title":"Best Practices"},{"location":"custom-code/#code-quality","text":"DO : - Write clear, readable code - Add comments for complex logic - Handle edge cases (empty values, None) - Use try-except for risky operations - Test thoroughly before publishing DON'T : - Write overly complex code in one component - Ignore error handling - Assume variables exist without checking - Use Python features not in allowed list","title":"Code Quality"},{"location":"custom-code/#variable-access","text":"DO : # Safe with default name = variables . get ( 'userName' , 'Guest' ) # Check before access if 'userAge' in variables : age = variables [ 'userAge' ] # Type conversion with safety age = int ( variables . get ( 'userAge' , 0 )) DON'T : # Risky - may raise KeyError name = variables [ 'userName' ] # If userName doesn't exist # Unsafe conversion age = int ( variables [ 'userAge' ]) # If userAge is not a number","title":"Variable Access"},{"location":"custom-code/#performance","text":"DO : - Keep code execution fast (< 100ms) - Avoid complex loops over large data - Use efficient algorithms - Return quickly DON'T : - Create infinite loops - Process large datasets - Perform slow operations - Block execution","title":"Performance"},{"location":"custom-code/#error-handling","text":"","title":"Error Handling"},{"location":"custom-code/#error-output-port","text":"Route the conversation when code fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Syntax errors in code Runtime exceptions Type errors Division by zero Missing variables","title":"Error Output Port"},{"location":"custom-code/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we encountered an issue processing your request.","title":"Error Message to User"},{"location":"custom-code/#admin-email-notification","text":"Get notified when code fails: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes full traceback for debugging","title":"Admin Email Notification"},{"location":"custom-code/#security-limitations","text":"","title":"Security &amp; Limitations"},{"location":"custom-code/#whats-allowed","text":"Basic Python syntax : if/else, for loops, functions Safe built-ins : int, float, str, len, min, max, sum, bool String operations : split, join, upper, lower, strip, etc. List operations : append, index, slice Dictionary operations : get, set, keys, values","title":"What's Allowed"},{"location":"custom-code/#whats-not-allowed","text":"Imports : No import statements File operations : No file read/write Network : No HTTP requests or socket operations System calls : No os, sys, subprocess Dangerous functions : No eval, exec (except internally), compile External libraries : No numpy, pandas, requests, etc.","title":"What's NOT Allowed"},{"location":"custom-code/#sandboxed-environment","text":"Code runs in restricted environment Limited built-in functions only No access to file system No network access Protects against malicious code","title":"Sandboxed Environment"},{"location":"custom-code/#advanced-examples","text":"","title":"Advanced Examples"},{"location":"custom-code/#complex-validation","text":"def __custom_fn__ ( variables ): email = variables . get ( 'userEmail' , '' ) phone = variables . get ( 'userPhone' , '' ) # Validate email email_valid = '@' in email and '.' in email and len ( email ) > 5 # Validate phone (10 digits) phone_digits = '' . join ( c for c in phone if c . isdigit ()) phone_valid = len ( phone_digits ) == 10 # Store validation results variables [ 'emailValid' ] = email_valid variables [ 'phoneValid' ] = phone_valid # Overall validation if email_valid and phone_valid : return \"valid\" elif not email_valid : return \"invalid_email\" else : return \"invalid_phone\"","title":"Complex Validation"},{"location":"custom-code/#data-aggregation","text":"def __custom_fn__ ( variables ): # Collect all cart items item1_qty = int ( variables . get ( 'item1Qty' , 0 )) item2_qty = int ( variables . get ( 'item2Qty' , 0 )) item3_qty = int ( variables . get ( 'item3Qty' , 0 )) # Calculate totals total_items = item1_qty + item2_qty + item3_qty # Calculate costs item1_cost = item1_qty * 10.00 item2_cost = item2_qty * 15.00 item3_cost = item3_qty * 20.00 subtotal = item1_cost + item2_cost + item3_cost # Store results variables [ 'totalItems' ] = total_items variables [ 'subtotal' ] = round ( subtotal , 2 ) return total_items","title":"Data Aggregation"},{"location":"custom-code/#text-processing","text":"def __custom_fn__ ( variables ): user_input = variables . get ( 'userMessage' , '' ) # Clean and normalize cleaned = user_input . strip () . lower () # Extract keywords keywords = cleaned . split () # Categorize if any ( word in keywords for word in [ 'urgent' , 'emergency' , 'asap' ]): priority = 'high' elif any ( word in keywords for word in [ 'question' , 'help' , 'info' ]): priority = 'medium' else : priority = 'low' variables [ 'messagePriority' ] = priority variables [ 'keywordCount' ] = len ( keywords ) return priority","title":"Text Processing"},{"location":"custom-code/#debugging-tips","text":"","title":"Debugging Tips"},{"location":"custom-code/#testing-your-code","text":"Start simple : Test with basic code first Add logging : Use return values to debug Test edge cases : Empty values, None, zeros Error routing : Connect error port to see failures","title":"Testing Your Code"},{"location":"custom-code/#common-errors","text":"Error : KeyError: 'variableName' # Fix: Use .get() with default value = variables . get ( 'variableName' , 'default' ) Error : ValueError: invalid literal for int() # Fix: Validate before converting value = variables . get ( 'number' , '0' ) if value . isdigit (): number = int ( value ) else : number = 0 Error : NameError: name 'something' is not defined # Fix: All variables must be accessed via variables dict # Wrong: x = userName # Right: x = variables['userName']","title":"Common Errors"},{"location":"custom-code/#print-debugging","text":"While print() is not available, you can debug by: - Storing intermediate values in variables - Returning debug information - Using error messages to trace execution","title":"Print Debugging"},{"location":"custom-code/#best-practices_1","text":"","title":"Best Practices"},{"location":"custom-code/#code-structure","text":"DO : def __custom_fn__ ( variables ): # Get inputs with defaults value1 = variables . get ( 'var1' , 0 ) value2 = variables . get ( 'var2' , 0 ) # Validate if value1 < 0 or value2 < 0 : return \"error\" # Calculate result = value1 + value2 # Store variables [ 'result' ] = result # Return return result DON'T : def __custom_fn__ ( variables ): # No error handling result = variables [ 'var1' ] + variables [ 'var2' ] # May crash return result","title":"Code Structure"},{"location":"custom-code/#variable-handling","text":"DO : - Use .get() with defaults for optional variables - Validate variable types before operations - Handle None and empty values - Use descriptive variable names DON'T : - Assume variables exist - Skip type checking - Use cryptic variable names - Modify variables carelessly","title":"Variable Handling"},{"location":"custom-code/#error-prevention","text":"DO : - Add validation checks - Handle edge cases - Use try-except for risky operations - Test with various inputs DON'T : - Ignore potential errors - Use operations that might fail - Skip input validation","title":"Error Prevention"},{"location":"custom-code/#common-patterns","text":"","title":"Common Patterns"},{"location":"custom-code/#input-validation-pattern","text":"def __custom_fn__ ( variables ): user_input = variables . get ( 'userInput' , '' ) # Validation logic is_valid = len ( user_input ) >= 3 and user_input . isalnum () variables [ 'isValid' ] = is_valid return \"valid\" if is_valid else \"invalid\" Flow : QuestionText -> CustomCode (validate) |-- \"valid\" -> Continue \\-- \"invalid\" -> Error message -> Ask again","title":"Input Validation Pattern"},{"location":"custom-code/#data-transformation-pattern","text":"def __custom_fn__ ( variables ): raw_data = variables . get ( 'rawInput' , '' ) # Transform cleaned = raw_data . strip () . upper () formatted = cleaned . replace ( ' ' , '_' ) # Store variables [ 'cleanedData' ] = formatted return formatted","title":"Data Transformation Pattern"},{"location":"custom-code/#multi-field-validation-pattern","text":"def __custom_fn__ ( variables ): name = variables . get ( 'userName' , '' ) email = variables . get ( 'userEmail' , '' ) phone = variables . get ( 'userPhone' , '' ) # Validate each name_valid = len ( name ) >= 2 email_valid = '@' in email and '.' in email phone_valid = len ( phone ) >= 10 # Store individual results variables [ 'nameValid' ] = name_valid variables [ 'emailValid' ] = email_valid variables [ 'phoneValid' ] = phone_valid # Overall result if name_valid and email_valid and phone_valid : return \"all_valid\" else : return \"validation_failed\"","title":"Multi-Field Validation Pattern"},{"location":"custom-code/#error-handling_1","text":"","title":"Error Handling"},{"location":"custom-code/#error-output-port_1","text":"Route the conversation when code fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Syntax errors in Python code Runtime exceptions Type conversion errors Logic errors","title":"Error Output Port"},{"location":"custom-code/#error-message-to-user_1","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we encountered an issue. Please contact support. Note : Don't reveal technical error details to users.","title":"Error Message to User"},{"location":"custom-code/#admin-email-notification_1","text":"Get notified when code fails: Toggle \"Admin email when error\" to ON Notifications include: Full error traceback Variable values Component ID Timestamp","title":"Admin Email Notification"},{"location":"custom-code/#technical-details","text":"","title":"Technical Details"},{"location":"custom-code/#execution-environment","text":"Python version : 3.12+ Execution : Synchronous Timeout : 5 seconds max Memory : Limited to prevent abuse Safety : Sandboxed execution","title":"Execution Environment"},{"location":"custom-code/#function-requirements","text":"def __custom_fn__ ( variables ): # Required signature # Must accept 'variables' parameter # Must return a value pass Required : - Function must be named __custom_fn__ - Must accept one parameter: variables - Must return a value (any type) Optional : - Can modify variables dictionary - Can perform multiple operations - Can have multiple return statements","title":"Function Requirements"},{"location":"custom-code/#allowed-operations","text":"Supported : - Arithmetic: + , - , * , / , // , % , ** - Comparison: == , != , < , > , <= , >= - Logical: and , or , not - String methods: .upper() , .lower() , .split() , .join() , etc. - List operations: append , extend , slicing - Dictionary operations: get , set , keys , values Not supported : - Imports - Lambda functions - Generators - Decorators - Classes (beyond basic usage)","title":"Allowed Operations"},{"location":"custom-code/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"custom-code/#issue-must-define-custom_fnvariables","text":"Solution : # Correct structure def __custom_fn__ ( variables ): return \"result\" # Wrong - different function name def my_function ( variables ): # Won't work return \"result\"","title":"Issue: \"must define custom_fn(variables)\""},{"location":"custom-code/#issue-variable-not-found-error","text":"Solution : Use .get() with defaults: # Safe value = variables . get ( 'varName' , 'default' ) # Unsafe - crashes if varName doesn't exist value = variables [ 'varName' ]","title":"Issue: \"Variable not found\" error"},{"location":"custom-code/#issue-code-execution-times-out","text":"Check : - No infinite loops - Loops are bounded - Operations complete quickly - No heavy computations","title":"Issue: Code execution times out"},{"location":"custom-code/#issue-return-value-not-routing-correctly","text":"Check : - Return value matches output port label exactly - Return value is converted to string for routing - All possible return values have connected ports - Default port is connected","title":"Issue: Return value not routing correctly"},{"location":"custom-code/#issue-variables-not-updating","text":"Check : - You're modifying variables dict correctly - Variable names are valid - Changes are made before return statement - No syntax errors in assignment","title":"Issue: Variables not updating"},{"location":"custom-code/#when-not-to-use-customcode","text":"Consider alternatives when : Simple calculations : Use Formula component instead API calls : Use APIRequest component instead Text manipulation : Use Formula with ToString Comparisons : Use Formula True/False mode Email sending : Use Email component instead CustomCode is powerful but should be used when built-in components can't handle your needs.","title":"When NOT to Use CustomCode"},{"location":"custom-code/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"email/","text":"Email Component Overview The Email component allows you to send automated emails during your bot conversations. Perfect for sending confirmations, notifications, reports, and any email communication triggered by user interactions. When to Use Email Ideal for scenarios like: - Order confirmations - Receipt delivery - Appointment notifications - Form submissions - Support ticket creation - Lead notifications to your team - Follow-up communications Configuration Email Provider Choose how emails will be sent: Option 1: contact@intalos.de (Managed Email Service) Best for : Users who want a simple, managed email solution Requires : Pass Key from Intalos team Setup : Select \"contact@intalos.de\" from provider dropdown A warning will appear: \"Please contact contact@intalos.de for the Intalos AI email Pass Key\" Contact contact@intalos.de to request your Pass Key Enter the Pass Key in the password field Note : To use this email service, contact us at contact@intalos.de to receive your Pass Key. Option 2: Postmark (Self-Managed) Best for : Users who want full control and high deliverability Requires : Postmark account and API key Setup : Select \"Postmark\" from provider dropdown Enter your sender email address Enter your Postmark API key Verify sender email in Postmark dashboard Get Postmark : - Sign up at postmarkapp.com - Verify your sender domain/email - Generate API token from settings - Add to component configuration Email Fields Send To (Recipients) Specify who receives the email: Single recipient : john@example.com Multiple recipients (comma-separated): john@example.com, jane@example.com, support@company.com Using variables : {userEmail} {adminEmail}, {managerEmail} sales@company.com, {customerEmail} Pro Tip : Store email addresses in variables from previous components (QuestionText, APIRequest). Email Subject The subject line of your email: Order Confirmation - #{orderNumber} New Support Ticket from {userName} Your Appointment on {appointmentDate} Best practices : - Keep under 60 characters for mobile visibility - Include relevant details - Use variables for personalization - Be clear and specific Email Message The main content of your email: Rich text editor supports : - Bold , italic , underline text - Headings (H1, H2, H3) - Bullet lists and numbered lists - Variables: {userName} , {orderDetails} , etc. - Line breaks and paragraphs Example message : Hi {userName}, Thank you for your order! Order Details: - Product: {productName} - Quantity: {quantity} - Total: ${totalAmount} We'll send a confirmation when your order ships. Best regards, The Team How It Works Email Flow User completes action in bot (places order, submits form, etc.) Email component triggers Variables are replaced with actual values Email sent via configured provider Flow continues to next component Behind the Scenes Email content compiled with variable substitution HTML formatted from rich text editor Sent via Postmark or Intalos SMTP Delivery tracked and logged Errors caught and routed if configured Use Cases & Examples 1. Order Confirmation Configuration : - Provider: Postmark - Send to: {customerEmail} - Subject: Order Confirmation - #{orderNumber} - Message: Hi {customerName}, Your order has been confirmed! Order Number: {orderNumber} Total: ${orderTotal} Thank you for your purchase! 2. Lead Notification to Team Configuration : - Provider: Postmark - Send to: sales@company.com, manager@company.com - Subject: New Lead: {userName} - Message: New lead from WhatsApp bot: Name: {userName} Email: {userEmail} Phone: {userPhone} Interest: {productInterest} 3. Appointment Confirmation Configuration : - Provider: Postmark - Send to: {customerEmail} - Subject: Appointment Confirmed - {appointmentDate} - Message: Hello {customerName}, Your appointment is confirmed: Date: {appointmentDate} Time: {appointmentTime} Location: {locationAddress} See you then! 4. Support Ticket Created Configuration : - Provider: Postmark - Send to: {userEmail}, support@company.com - Subject: Support Ticket #{ticketNumber} Created - Message: Ticket #{ticketNumber} has been created. Issue: {issueDescription} Priority: {ticketPriority} We'll respond within 24 hours. Best Practices Email Content DO : - Keep emails concise and focused - Use clear, professional language - Include all relevant information - Personalize with user variables - Provide next steps or actions DON'T : - Send unnecessarily long emails - Include sensitive information in plain text - Use all caps or excessive formatting - Send generic, impersonal messages Subject Lines DO : - Make them descriptive and specific - Keep under 60 characters - Include key information (order #, ticket #) - Use variables for personalization DON'T : - Use vague subjects (\"Update\", \"Notification\") - Exceed 60 characters (may be cut off) - Use all caps or excessive punctuation - Be misleading or clickbait-y Recipients DO : - Verify email addresses are valid - Use variables from user input - Test with real email addresses - Consider privacy and consent DON'T : - Hardcode sensitive addresses in production - Send to unverified addresses - Include BCC recipients without consent - Send unsolicited emails Provider Setup Postmark Configuration Steps : 1. Create account at postmarkapp.com 2. Verify sender email : - Add your domain or email - Complete verification process (DNS records or email confirmation) 3. Generate API token : - Go to Servers -> API Tokens - Create new token - Copy the token 4. Configure in component : - Provider: Postmark - Sender email: your-verified-email@yourdomain.com - API Key: (paste your token) Why Postmark? - High deliverability rates - Real-time delivery tracking - Bounce and spam handling - Detailed analytics - Reliable infrastructure Intalos Email Service Steps : 1. Select \"contact@intalos.de\" in the Email component 2. You'll see a warning: \"Please contact contact@intalos.de for the Intalos AI email Pass Key\" 3. Contact contact@intalos.de to request your Pass Key 4. Enter the Pass Key in the component About This Service : - Managed email service provided by Intalos - Pass Keys are provided on request - Simple setup - no need to configure external email providers - Suitable for users who prefer a managed solution Error Handling Error Output Port Route the conversation when email sending fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Invalid recipient email API key errors Network failures Provider issues Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: We couldn't send the confirmation email. Please contact support. Admin Email Notification Get notified when email sending fails: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details for debugging Technical Details Email Formatting Content type : HTML Encoding : UTF-8 Rich text : Supported via editor Plain text fallback : Automatically generated Variable Substitution Variables are replaced before sending: - Subject line variables - Message body variables - Recipient address variables - All {variableName} patterns replaced Delivery Sending : Asynchronous (doesn't block bot flow) Timeout : 30 seconds Retries : Automatic for transient failures Tracking : Delivery status logged Size Limits Subject : 255 characters recommended Message body : No strict limit, but keep under 100 KB Recipients : Up to 50 addresses per email Attachments : Not currently supported Security & Privacy Email Privacy DO : - Only send emails to users who provided consent - Use secure API keys - Store API keys as environment variables - Follow data privacy regulations (GDPR, CCPA) DON'T : - Share API keys in screenshots or documentation - Send emails without user consent - Include passwords or sensitive data in emails - Store API keys in version control API Key Security Never share your Postmark API key Regenerate keys if compromised Use separate keys for testing and production Monitor usage in Postmark dashboard Troubleshooting Issue: Emails not sending Check : - API key is correct and active - Sender email is verified in Postmark - Recipient emails are valid - No typos in email addresses Issue: Emails going to spam Solution : - Verify your sender domain in Postmark - Add SPF and DKIM records to your DNS - Use professional, clear email content - Avoid spam trigger words Issue: Variables not replacing Check : - Variable names match exactly (case-sensitive) - Variables exist and have values - Syntax is correct: {variableName} Issue: Error \"Invalid API key\" Solution : - Verify API key in Postmark dashboard - Check for extra spaces in key - Ensure key is active and not expired - Regenerate key if needed Issue: \"Sender email not verified\" Solution : - Complete email/domain verification in Postmark - Check verification status - Add DNS records if using domain verification Advanced Tips Dynamic Recipients Use APIRequest to fetch email addresses, then send: APIRequest (get customer email) \\--> Store in {customerEmail} \\--> Email component sends to {customerEmail} Conditional Emails Send different emails based on conditions: Formula (check order size) |-- Large orders -> Email to {userEmail}, sales-manager@company.com \\-- Small orders -> Email to {userEmail} Email with Data Collection Combine user input with email notifications: QuestionText (collect feedback) \\--> Store in {userFeedback} \\--> Email to support@company.com with {userFeedback} Common Patterns Order Confirmation Flow Process Order -> Email (to customer) -> Email (to fulfillment team) Support Ticket System Collect Issue -> Create Ticket (APIRequest) -> Email (to user + support team) Lead Capture Collect Info -> Email (to sales team) -> Confirmation message to user Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"Email"},{"location":"email/#email-component","text":"","title":"Email Component"},{"location":"email/#overview","text":"The Email component allows you to send automated emails during your bot conversations. Perfect for sending confirmations, notifications, reports, and any email communication triggered by user interactions.","title":"Overview"},{"location":"email/#when-to-use-email","text":"Ideal for scenarios like: - Order confirmations - Receipt delivery - Appointment notifications - Form submissions - Support ticket creation - Lead notifications to your team - Follow-up communications","title":"When to Use Email"},{"location":"email/#configuration","text":"","title":"Configuration"},{"location":"email/#email-provider","text":"Choose how emails will be sent:","title":"Email Provider"},{"location":"email/#option-1-contactintalosde-managed-email-service","text":"Best for : Users who want a simple, managed email solution Requires : Pass Key from Intalos team Setup : Select \"contact@intalos.de\" from provider dropdown A warning will appear: \"Please contact contact@intalos.de for the Intalos AI email Pass Key\" Contact contact@intalos.de to request your Pass Key Enter the Pass Key in the password field Note : To use this email service, contact us at contact@intalos.de to receive your Pass Key.","title":"Option 1: contact@intalos.de (Managed Email Service)"},{"location":"email/#option-2-postmark-self-managed","text":"Best for : Users who want full control and high deliverability Requires : Postmark account and API key Setup : Select \"Postmark\" from provider dropdown Enter your sender email address Enter your Postmark API key Verify sender email in Postmark dashboard Get Postmark : - Sign up at postmarkapp.com - Verify your sender domain/email - Generate API token from settings - Add to component configuration","title":"Option 2: Postmark (Self-Managed)"},{"location":"email/#email-fields","text":"","title":"Email Fields"},{"location":"email/#send-to-recipients","text":"Specify who receives the email: Single recipient : john@example.com Multiple recipients (comma-separated): john@example.com, jane@example.com, support@company.com Using variables : {userEmail} {adminEmail}, {managerEmail} sales@company.com, {customerEmail} Pro Tip : Store email addresses in variables from previous components (QuestionText, APIRequest).","title":"Send To (Recipients)"},{"location":"email/#email-subject","text":"The subject line of your email: Order Confirmation - #{orderNumber} New Support Ticket from {userName} Your Appointment on {appointmentDate} Best practices : - Keep under 60 characters for mobile visibility - Include relevant details - Use variables for personalization - Be clear and specific","title":"Email Subject"},{"location":"email/#email-message","text":"The main content of your email: Rich text editor supports : - Bold , italic , underline text - Headings (H1, H2, H3) - Bullet lists and numbered lists - Variables: {userName} , {orderDetails} , etc. - Line breaks and paragraphs Example message : Hi {userName}, Thank you for your order! Order Details: - Product: {productName} - Quantity: {quantity} - Total: ${totalAmount} We'll send a confirmation when your order ships. Best regards, The Team","title":"Email Message"},{"location":"email/#how-it-works","text":"","title":"How It Works"},{"location":"email/#email-flow","text":"User completes action in bot (places order, submits form, etc.) Email component triggers Variables are replaced with actual values Email sent via configured provider Flow continues to next component","title":"Email Flow"},{"location":"email/#behind-the-scenes","text":"Email content compiled with variable substitution HTML formatted from rich text editor Sent via Postmark or Intalos SMTP Delivery tracked and logged Errors caught and routed if configured","title":"Behind the Scenes"},{"location":"email/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"email/#1-order-confirmation","text":"Configuration : - Provider: Postmark - Send to: {customerEmail} - Subject: Order Confirmation - #{orderNumber} - Message: Hi {customerName}, Your order has been confirmed! Order Number: {orderNumber} Total: ${orderTotal} Thank you for your purchase!","title":"1. Order Confirmation"},{"location":"email/#2-lead-notification-to-team","text":"Configuration : - Provider: Postmark - Send to: sales@company.com, manager@company.com - Subject: New Lead: {userName} - Message: New lead from WhatsApp bot: Name: {userName} Email: {userEmail} Phone: {userPhone} Interest: {productInterest}","title":"2. Lead Notification to Team"},{"location":"email/#3-appointment-confirmation","text":"Configuration : - Provider: Postmark - Send to: {customerEmail} - Subject: Appointment Confirmed - {appointmentDate} - Message: Hello {customerName}, Your appointment is confirmed: Date: {appointmentDate} Time: {appointmentTime} Location: {locationAddress} See you then!","title":"3. Appointment Confirmation"},{"location":"email/#4-support-ticket-created","text":"Configuration : - Provider: Postmark - Send to: {userEmail}, support@company.com - Subject: Support Ticket #{ticketNumber} Created - Message: Ticket #{ticketNumber} has been created. Issue: {issueDescription} Priority: {ticketPriority} We'll respond within 24 hours.","title":"4. Support Ticket Created"},{"location":"email/#best-practices","text":"","title":"Best Practices"},{"location":"email/#email-content","text":"DO : - Keep emails concise and focused - Use clear, professional language - Include all relevant information - Personalize with user variables - Provide next steps or actions DON'T : - Send unnecessarily long emails - Include sensitive information in plain text - Use all caps or excessive formatting - Send generic, impersonal messages","title":"Email Content"},{"location":"email/#subject-lines","text":"DO : - Make them descriptive and specific - Keep under 60 characters - Include key information (order #, ticket #) - Use variables for personalization DON'T : - Use vague subjects (\"Update\", \"Notification\") - Exceed 60 characters (may be cut off) - Use all caps or excessive punctuation - Be misleading or clickbait-y","title":"Subject Lines"},{"location":"email/#recipients","text":"DO : - Verify email addresses are valid - Use variables from user input - Test with real email addresses - Consider privacy and consent DON'T : - Hardcode sensitive addresses in production - Send to unverified addresses - Include BCC recipients without consent - Send unsolicited emails","title":"Recipients"},{"location":"email/#provider-setup","text":"","title":"Provider Setup"},{"location":"email/#postmark-configuration","text":"Steps : 1. Create account at postmarkapp.com 2. Verify sender email : - Add your domain or email - Complete verification process (DNS records or email confirmation) 3. Generate API token : - Go to Servers -> API Tokens - Create new token - Copy the token 4. Configure in component : - Provider: Postmark - Sender email: your-verified-email@yourdomain.com - API Key: (paste your token) Why Postmark? - High deliverability rates - Real-time delivery tracking - Bounce and spam handling - Detailed analytics - Reliable infrastructure","title":"Postmark Configuration"},{"location":"email/#intalos-email-service","text":"Steps : 1. Select \"contact@intalos.de\" in the Email component 2. You'll see a warning: \"Please contact contact@intalos.de for the Intalos AI email Pass Key\" 3. Contact contact@intalos.de to request your Pass Key 4. Enter the Pass Key in the component About This Service : - Managed email service provided by Intalos - Pass Keys are provided on request - Simple setup - no need to configure external email providers - Suitable for users who prefer a managed solution","title":"Intalos Email Service"},{"location":"email/#error-handling","text":"","title":"Error Handling"},{"location":"email/#error-output-port","text":"Route the conversation when email sending fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Invalid recipient email API key errors Network failures Provider issues","title":"Error Output Port"},{"location":"email/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: We couldn't send the confirmation email. Please contact support.","title":"Error Message to User"},{"location":"email/#admin-email-notification","text":"Get notified when email sending fails: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details for debugging","title":"Admin Email Notification"},{"location":"email/#technical-details","text":"","title":"Technical Details"},{"location":"email/#email-formatting","text":"Content type : HTML Encoding : UTF-8 Rich text : Supported via editor Plain text fallback : Automatically generated","title":"Email Formatting"},{"location":"email/#variable-substitution","text":"Variables are replaced before sending: - Subject line variables - Message body variables - Recipient address variables - All {variableName} patterns replaced","title":"Variable Substitution"},{"location":"email/#delivery","text":"Sending : Asynchronous (doesn't block bot flow) Timeout : 30 seconds Retries : Automatic for transient failures Tracking : Delivery status logged","title":"Delivery"},{"location":"email/#size-limits","text":"Subject : 255 characters recommended Message body : No strict limit, but keep under 100 KB Recipients : Up to 50 addresses per email Attachments : Not currently supported","title":"Size Limits"},{"location":"email/#security-privacy","text":"","title":"Security &amp; Privacy"},{"location":"email/#email-privacy","text":"DO : - Only send emails to users who provided consent - Use secure API keys - Store API keys as environment variables - Follow data privacy regulations (GDPR, CCPA) DON'T : - Share API keys in screenshots or documentation - Send emails without user consent - Include passwords or sensitive data in emails - Store API keys in version control","title":"Email Privacy"},{"location":"email/#api-key-security","text":"Never share your Postmark API key Regenerate keys if compromised Use separate keys for testing and production Monitor usage in Postmark dashboard","title":"API Key Security"},{"location":"email/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"email/#issue-emails-not-sending","text":"Check : - API key is correct and active - Sender email is verified in Postmark - Recipient emails are valid - No typos in email addresses","title":"Issue: Emails not sending"},{"location":"email/#issue-emails-going-to-spam","text":"Solution : - Verify your sender domain in Postmark - Add SPF and DKIM records to your DNS - Use professional, clear email content - Avoid spam trigger words","title":"Issue: Emails going to spam"},{"location":"email/#issue-variables-not-replacing","text":"Check : - Variable names match exactly (case-sensitive) - Variables exist and have values - Syntax is correct: {variableName}","title":"Issue: Variables not replacing"},{"location":"email/#issue-error-invalid-api-key","text":"Solution : - Verify API key in Postmark dashboard - Check for extra spaces in key - Ensure key is active and not expired - Regenerate key if needed","title":"Issue: Error \"Invalid API key\""},{"location":"email/#issue-sender-email-not-verified","text":"Solution : - Complete email/domain verification in Postmark - Check verification status - Add DNS records if using domain verification","title":"Issue: \"Sender email not verified\""},{"location":"email/#advanced-tips","text":"","title":"Advanced Tips"},{"location":"email/#dynamic-recipients","text":"Use APIRequest to fetch email addresses, then send: APIRequest (get customer email) \\--> Store in {customerEmail} \\--> Email component sends to {customerEmail}","title":"Dynamic Recipients"},{"location":"email/#conditional-emails","text":"Send different emails based on conditions: Formula (check order size) |-- Large orders -> Email to {userEmail}, sales-manager@company.com \\-- Small orders -> Email to {userEmail}","title":"Conditional Emails"},{"location":"email/#email-with-data-collection","text":"Combine user input with email notifications: QuestionText (collect feedback) \\--> Store in {userFeedback} \\--> Email to support@company.com with {userFeedback}","title":"Email with Data Collection"},{"location":"email/#common-patterns","text":"","title":"Common Patterns"},{"location":"email/#order-confirmation-flow","text":"Process Order -> Email (to customer) -> Email (to fulfillment team)","title":"Order Confirmation Flow"},{"location":"email/#support-ticket-system","text":"Collect Issue -> Create Ticket (APIRequest) -> Email (to user + support team)","title":"Support Ticket System"},{"location":"email/#lead-capture","text":"Collect Info -> Email (to sales team) -> Confirmation message to user","title":"Lead Capture"},{"location":"email/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"formula/","text":"Formula Component Overview The Formula component allows you to perform calculations, comparisons, and logical operations within your bot flow. Perfect for validating user input, calculating prices, routing based on conditions, and performing mathematical operations. When to Use Formula Ideal for scenarios like: - Price calculations and discounts - Input validation (age, quantity, etc.) - Conditional routing based on values - Mathematical operations - Data comparisons - String operations Calculation Modes The Formula component has three modes: 1. Answer Mode Purpose : Perform calculations and store the result Use when : - You need to calculate a total, sum, or product - Converting data types (numbers to strings) - Performing arithmetic operations Available functions : - Sum(a, b) - Add two numbers - Multiply(a, b) - Multiply two numbers - ToString(a) - Convert value to string Example : Sum(10, 20) -> Result: 30 Multiply(5, 4) -> Result: 20 Sum({quantity}, 5) -> Result: {quantity} + 5 ToString({orderId}) -> Result: String version of orderId 2. True/False Mode Purpose : Compare values and route based on result Use when : - Validating user input - Checking conditions - Age verification - Value comparisons Available functions : - IsEqual(a, b) - Checks if a equals b - IsNotEqual(a, b) - Checks if a does not equal b - IsGreaterThan(a, b) - Checks if a > b - IsLessThan(a, b) - Checks if a < b - IsGreaterOrEqual(a, b) - Checks if a >= b - IsLessOrEqual(a, b) - Checks if a <= b - Contains(container, value) - Checks if value exists in container Example : IsEqual({userAge}, 18) -> True if age is 18 IsGreaterThan({orderTotal}, 100) -> True if total > 100 Contains({userEmail}, \"@\") -> True if email has @ Flow routing : - True port -> Condition met - False port -> Condition not met 3. Custom Mode Purpose : Calculate and route based on the result value Use when : - You need to route to different paths based on calculation result - Multiple outcomes based on computed value - Complex decision trees Available functions : - Same as Answer mode (Sum, Multiply, ToString) How it works : 1. Formula calculates result 2. Result converted to string 3. Flow routes to matching output port 4. Default port used if no match Example : Formula: Sum({itemCount}, {bonusItems}) Output ports: - \"5\" -> Small order flow - \"10\" -> Medium order flow - \"15\" -> Large order flow - \"default\" -> Standard flow Configuration Store Result in Variable Save the calculation result: In \"Store output in variable\" , enter a variable name: Example: calculatedTotal Example: validationResult Example: discountedPrice Use this variable later in your flow: Your total is ${calculatedTotal} Select Calculation Mode Choose from the dropdown: 1. Answer - Store calculation result 2. True/False - Route based on comparison 3. Custom - Route based on result value Enter Formula Double-click the formula text in the component to edit: Format : FunctionName(argument1, argument2) Using variables : {variableName} Examples : Sum(10, 5) Multiply({price}, {quantity}) IsGreaterThan({userAge}, 18) Contains({userInput}, \"yes\") How It Works Answer Mode Flow Formula executes : e.g., Sum(10, 20) Result calculated : 30 Stored in variable : {calculatedTotal} = 30 Flow continues to next component True/False Mode Flow Formula executes : e.g., IsGreaterThan({age}, 18) Condition evaluated : True or False Flow routes : True -> Age verified path False -> Age rejection path Custom Mode Flow Formula executes : e.g., Sum({items}, 5) Result calculated : 15 Result converted to string : \"15\" Flow routes to output port labeled \"15\" (or default if no match) Use Cases & Examples 1. Calculate Order Total Mode : Answer Formula : Sum({subtotal}, {shippingCost}) Variable : orderTotal Flow : Collect items -> Calculate subtotal -> Formula (add shipping) -> Show total 2. Age Verification Mode : True/False Formula : IsGreaterOrEqual({userAge}, 18) Flow : QuestionText (ask age) -> Formula (check >= 18) |-- True -> Proceed with service \\-- False -> \"Sorry, must be 18+\" 3. Discount Calculator Mode : Answer Formula : Multiply({price}, 0.9) Variable : discountedPrice Result : Applies 10% discount 4. Email Validation Mode : True/False Formula : Contains({userEmail}, \"@\") Flow : QuestionText (email) -> Formula (check has @) |-- True -> Valid email \\-- False -> \"Please enter valid email\" 5. Tiered Pricing Mode : Custom Formula : ToString({quantity}) Output ports : - \"1\" -> $10 per item - \"5\" -> $9 per item - \"10\" -> $8 per item - \"default\" -> Quote required 6. Input Validation Range Mode : True/False Formula : IsGreaterThan({quantity}, 0) Combined with : Formula 1: IsGreaterThan({quantity}, 0) Formula 2: IsLessThan({quantity}, 100) Formula Syntax Function Format FunctionName(argument1, argument2) Rules : - Function name is case-sensitive - Arguments separated by commas - No spaces in function name - Variables wrapped in curly braces Using Variables Sum({variable1}, {variable2}) IsEqual({userInput}, \"yes\") Multiply({price}, {quantity}) Variable values : - Must exist before Formula runs - Automatically converted to appropriate type - Numbers, strings, and booleans supported Allowed Values Numbers : Sum(10, 20) Multiply(5.5, 2) IsGreaterThan(100, 50) Strings : IsEqual({userName}, \"John\") Contains({userInput}, \"yes\") ToString(12345) Variables : Sum({var1}, {var2}) IsEqual({userChoice}, {expectedValue}) Available Functions Reference Mathematical Functions (Answer & Custom modes) Function Arguments Returns Example Sum(a, b) 2 numbers Number Sum(10, 5) -> 15 Multiply(a, b) 2 numbers Number Multiply(3, 4) -> 12 ToString(a) Any value String ToString(123) -> \"123\" Comparison Functions (True/False mode) Function Arguments Returns Example IsEqual(a, b) 2 values Boolean IsEqual(5, 5) -> True IsNotEqual(a, b) 2 values Boolean IsNotEqual(5, 3) -> True IsGreaterThan(a, b) 2 numbers Boolean IsGreaterThan(10, 5) -> True IsLessThan(a, b) 2 numbers Boolean IsLessThan(5, 10) -> True IsGreaterOrEqual(a, b) 2 numbers Boolean IsGreaterOrEqual(5, 5) -> True IsLessOrEqual(a, b) 2 numbers Boolean IsLessOrEqual(3, 5) -> True Contains(container, value) String, String Boolean Contains(\"hello\", \"ell\") -> True Best Practices Formula Design DO : - Keep formulas simple and focused - Use descriptive variable names - Test with different input values - Document complex formulas DON'T : - Create overly complex calculations - Nest functions (not supported) - Use undefined variables - Perform calculations that could cause errors (divide by zero) Variable Usage DO : - Ensure variables exist before using in formulas - Use appropriate data types (numbers for math) - Validate user input before calculations - Handle edge cases (empty values, zero, negatives) DON'T : - Assume variables have values - Mix incompatible types without conversion - Use variables that might be undefined Routing Logic DO : - Use True/False mode for binary decisions - Use Custom mode for multiple outcomes - Provide default paths for unmatched results - Test all possible routes DON'T : - Create unreachable paths - Forget to connect all output ports - Create circular logic loops Error Handling Error Output Port Route the conversation when formula fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Invalid formula syntax Undefined variables Type mismatches Calculation errors Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't process that. Please try again. Admin Email Notification Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details and formula Technical Details Execution Processing : Synchronous (immediate) Variables : Replaced before calculation Type conversion : Automatic where possible Error handling : Catches exceptions and routes to error port Security Sandboxed execution : Only allowed functions can run No arbitrary code : AST parsing prevents injection Function whitelist : Only pre-defined functions available Safe evaluation : No eval() or exec() used Limitations No nested functions : Sum(Multiply(2, 3), 5) not supported Two arguments max : Functions limited to 2 parameters No variables in function names : Function name must be literal Constants only after substitution : Variables resolved to constants before evaluation Common Patterns Multi-Step Validation QuestionText (age) -> Formula (IsGreaterOrEqual({age}, 18)) |-- True -> Formula (IsLessThan({age}, 65)) | |-- True -> Eligible | \\-- False -> Senior category \\-- False -> \"Must be 18+\" Dynamic Pricing Select quantity -> Formula (Multiply({quantity}, {pricePerItem})) -> Store in {subtotal} -> Formula (Sum({subtotal}, {shippingFee})) -> Store in {total} -> Show total Input Range Validation QuestionText (enter number) -> Formula (IsGreaterThan({number}, 0)) |-- True -> Formula (IsLessThan({number}, 100)) | |-- True -> Valid range | \\-- False -> \"Too high\" \\-- False -> \"Must be positive\" Conditional Flow Routing Calculate score -> Formula Custom (Sum({quiz1}, {quiz2})) |-- \"10\" -> Perfect score flow |-- \"8\" -> High score flow |-- \"5\" -> Medium score flow \\-- default -> Low score flow Troubleshooting Issue: Formula syntax error Check : - Function name is spelled correctly (case-sensitive) - Parentheses are balanced - Arguments are separated by comma - No spaces in function name Good : Sum(10, 5) Bad : sum(10,5) , Sum (10, 5) , Sum(10 5) Issue: Variables not found Check : - Variable name matches exactly (case-sensitive) - Variable was created in previous component - Variable has a value - Syntax: {variableName} with curly braces Issue: Wrong result type Solution : - Use ToString() to convert numbers to strings - Ensure variables are the right type for the operation - Check that comparison functions get comparable values Issue: Custom mode routing fails Check : - Output port labels match possible results exactly - Default port is connected - Result is converted to string for matching - Test with all possible values Issue: Calculation returns error Check : - Arguments are valid numbers (for math functions) - No division by zero scenarios - Variables are defined and not empty - Function arguments are correct type Advanced Tips Chaining Formulas Perform complex calculations by chaining multiple Formula components: Formula 1: Sum({price}, {tax}) -> Store in {priceWithTax} -> Formula 2: Multiply({priceWithTax}, {quantity}) -> Store in {totalCost} Validation Patterns Email validation : Contains({email}, \"@\") Numeric range : IsGreaterOrEqual({value}, {min}) AND IsLessOrEqual({value}, {max}) (Use two Formula components) String matching : IsEqual({userResponse}, \"yes\") Dynamic Calculations Use variables from previous components: APIRequest (get price from API) -> Store in {apiPrice} -> Formula (Multiply({apiPrice}, {quantity})) -> Store in {total} Comparison with Other Components Formula vs CustomCode Use Formula when : - Simple calculations needed - Standard operations (Sum, Multiply, comparisons) - Want visual, no-code solution - Need basic validation Use CustomCode when : - Complex logic required - Need advanced Python operations - Custom algorithms - Multiple operations in one component Formula vs APIRequest Use Formula when : - Calculations can be done locally - No external data needed - Immediate results required Use APIRequest when : - Need to fetch external data - Complex calculations better on server - Need third-party validation Examples by Use Case Price Calculation Quantity: 5 Price per item: $10 Formula: Multiply(10, {quantity}) Variable: totalPrice Result: $50 Age Gate User enters age: 25 Formula: IsGreaterOrEqual({userAge}, 21) Routes to: |-- True -> Show alcohol products \\-- False -> Show non-alcohol products Discount Tier Order total: $250 Formula Custom: ToString({orderTotal}) Routes: |-- \"100\" -> 5% discount |-- \"200\" -> 10% discount |-- \"500\" -> 20% discount \\-- default -> No discount Input Validation User enters quantity: 150 Formula: IsLessThan({quantity}, 100) Routes to: |-- True -> Process order \\-- False -> \"Maximum 99 items per order\" Error Handling Error Output Port Route the conversation when formula fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Invalid formula syntax Undefined variables Type errors Calculation failures Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't process that value. Please try again. Admin Email Notification Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details and formula Technical Details Formula Execution Parser : Abstract Syntax Tree (AST) Safety : Sandboxed execution Variable replacement : Before evaluation Type handling : Automatic conversion where possible Supported Data Types Numbers : - Integers: 10 , 100 , {quantity} - Decimals: 10.5 , {price} - Negative: -5 , {discount} Strings : - Text: \"hello\" , {userName} - Empty: \"\" - With variables: {userInput} Booleans : - True/False results from comparisons - Stored as boolean values Limitations Two arguments maximum per function No nested functions : Can't do Sum(Multiply(2, 3), 5) No custom functions : Only predefined functions allowed No loops or conditionals : Use separate components for complex logic Security Safe Execution The Formula component: - Uses AST parsing (not eval()) - Whitelisted functions only - No arbitrary code execution - Sandboxed environment What's NOT Allowed Custom function definitions Import statements File system access Network requests Variable assignments (except output variable) Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"Formula"},{"location":"formula/#formula-component","text":"","title":"Formula Component"},{"location":"formula/#overview","text":"The Formula component allows you to perform calculations, comparisons, and logical operations within your bot flow. Perfect for validating user input, calculating prices, routing based on conditions, and performing mathematical operations.","title":"Overview"},{"location":"formula/#when-to-use-formula","text":"Ideal for scenarios like: - Price calculations and discounts - Input validation (age, quantity, etc.) - Conditional routing based on values - Mathematical operations - Data comparisons - String operations","title":"When to Use Formula"},{"location":"formula/#calculation-modes","text":"The Formula component has three modes:","title":"Calculation Modes"},{"location":"formula/#1-answer-mode","text":"Purpose : Perform calculations and store the result Use when : - You need to calculate a total, sum, or product - Converting data types (numbers to strings) - Performing arithmetic operations Available functions : - Sum(a, b) - Add two numbers - Multiply(a, b) - Multiply two numbers - ToString(a) - Convert value to string Example : Sum(10, 20) -> Result: 30 Multiply(5, 4) -> Result: 20 Sum({quantity}, 5) -> Result: {quantity} + 5 ToString({orderId}) -> Result: String version of orderId","title":"1. Answer Mode"},{"location":"formula/#2-truefalse-mode","text":"Purpose : Compare values and route based on result Use when : - Validating user input - Checking conditions - Age verification - Value comparisons Available functions : - IsEqual(a, b) - Checks if a equals b - IsNotEqual(a, b) - Checks if a does not equal b - IsGreaterThan(a, b) - Checks if a > b - IsLessThan(a, b) - Checks if a < b - IsGreaterOrEqual(a, b) - Checks if a >= b - IsLessOrEqual(a, b) - Checks if a <= b - Contains(container, value) - Checks if value exists in container Example : IsEqual({userAge}, 18) -> True if age is 18 IsGreaterThan({orderTotal}, 100) -> True if total > 100 Contains({userEmail}, \"@\") -> True if email has @ Flow routing : - True port -> Condition met - False port -> Condition not met","title":"2. True/False Mode"},{"location":"formula/#3-custom-mode","text":"Purpose : Calculate and route based on the result value Use when : - You need to route to different paths based on calculation result - Multiple outcomes based on computed value - Complex decision trees Available functions : - Same as Answer mode (Sum, Multiply, ToString) How it works : 1. Formula calculates result 2. Result converted to string 3. Flow routes to matching output port 4. Default port used if no match Example : Formula: Sum({itemCount}, {bonusItems}) Output ports: - \"5\" -> Small order flow - \"10\" -> Medium order flow - \"15\" -> Large order flow - \"default\" -> Standard flow","title":"3. Custom Mode"},{"location":"formula/#configuration","text":"","title":"Configuration"},{"location":"formula/#store-result-in-variable","text":"Save the calculation result: In \"Store output in variable\" , enter a variable name: Example: calculatedTotal Example: validationResult Example: discountedPrice Use this variable later in your flow: Your total is ${calculatedTotal}","title":"Store Result in Variable"},{"location":"formula/#select-calculation-mode","text":"Choose from the dropdown: 1. Answer - Store calculation result 2. True/False - Route based on comparison 3. Custom - Route based on result value","title":"Select Calculation Mode"},{"location":"formula/#enter-formula","text":"Double-click the formula text in the component to edit: Format : FunctionName(argument1, argument2) Using variables : {variableName} Examples : Sum(10, 5) Multiply({price}, {quantity}) IsGreaterThan({userAge}, 18) Contains({userInput}, \"yes\")","title":"Enter Formula"},{"location":"formula/#how-it-works","text":"","title":"How It Works"},{"location":"formula/#answer-mode-flow","text":"Formula executes : e.g., Sum(10, 20) Result calculated : 30 Stored in variable : {calculatedTotal} = 30 Flow continues to next component","title":"Answer Mode Flow"},{"location":"formula/#truefalse-mode-flow","text":"Formula executes : e.g., IsGreaterThan({age}, 18) Condition evaluated : True or False Flow routes : True -> Age verified path False -> Age rejection path","title":"True/False Mode Flow"},{"location":"formula/#custom-mode-flow","text":"Formula executes : e.g., Sum({items}, 5) Result calculated : 15 Result converted to string : \"15\" Flow routes to output port labeled \"15\" (or default if no match)","title":"Custom Mode Flow"},{"location":"formula/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"formula/#1-calculate-order-total","text":"Mode : Answer Formula : Sum({subtotal}, {shippingCost}) Variable : orderTotal Flow : Collect items -> Calculate subtotal -> Formula (add shipping) -> Show total","title":"1. Calculate Order Total"},{"location":"formula/#2-age-verification","text":"Mode : True/False Formula : IsGreaterOrEqual({userAge}, 18) Flow : QuestionText (ask age) -> Formula (check >= 18) |-- True -> Proceed with service \\-- False -> \"Sorry, must be 18+\"","title":"2. Age Verification"},{"location":"formula/#3-discount-calculator","text":"Mode : Answer Formula : Multiply({price}, 0.9) Variable : discountedPrice Result : Applies 10% discount","title":"3. Discount Calculator"},{"location":"formula/#4-email-validation","text":"Mode : True/False Formula : Contains({userEmail}, \"@\") Flow : QuestionText (email) -> Formula (check has @) |-- True -> Valid email \\-- False -> \"Please enter valid email\"","title":"4. Email Validation"},{"location":"formula/#5-tiered-pricing","text":"Mode : Custom Formula : ToString({quantity}) Output ports : - \"1\" -> $10 per item - \"5\" -> $9 per item - \"10\" -> $8 per item - \"default\" -> Quote required","title":"5. Tiered Pricing"},{"location":"formula/#6-input-validation-range","text":"Mode : True/False Formula : IsGreaterThan({quantity}, 0) Combined with : Formula 1: IsGreaterThan({quantity}, 0) Formula 2: IsLessThan({quantity}, 100)","title":"6. Input Validation Range"},{"location":"formula/#formula-syntax","text":"","title":"Formula Syntax"},{"location":"formula/#function-format","text":"FunctionName(argument1, argument2) Rules : - Function name is case-sensitive - Arguments separated by commas - No spaces in function name - Variables wrapped in curly braces","title":"Function Format"},{"location":"formula/#using-variables","text":"Sum({variable1}, {variable2}) IsEqual({userInput}, \"yes\") Multiply({price}, {quantity}) Variable values : - Must exist before Formula runs - Automatically converted to appropriate type - Numbers, strings, and booleans supported","title":"Using Variables"},{"location":"formula/#allowed-values","text":"Numbers : Sum(10, 20) Multiply(5.5, 2) IsGreaterThan(100, 50) Strings : IsEqual({userName}, \"John\") Contains({userInput}, \"yes\") ToString(12345) Variables : Sum({var1}, {var2}) IsEqual({userChoice}, {expectedValue})","title":"Allowed Values"},{"location":"formula/#available-functions-reference","text":"","title":"Available Functions Reference"},{"location":"formula/#mathematical-functions-answer-custom-modes","text":"Function Arguments Returns Example Sum(a, b) 2 numbers Number Sum(10, 5) -> 15 Multiply(a, b) 2 numbers Number Multiply(3, 4) -> 12 ToString(a) Any value String ToString(123) -> \"123\"","title":"Mathematical Functions (Answer &amp; Custom modes)"},{"location":"formula/#comparison-functions-truefalse-mode","text":"Function Arguments Returns Example IsEqual(a, b) 2 values Boolean IsEqual(5, 5) -> True IsNotEqual(a, b) 2 values Boolean IsNotEqual(5, 3) -> True IsGreaterThan(a, b) 2 numbers Boolean IsGreaterThan(10, 5) -> True IsLessThan(a, b) 2 numbers Boolean IsLessThan(5, 10) -> True IsGreaterOrEqual(a, b) 2 numbers Boolean IsGreaterOrEqual(5, 5) -> True IsLessOrEqual(a, b) 2 numbers Boolean IsLessOrEqual(3, 5) -> True Contains(container, value) String, String Boolean Contains(\"hello\", \"ell\") -> True","title":"Comparison Functions (True/False mode)"},{"location":"formula/#best-practices","text":"","title":"Best Practices"},{"location":"formula/#formula-design","text":"DO : - Keep formulas simple and focused - Use descriptive variable names - Test with different input values - Document complex formulas DON'T : - Create overly complex calculations - Nest functions (not supported) - Use undefined variables - Perform calculations that could cause errors (divide by zero)","title":"Formula Design"},{"location":"formula/#variable-usage","text":"DO : - Ensure variables exist before using in formulas - Use appropriate data types (numbers for math) - Validate user input before calculations - Handle edge cases (empty values, zero, negatives) DON'T : - Assume variables have values - Mix incompatible types without conversion - Use variables that might be undefined","title":"Variable Usage"},{"location":"formula/#routing-logic","text":"DO : - Use True/False mode for binary decisions - Use Custom mode for multiple outcomes - Provide default paths for unmatched results - Test all possible routes DON'T : - Create unreachable paths - Forget to connect all output ports - Create circular logic loops","title":"Routing Logic"},{"location":"formula/#error-handling","text":"","title":"Error Handling"},{"location":"formula/#error-output-port","text":"Route the conversation when formula fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Invalid formula syntax Undefined variables Type mismatches Calculation errors","title":"Error Output Port"},{"location":"formula/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't process that. Please try again.","title":"Error Message to User"},{"location":"formula/#admin-email-notification","text":"Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details and formula","title":"Admin Email Notification"},{"location":"formula/#technical-details","text":"","title":"Technical Details"},{"location":"formula/#execution","text":"Processing : Synchronous (immediate) Variables : Replaced before calculation Type conversion : Automatic where possible Error handling : Catches exceptions and routes to error port","title":"Execution"},{"location":"formula/#security","text":"Sandboxed execution : Only allowed functions can run No arbitrary code : AST parsing prevents injection Function whitelist : Only pre-defined functions available Safe evaluation : No eval() or exec() used","title":"Security"},{"location":"formula/#limitations","text":"No nested functions : Sum(Multiply(2, 3), 5) not supported Two arguments max : Functions limited to 2 parameters No variables in function names : Function name must be literal Constants only after substitution : Variables resolved to constants before evaluation","title":"Limitations"},{"location":"formula/#common-patterns","text":"","title":"Common Patterns"},{"location":"formula/#multi-step-validation","text":"QuestionText (age) -> Formula (IsGreaterOrEqual({age}, 18)) |-- True -> Formula (IsLessThan({age}, 65)) | |-- True -> Eligible | \\-- False -> Senior category \\-- False -> \"Must be 18+\"","title":"Multi-Step Validation"},{"location":"formula/#dynamic-pricing","text":"Select quantity -> Formula (Multiply({quantity}, {pricePerItem})) -> Store in {subtotal} -> Formula (Sum({subtotal}, {shippingFee})) -> Store in {total} -> Show total","title":"Dynamic Pricing"},{"location":"formula/#input-range-validation","text":"QuestionText (enter number) -> Formula (IsGreaterThan({number}, 0)) |-- True -> Formula (IsLessThan({number}, 100)) | |-- True -> Valid range | \\-- False -> \"Too high\" \\-- False -> \"Must be positive\"","title":"Input Range Validation"},{"location":"formula/#conditional-flow-routing","text":"Calculate score -> Formula Custom (Sum({quiz1}, {quiz2})) |-- \"10\" -> Perfect score flow |-- \"8\" -> High score flow |-- \"5\" -> Medium score flow \\-- default -> Low score flow","title":"Conditional Flow Routing"},{"location":"formula/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"formula/#issue-formula-syntax-error","text":"Check : - Function name is spelled correctly (case-sensitive) - Parentheses are balanced - Arguments are separated by comma - No spaces in function name Good : Sum(10, 5) Bad : sum(10,5) , Sum (10, 5) , Sum(10 5)","title":"Issue: Formula syntax error"},{"location":"formula/#issue-variables-not-found","text":"Check : - Variable name matches exactly (case-sensitive) - Variable was created in previous component - Variable has a value - Syntax: {variableName} with curly braces","title":"Issue: Variables not found"},{"location":"formula/#issue-wrong-result-type","text":"Solution : - Use ToString() to convert numbers to strings - Ensure variables are the right type for the operation - Check that comparison functions get comparable values","title":"Issue: Wrong result type"},{"location":"formula/#issue-custom-mode-routing-fails","text":"Check : - Output port labels match possible results exactly - Default port is connected - Result is converted to string for matching - Test with all possible values","title":"Issue: Custom mode routing fails"},{"location":"formula/#issue-calculation-returns-error","text":"Check : - Arguments are valid numbers (for math functions) - No division by zero scenarios - Variables are defined and not empty - Function arguments are correct type","title":"Issue: Calculation returns error"},{"location":"formula/#advanced-tips","text":"","title":"Advanced Tips"},{"location":"formula/#chaining-formulas","text":"Perform complex calculations by chaining multiple Formula components: Formula 1: Sum({price}, {tax}) -> Store in {priceWithTax} -> Formula 2: Multiply({priceWithTax}, {quantity}) -> Store in {totalCost}","title":"Chaining Formulas"},{"location":"formula/#validation-patterns","text":"Email validation : Contains({email}, \"@\") Numeric range : IsGreaterOrEqual({value}, {min}) AND IsLessOrEqual({value}, {max}) (Use two Formula components) String matching : IsEqual({userResponse}, \"yes\")","title":"Validation Patterns"},{"location":"formula/#dynamic-calculations","text":"Use variables from previous components: APIRequest (get price from API) -> Store in {apiPrice} -> Formula (Multiply({apiPrice}, {quantity})) -> Store in {total}","title":"Dynamic Calculations"},{"location":"formula/#comparison-with-other-components","text":"","title":"Comparison with Other Components"},{"location":"formula/#formula-vs-customcode","text":"Use Formula when : - Simple calculations needed - Standard operations (Sum, Multiply, comparisons) - Want visual, no-code solution - Need basic validation Use CustomCode when : - Complex logic required - Need advanced Python operations - Custom algorithms - Multiple operations in one component","title":"Formula vs CustomCode"},{"location":"formula/#formula-vs-apirequest","text":"Use Formula when : - Calculations can be done locally - No external data needed - Immediate results required Use APIRequest when : - Need to fetch external data - Complex calculations better on server - Need third-party validation","title":"Formula vs APIRequest"},{"location":"formula/#examples-by-use-case","text":"","title":"Examples by Use Case"},{"location":"formula/#price-calculation","text":"Quantity: 5 Price per item: $10 Formula: Multiply(10, {quantity}) Variable: totalPrice Result: $50","title":"Price Calculation"},{"location":"formula/#age-gate","text":"User enters age: 25 Formula: IsGreaterOrEqual({userAge}, 21) Routes to: |-- True -> Show alcohol products \\-- False -> Show non-alcohol products","title":"Age Gate"},{"location":"formula/#discount-tier","text":"Order total: $250 Formula Custom: ToString({orderTotal}) Routes: |-- \"100\" -> 5% discount |-- \"200\" -> 10% discount |-- \"500\" -> 20% discount \\-- default -> No discount","title":"Discount Tier"},{"location":"formula/#input-validation","text":"User enters quantity: 150 Formula: IsLessThan({quantity}, 100) Routes to: |-- True -> Process order \\-- False -> \"Maximum 99 items per order\"","title":"Input Validation"},{"location":"formula/#error-handling_1","text":"","title":"Error Handling"},{"location":"formula/#error-output-port_1","text":"Route the conversation when formula fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Invalid formula syntax Undefined variables Type errors Calculation failures","title":"Error Output Port"},{"location":"formula/#error-message-to-user_1","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't process that value. Please try again.","title":"Error Message to User"},{"location":"formula/#admin-email-notification_1","text":"Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details and formula","title":"Admin Email Notification"},{"location":"formula/#technical-details_1","text":"","title":"Technical Details"},{"location":"formula/#formula-execution","text":"Parser : Abstract Syntax Tree (AST) Safety : Sandboxed execution Variable replacement : Before evaluation Type handling : Automatic conversion where possible","title":"Formula Execution"},{"location":"formula/#supported-data-types","text":"Numbers : - Integers: 10 , 100 , {quantity} - Decimals: 10.5 , {price} - Negative: -5 , {discount} Strings : - Text: \"hello\" , {userName} - Empty: \"\" - With variables: {userInput} Booleans : - True/False results from comparisons - Stored as boolean values","title":"Supported Data Types"},{"location":"formula/#limitations_1","text":"Two arguments maximum per function No nested functions : Can't do Sum(Multiply(2, 3), 5) No custom functions : Only predefined functions allowed No loops or conditionals : Use separate components for complex logic","title":"Limitations"},{"location":"formula/#security_1","text":"","title":"Security"},{"location":"formula/#safe-execution","text":"The Formula component: - Uses AST parsing (not eval()) - Whitelisted functions only - No arbitrary code execution - Sandboxed environment","title":"Safe Execution"},{"location":"formula/#whats-not-allowed","text":"Custom function definitions Import statements File system access Network requests Variable assignments (except output variable)","title":"What's NOT Allowed"},{"location":"formula/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"google-drive/","text":"GoogleDrive Component Overview The GoogleDrive component allows you to upload files received from users directly to your Google Drive. Perfect for storing user-submitted photos, documents, and files in an organized, cloud-based location. When to Use GoogleDrive Ideal for scenarios like: - Archiving user-submitted documents - Storing product photos from customers - Organizing form attachments - Backing up important files - Creating searchable file repositories - Integrating with Google Workspace workflows Setup Requirements Before You Start Google Account : You need a Google account with Google Drive access Google Drive Folder : Create a folder where files will be uploaded Authorization : Grant Intalos access to your Google Drive QuestionMedia Component : Must be placed before GoogleDrive to receive files Configuration Step 1: Connect Google Account Click \"Login with Google\" in the component Authorize Intalos AI Bot Builder Grant permissions to access Google Drive Select your Google account Step 2: Select Upload Folder Click \"Select Folder\" button Browse your Google Drive folders Select destination folder for uploads Component saves folder selection Step 3: Configure File Storage Store File URL The Google Drive file URL will be saved to a variable: In \"Store file URL in variable\" , enter variable name: Example: uploadedFileUrl Example: documentLink Example: userPhotoUrl Use this URL later to: Send to your team via Email Store in database via APIRequest Display to users Reference in other systems Image Safety Check (Optional) Automatically validate uploaded images for inappropriate content using Google Cloud Vision API. When to Enable Use when : - Accepting user-generated images - Public-facing applications - Community guidelines enforcement - Content moderation required - Child-safe applications Skip when : - Only accepting documents - Trusted user base - Internal applications - Cost is a concern Setup Toggle \"Enable Image Safety Check\" to ON Get API key from Google Cloud Console: Visit: https://console.cloud.google.com/ Enable Cloud Vision API Create API key Copy the key Paste API key in component Click \"Apply Changes\" What It Checks The system checks for: - Adult content - Violence - Racy/suggestive content - Medical/graphic images - Spoofed/manipulated content What Happens Image passes : - File uploaded to Google Drive - URL stored in variable - Flow continues Image fails : - File NOT uploaded - User notified (customizable message) - Flow routes to error port - Admin notified (if enabled) How It Works Upload Process User sends file via WhatsApp (in QuestionMedia component) File received by bot Safety check (if enabled and file is image) Upload to Drive in selected folder URL generated and stored in variable Flow continues to next component File Organization In your Google Drive : Selected Folder/ |--\u2500 user_file_1.pdf |--\u2500 user_photo_2.jpg |--\u2500 document_3.pdf \\--\u2500 ... (all uploaded files) File naming : - Original filename preserved - Duplicate names handled automatically - Organized by upload date Use Cases & Examples 1. Document Collection Flow : QuestionMedia (collect PDF) -> GoogleDrive (upload to \"Customer Documents\" folder) -> Store URL in {documentUrl} -> Email (send {documentUrl} to team) -> Confirmation to user 2. ID Verification Flow : QuestionMedia (collect ID photo) -> GoogleDrive (with safety check) |-- Success -> Upload to \"ID Verifications\" folder \u2502 -> Store in {idPhotoUrl} \u2502 -> APIRequest (send to verification service) \\-- Safety check failed -> \"Please upload a clear photo of your ID\" 3. Product Photo Collection Flow : QuestionMedia (collect product photo) -> GoogleDrive (with safety check, upload to \"Product Photos\") -> Store in {productPhotoUrl} -> GoogleSheets (insert row with {productPhotoUrl}) -> \"Thank you! Photo received.\" 4. Support Ticket Attachments Flow : QuestionMedia (collect screenshot) -> GoogleDrive (upload to \"Support Attachments/{ticketId}\") -> Store in {attachmentUrl} -> Email (notify support with {attachmentUrl}) Best Practices Folder Organization DO : - Create dedicated folders for different file types - Use descriptive folder names - Organize by date or category - Keep folder structure simple DON'T : - Upload all files to root Drive - Use complex nested structures - Mix different file types in one folder - Create too many sub-folders Safety Checks DO : - Enable for user-generated content - Set up error handling - Inform users about content policies - Test with various images DON'T : - Skip safety checks for public apps - Enable for non-image files (unnecessary cost) - Forget to handle rejection scenarios Variable Usage DO : - Store URLs in descriptive variables - Use URLs in subsequent components - Test URL access - Consider URL expiration policies DON'T : - Forget to store URLs - Use generic variable names - Assume URLs are permanent Integration Patterns QuestionMedia + GoogleDrive Standard pattern : QuestionMedia (collect file from user) -> GoogleDrive (upload to Drive folder) -> Success -> File uploaded -> Error -> Upload failed With Notification QuestionMedia -> GoogleDrive -> Email (notify team with file URL) -> Confirmation message to user With Database Storage QuestionMedia -> GoogleDrive -> APIRequest (save {fileUrl} to database) -> GoogleSheets (log submission) Error Handling Error Output Port Route the conversation when upload fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Authentication failures Permission denied Folder not found Safety check failures Network errors Quota exceeded Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't upload your file. Please try again or contact support. For safety check failures : Your image didn't pass our content guidelines. Please upload an appropriate image. Admin Email Notification Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications include: Error type File information User details Timestamp Technical Details File Upload Method : Google Drive API v3 Authentication : OAuth 2.0 Transfer : Direct upload to Drive Processing : Asynchronous Timeout : 60 seconds Supported File Types All types supported by QuestionMedia : - Images (JPEG, PNG, GIF) - Videos (MP4, MOV) - Audio (MP3, WAV, OGG, Opus, WebM) - Documents (PDF) File Size Limits Limits are the same as QuestionMedia: - Images: 10 MB - Videos: 10 MB - Audio: 10 MB - PDFs: 2 MB Permissions Required Google Drive authorization needs: - drive.file : Create and access files created by the app - drive.readonly (for folder browsing): Read file metadata Google Cloud Vision API Safety Check Details Categories checked : | Category | Allowed Levels | Blocks | |----------|---------------|---------| | Adult | VERY_UNLIKELY, UNLIKELY, POSSIBLE | LIKELY, VERY_LIKELY | | Violence | VERY_UNLIKELY, UNLIKELY, POSSIBLE | LIKELY, VERY_LIKELY | | Racy | VERY_UNLIKELY, UNLIKELY | POSSIBLE, LIKELY, VERY_LIKELY | | Medical | VERY_UNLIKELY, UNLIKELY, POSSIBLE | LIKELY, VERY_LIKELY | | Spoof | All allowed | None | API Costs Per image : ~$1.50 per 1,000 images First 1,000 : Free per month Billing : Through Google Cloud account Setup Vision API Visit Google Cloud Console Enable Cloud Vision API Create API key (or use service account) Copy key to component Monitor usage in console Security & Privacy Access Control DO : - Use dedicated folder for bot uploads - Set appropriate folder permissions - Regularly audit uploaded files - Remove unnecessary files periodically DON'T : - Upload to shared/public folders - Give unlimited access - Store sensitive data without encryption - Mix user files with system files File Privacy Folder permissions : Control in Google Drive File visibility : Inherited from folder Sharing : Manage per file or folder URLs : Google Drive URLs are private by default Troubleshooting Issue: \"Authentication failed\" Check : - Google account is still authorized - OAuth token hasn't expired - Permissions weren't revoked Solution : - Re-authorize Google account - Click \"Login with Google\" again - Check account has Drive access Issue: \"Permission denied\" Check : - You have write access to selected folder - Folder still exists - Folder wasn't deleted or moved Solution : - Verify folder permissions - Re-select folder - Create new folder if needed Issue: \"Safety check failed\" Check : - API key is valid - Cloud Vision API is enabled - Billing is set up in Google Cloud - Image actually violates policies Solution : - Verify API key - Enable Cloud Vision API - Check billing status - Review image content Issue: Files not appearing in Drive Check : - Folder ID is correct - Upload actually succeeded - You're looking in the right folder - Refresh Google Drive view Solution : - Check flow execution logs - Verify success path was taken - Re-select folder in component Issue: \"Quota exceeded\" Cause : - Google Drive storage full - API rate limit reached Solution : - Free up Drive storage - Wait for rate limit reset (usually 1 minute) - Upgrade Drive storage if needed Advanced Patterns Organized File Structure Create dynamic folder structure: Main Folder/ |--\u2500 2025-01-15/ \u2502 |--\u2500 user_file_1.pdf \u2502 \\--\u2500 user_file_2.jpg \\--\u2500 2025-01-16/ \\--\u2500 user_file_3.pdf (Requires CustomCode or APIRequest to create date folders) File Processing Pipeline QuestionMedia (collect image) -> GoogleDrive (upload, safety check) -> Success -> GoogleSheets (log file URL) -> Email (notify team) -> Confirmation to user Multi-File Collection QuestionMedia (file 1) -> GoogleDrive (upload) -> QuestionMedia (file 2) -> GoogleDrive (upload) -> QuestionMedia (file 3) -> GoogleDrive (upload) -> All files collected confirmation Common Patterns Document Submission Collect user info -> QuestionMedia (collect document) -> GoogleDrive (upload to \"Submissions\") -> GoogleSheets (log submission with {fileUrl}) -> Email (notify admin) -> \"Thank you, received!\" Photo Album QuestionMedia (collect photo) -> GoogleDrive (upload to \"User Photos\", safety check ON) -> Success -> \"Photo added to album!\" -> Safety fail -> \"Please upload appropriate image\" Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"GoogleDrive"},{"location":"google-drive/#googledrive-component","text":"","title":"GoogleDrive Component"},{"location":"google-drive/#overview","text":"The GoogleDrive component allows you to upload files received from users directly to your Google Drive. Perfect for storing user-submitted photos, documents, and files in an organized, cloud-based location.","title":"Overview"},{"location":"google-drive/#when-to-use-googledrive","text":"Ideal for scenarios like: - Archiving user-submitted documents - Storing product photos from customers - Organizing form attachments - Backing up important files - Creating searchable file repositories - Integrating with Google Workspace workflows","title":"When to Use GoogleDrive"},{"location":"google-drive/#setup-requirements","text":"","title":"Setup Requirements"},{"location":"google-drive/#before-you-start","text":"Google Account : You need a Google account with Google Drive access Google Drive Folder : Create a folder where files will be uploaded Authorization : Grant Intalos access to your Google Drive QuestionMedia Component : Must be placed before GoogleDrive to receive files","title":"Before You Start"},{"location":"google-drive/#configuration","text":"","title":"Configuration"},{"location":"google-drive/#step-1-connect-google-account","text":"Click \"Login with Google\" in the component Authorize Intalos AI Bot Builder Grant permissions to access Google Drive Select your Google account","title":"Step 1: Connect Google Account"},{"location":"google-drive/#step-2-select-upload-folder","text":"Click \"Select Folder\" button Browse your Google Drive folders Select destination folder for uploads Component saves folder selection","title":"Step 2: Select Upload Folder"},{"location":"google-drive/#step-3-configure-file-storage","text":"","title":"Step 3: Configure File Storage"},{"location":"google-drive/#store-file-url","text":"The Google Drive file URL will be saved to a variable: In \"Store file URL in variable\" , enter variable name: Example: uploadedFileUrl Example: documentLink Example: userPhotoUrl Use this URL later to: Send to your team via Email Store in database via APIRequest Display to users Reference in other systems","title":"Store File URL"},{"location":"google-drive/#image-safety-check-optional","text":"Automatically validate uploaded images for inappropriate content using Google Cloud Vision API.","title":"Image Safety Check (Optional)"},{"location":"google-drive/#when-to-enable","text":"Use when : - Accepting user-generated images - Public-facing applications - Community guidelines enforcement - Content moderation required - Child-safe applications Skip when : - Only accepting documents - Trusted user base - Internal applications - Cost is a concern","title":"When to Enable"},{"location":"google-drive/#setup","text":"Toggle \"Enable Image Safety Check\" to ON Get API key from Google Cloud Console: Visit: https://console.cloud.google.com/ Enable Cloud Vision API Create API key Copy the key Paste API key in component Click \"Apply Changes\"","title":"Setup"},{"location":"google-drive/#what-it-checks","text":"The system checks for: - Adult content - Violence - Racy/suggestive content - Medical/graphic images - Spoofed/manipulated content","title":"What It Checks"},{"location":"google-drive/#what-happens","text":"Image passes : - File uploaded to Google Drive - URL stored in variable - Flow continues Image fails : - File NOT uploaded - User notified (customizable message) - Flow routes to error port - Admin notified (if enabled)","title":"What Happens"},{"location":"google-drive/#how-it-works","text":"","title":"How It Works"},{"location":"google-drive/#upload-process","text":"User sends file via WhatsApp (in QuestionMedia component) File received by bot Safety check (if enabled and file is image) Upload to Drive in selected folder URL generated and stored in variable Flow continues to next component","title":"Upload Process"},{"location":"google-drive/#file-organization","text":"In your Google Drive : Selected Folder/ |--\u2500 user_file_1.pdf |--\u2500 user_photo_2.jpg |--\u2500 document_3.pdf \\--\u2500 ... (all uploaded files) File naming : - Original filename preserved - Duplicate names handled automatically - Organized by upload date","title":"File Organization"},{"location":"google-drive/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"google-drive/#1-document-collection","text":"Flow : QuestionMedia (collect PDF) -> GoogleDrive (upload to \"Customer Documents\" folder) -> Store URL in {documentUrl} -> Email (send {documentUrl} to team) -> Confirmation to user","title":"1. Document Collection"},{"location":"google-drive/#2-id-verification","text":"Flow : QuestionMedia (collect ID photo) -> GoogleDrive (with safety check) |-- Success -> Upload to \"ID Verifications\" folder \u2502 -> Store in {idPhotoUrl} \u2502 -> APIRequest (send to verification service) \\-- Safety check failed -> \"Please upload a clear photo of your ID\"","title":"2. ID Verification"},{"location":"google-drive/#3-product-photo-collection","text":"Flow : QuestionMedia (collect product photo) -> GoogleDrive (with safety check, upload to \"Product Photos\") -> Store in {productPhotoUrl} -> GoogleSheets (insert row with {productPhotoUrl}) -> \"Thank you! Photo received.\"","title":"3. Product Photo Collection"},{"location":"google-drive/#4-support-ticket-attachments","text":"Flow : QuestionMedia (collect screenshot) -> GoogleDrive (upload to \"Support Attachments/{ticketId}\") -> Store in {attachmentUrl} -> Email (notify support with {attachmentUrl})","title":"4. Support Ticket Attachments"},{"location":"google-drive/#best-practices","text":"","title":"Best Practices"},{"location":"google-drive/#folder-organization","text":"DO : - Create dedicated folders for different file types - Use descriptive folder names - Organize by date or category - Keep folder structure simple DON'T : - Upload all files to root Drive - Use complex nested structures - Mix different file types in one folder - Create too many sub-folders","title":"Folder Organization"},{"location":"google-drive/#safety-checks","text":"DO : - Enable for user-generated content - Set up error handling - Inform users about content policies - Test with various images DON'T : - Skip safety checks for public apps - Enable for non-image files (unnecessary cost) - Forget to handle rejection scenarios","title":"Safety Checks"},{"location":"google-drive/#variable-usage","text":"DO : - Store URLs in descriptive variables - Use URLs in subsequent components - Test URL access - Consider URL expiration policies DON'T : - Forget to store URLs - Use generic variable names - Assume URLs are permanent","title":"Variable Usage"},{"location":"google-drive/#integration-patterns","text":"","title":"Integration Patterns"},{"location":"google-drive/#questionmedia-googledrive","text":"Standard pattern : QuestionMedia (collect file from user) -> GoogleDrive (upload to Drive folder) -> Success -> File uploaded -> Error -> Upload failed","title":"QuestionMedia + GoogleDrive"},{"location":"google-drive/#with-notification","text":"QuestionMedia -> GoogleDrive -> Email (notify team with file URL) -> Confirmation message to user","title":"With Notification"},{"location":"google-drive/#with-database-storage","text":"QuestionMedia -> GoogleDrive -> APIRequest (save {fileUrl} to database) -> GoogleSheets (log submission)","title":"With Database Storage"},{"location":"google-drive/#error-handling","text":"","title":"Error Handling"},{"location":"google-drive/#error-output-port","text":"Route the conversation when upload fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Authentication failures Permission denied Folder not found Safety check failures Network errors Quota exceeded","title":"Error Output Port"},{"location":"google-drive/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't upload your file. Please try again or contact support. For safety check failures : Your image didn't pass our content guidelines. Please upload an appropriate image.","title":"Error Message to User"},{"location":"google-drive/#admin-email-notification","text":"Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications include: Error type File information User details Timestamp","title":"Admin Email Notification"},{"location":"google-drive/#technical-details","text":"","title":"Technical Details"},{"location":"google-drive/#file-upload","text":"Method : Google Drive API v3 Authentication : OAuth 2.0 Transfer : Direct upload to Drive Processing : Asynchronous Timeout : 60 seconds","title":"File Upload"},{"location":"google-drive/#supported-file-types","text":"All types supported by QuestionMedia : - Images (JPEG, PNG, GIF) - Videos (MP4, MOV) - Audio (MP3, WAV, OGG, Opus, WebM) - Documents (PDF)","title":"Supported File Types"},{"location":"google-drive/#file-size-limits","text":"Limits are the same as QuestionMedia: - Images: 10 MB - Videos: 10 MB - Audio: 10 MB - PDFs: 2 MB","title":"File Size Limits"},{"location":"google-drive/#permissions-required","text":"Google Drive authorization needs: - drive.file : Create and access files created by the app - drive.readonly (for folder browsing): Read file metadata","title":"Permissions Required"},{"location":"google-drive/#google-cloud-vision-api","text":"","title":"Google Cloud Vision API"},{"location":"google-drive/#safety-check-details","text":"Categories checked : | Category | Allowed Levels | Blocks | |----------|---------------|---------| | Adult | VERY_UNLIKELY, UNLIKELY, POSSIBLE | LIKELY, VERY_LIKELY | | Violence | VERY_UNLIKELY, UNLIKELY, POSSIBLE | LIKELY, VERY_LIKELY | | Racy | VERY_UNLIKELY, UNLIKELY | POSSIBLE, LIKELY, VERY_LIKELY | | Medical | VERY_UNLIKELY, UNLIKELY, POSSIBLE | LIKELY, VERY_LIKELY | | Spoof | All allowed | None |","title":"Safety Check Details"},{"location":"google-drive/#api-costs","text":"Per image : ~$1.50 per 1,000 images First 1,000 : Free per month Billing : Through Google Cloud account","title":"API Costs"},{"location":"google-drive/#setup-vision-api","text":"Visit Google Cloud Console Enable Cloud Vision API Create API key (or use service account) Copy key to component Monitor usage in console","title":"Setup Vision API"},{"location":"google-drive/#security-privacy","text":"","title":"Security &amp; Privacy"},{"location":"google-drive/#access-control","text":"DO : - Use dedicated folder for bot uploads - Set appropriate folder permissions - Regularly audit uploaded files - Remove unnecessary files periodically DON'T : - Upload to shared/public folders - Give unlimited access - Store sensitive data without encryption - Mix user files with system files","title":"Access Control"},{"location":"google-drive/#file-privacy","text":"Folder permissions : Control in Google Drive File visibility : Inherited from folder Sharing : Manage per file or folder URLs : Google Drive URLs are private by default","title":"File Privacy"},{"location":"google-drive/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"google-drive/#issue-authentication-failed","text":"Check : - Google account is still authorized - OAuth token hasn't expired - Permissions weren't revoked Solution : - Re-authorize Google account - Click \"Login with Google\" again - Check account has Drive access","title":"Issue: \"Authentication failed\""},{"location":"google-drive/#issue-permission-denied","text":"Check : - You have write access to selected folder - Folder still exists - Folder wasn't deleted or moved Solution : - Verify folder permissions - Re-select folder - Create new folder if needed","title":"Issue: \"Permission denied\""},{"location":"google-drive/#issue-safety-check-failed","text":"Check : - API key is valid - Cloud Vision API is enabled - Billing is set up in Google Cloud - Image actually violates policies Solution : - Verify API key - Enable Cloud Vision API - Check billing status - Review image content","title":"Issue: \"Safety check failed\""},{"location":"google-drive/#issue-files-not-appearing-in-drive","text":"Check : - Folder ID is correct - Upload actually succeeded - You're looking in the right folder - Refresh Google Drive view Solution : - Check flow execution logs - Verify success path was taken - Re-select folder in component","title":"Issue: Files not appearing in Drive"},{"location":"google-drive/#issue-quota-exceeded","text":"Cause : - Google Drive storage full - API rate limit reached Solution : - Free up Drive storage - Wait for rate limit reset (usually 1 minute) - Upgrade Drive storage if needed","title":"Issue: \"Quota exceeded\""},{"location":"google-drive/#advanced-patterns","text":"","title":"Advanced Patterns"},{"location":"google-drive/#organized-file-structure","text":"Create dynamic folder structure: Main Folder/ |--\u2500 2025-01-15/ \u2502 |--\u2500 user_file_1.pdf \u2502 \\--\u2500 user_file_2.jpg \\--\u2500 2025-01-16/ \\--\u2500 user_file_3.pdf (Requires CustomCode or APIRequest to create date folders)","title":"Organized File Structure"},{"location":"google-drive/#file-processing-pipeline","text":"QuestionMedia (collect image) -> GoogleDrive (upload, safety check) -> Success -> GoogleSheets (log file URL) -> Email (notify team) -> Confirmation to user","title":"File Processing Pipeline"},{"location":"google-drive/#multi-file-collection","text":"QuestionMedia (file 1) -> GoogleDrive (upload) -> QuestionMedia (file 2) -> GoogleDrive (upload) -> QuestionMedia (file 3) -> GoogleDrive (upload) -> All files collected confirmation","title":"Multi-File Collection"},{"location":"google-drive/#common-patterns","text":"","title":"Common Patterns"},{"location":"google-drive/#document-submission","text":"Collect user info -> QuestionMedia (collect document) -> GoogleDrive (upload to \"Submissions\") -> GoogleSheets (log submission with {fileUrl}) -> Email (notify admin) -> \"Thank you, received!\"","title":"Document Submission"},{"location":"google-drive/#photo-album","text":"QuestionMedia (collect photo) -> GoogleDrive (upload to \"User Photos\", safety check ON) -> Success -> \"Photo added to album!\" -> Safety fail -> \"Please upload appropriate image\"","title":"Photo Album"},{"location":"google-drive/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"google-sheets/","text":"GoogleSheets Component Overview The GoogleSheets component allows you to read from and write to Google Sheets spreadsheets directly from your bot. Perfect for storing form submissions, updating inventory, reading product catalogs, and managing data in spreadsheets. When to Use GoogleSheets Ideal for scenarios like: - Storing form responses in spreadsheets - Updating inventory or availability - Reading product information - Managing customer data - Recording orders or bookings - Syncing data between bot and sheets - Creating simple databases Setup Requirements Before You Start Google Account : You need a Google account with access to Google Sheets Google Drive Access : Authorize Intalos to access your Google Drive Spreadsheet : Create or have access to a Google Sheets file Column Headers : First row must contain column headers Quick Setup Step 1: Connect Google Account Click \"Login with Google\" in the component Authorize Intalos AI Bot Builder Select your Google account Grant permissions to access Google Sheets Step 2: Select Spreadsheet Click \"Select Spreadsheet\" button Browse your Google Drive Select the spreadsheet you want to use Component loads the sheet names and headers Step 3: Choose Sheet From the \"Sheet\" dropdown, select which sheet (tab) to use Headers from first row are automatically loaded Step 4: Select Action Choose what you want to do: - Insert a row - Add new data - Update a row - Modify existing data - Use data from sheet - Read existing data - Delete a row - Remove data Actions Explained 1. Insert a Row Purpose : Add new data to the bottom of your sheet Configuration : 1. Select \"Insert a row\" 2. Map sheet columns to bot variables: - Column: \"Customer Name\" -> Variable: {userName} - Column: \"Email\" -> Variable: {userEmail} - Column: \"Order Total\" -> Variable: {orderTotal} How it works : - New row appended to sheet - Variables inserted into specified columns - Empty columns left blank - No duplicate checking Example : Spreadsheet columns: Name | Email | Phone | Date Bot variables: {userName} | {userEmail} | {userPhone} | {currentDate} Result: New row with customer data added 2. Update a Row Purpose : Find and update existing data in a row Configuration : 1. Select \"Update a row\" 2. Reference column : Column to search (e.g., \"Email\") 3. Reference value : Variable to match (e.g., {userEmail} ) 4. Update columns : Which columns to update - Column: \"Status\" -> Variable: {newStatus} - Column: \"Last Contact\" -> Variable: {currentDate} How it works : - Searches for row where reference column matches reference value - Updates specified columns in that row - If multiple matches, updates first match - If no match, routes to \"not found\" port Example : Find row where Email = {userEmail} Update Status column to {newStatus} Update Last Contact to {currentDate} 3. Use Data from Sheet Purpose : Read data from an existing row Configuration : 1. Select \"Use data from sheet\" 2. Reference column : Column to search 3. Reference value : Variable to match 4. Data columns : Which columns to read - Column: \"Product Price\" -> Store in: {productPrice} - Column: \"Stock Status\" -> Store in: {stockStatus} How it works : - Searches for row where reference column matches reference value - Reads specified columns from that row - Stores values in bot variables - If no match, routes to \"not found\" port Example : Find row where Product ID = {selectedProduct} Read Price column -> store in {productPrice} Read Stock column -> store in {stockLevel} 4. Delete a Row Purpose : Remove a row from the sheet Configuration : 1. Select \"Delete a row\" 2. Reference column : Column to search 3. Reference value : Variable to match How it works : - Searches for row where reference column matches reference value - Deletes entire row - Shifts remaining rows up - If no match, routes to \"not found\" port Example : Find row where Order ID = {cancelledOrder} Delete the entire row Column-Variable Mapping How Mapping Works For each action, you map spreadsheet columns to bot variables: Insert a row : Sheet Column -> Bot Variable \"Name\" -> {userName} \"Email\" -> {userEmail} \"Phone\" -> {userPhone} Update a row : Find by: \"Email\" = {userEmail} Update: \"Status\" -> {orderStatus} Update: \"Notes\" -> {orderNotes} Use data from sheet : Find by: \"Product ID\" = {productId} Read: \"Price\" -> {productPrice} Read: \"Stock\" -> {stockQuantity} Reference Column For update, read, and delete actions: Reference column : Which column to search in Reference value : What value to look for Think of it as: \"Find the row where [Reference Column] equals [Reference Value]\" Use Cases & Examples 1. Store Form Submissions Action : Insert a row Spreadsheet : Contact Form Responses Columns : Name, Email, Phone, Message, Date Configuration : Name -> {userName} Email -> {userEmail} Phone -> {userPhone} Message -> {userMessage} Date -> {currentDate} Flow : Collect name -> Collect email -> Collect phone -> Collect message -> GoogleSheets (insert row) -> Confirmation message 2. Update Order Status Action : Update a row Spreadsheet : Orders Database Reference : Order ID Configuration : Find by: Order ID = {orderId} Update: Status -> \"Confirmed\" Update: Updated At -> {currentTimestamp} 3. Product Catalog Lookup Action : Use data from sheet Spreadsheet : Product Catalog Reference : Product ID Configuration : Find by: Product ID = {selectedProduct} Read: Price -> {productPrice} Read: Description -> {productDescription} Read: Stock -> {stockLevel} Flow : User selects product -> GoogleSheets (read product data) |-- Found -> Show product details \\-- Not found -> \"Product unavailable\" 4. Cancel Booking Action : Delete a row Spreadsheet : Bookings Reference : Booking ID Configuration : Find by: Booking ID = {bookingId} Delete row Best Practices Spreadsheet Structure DO : - Use clear, descriptive column headers - Keep first row as headers only - Use consistent data formats - Avoid special characters in headers - Keep sheet organized and clean DON'T : - Use merged cells in header row - Leave header row empty - Use duplicate column names - Include formulas in header row Data Management DO : - Validate data before inserting - Use reference columns wisely (unique IDs) - Handle \"not found\" scenarios - Test with sample data first - Back up important spreadsheets DON'T : - Insert duplicate records without checking - Use non-unique reference columns - Skip error handling - Modify production data during testing Variable Mapping DO : - Map all required columns - Use appropriate variable names - Validate data types match - Test mappings thoroughly DON'T : - Leave required columns unmapped - Use undefined variables - Mix up column names - Skip testing Flow Routing Standard Flow All actions have: - Success port -> Action completed successfully - Error port -> Something went wrong Actions with \"Not Found\" Port Update, Read, and Delete actions have additional routing: - Success port -> Row found and processed - Not found port -> Reference value not found in sheet - Error port -> System error Example routing : GoogleSheets (Update row) |-- Success -> \"Order updated successfully\" |-- Not found -> \"Order not found. Please check your order ID\" \\-- Error -> \"System error. Please try again\" Error Handling Error Output Port Route the conversation when errors occur: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Authentication failures Permission denied Sheet not found Invalid column names Network errors Not Found Output Port For actions that search for rows (Update, Read, Delete): Automatically enabled for these actions Connect the \"not found\" arrow to handle missing data Provide helpful user feedback Example : Not found -> \"We couldn't find that order. Please check your order number and try again.\" Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't access the database. Please try again later. Admin Email Notification Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications include error details Technical Details Authentication OAuth 2.0 : Secure Google authentication Token refresh : Automatic token renewal Permissions : Read/write access to Google Sheets Scope : Limited to Sheets API only API Limits Google Sheets API has limits: - Read requests : 300 per minute per project - Write requests : 300 per minute per project - Cells : 10 million cells per spreadsheet Best practices : - Don't update sheets on every message - Batch operations when possible - Monitor usage in Google Cloud Console Data Types Supported : - Text/strings - Numbers - Dates (as text) - Booleans (as text: \"true\"/\"false\") Not supported : - Images - File attachments - Formulas (can read formula results as values) Row Operations Insert : - Appends to bottom of sheet - Skips empty rows - Adds data to next available row Update/Read/Delete : - Searches from top to bottom - Matches first occurrence - Case-sensitive matching - Exact match required Security & Privacy Data Security DO : - Only grant access to necessary sheets - Use separate spreadsheets for sensitive data - Regularly audit access permissions - Revoke access when no longer needed DON'T : - Share spreadsheets with sensitive data publicly - Store passwords or API keys in sheets - Grant unnecessary permissions Access Control View permissions : Control in Google Sheets Edit permissions : Required for insert/update/delete Sharing : Manage in Google Drive Revoke access : Available in Google account settings Troubleshooting Issue: \"Authentication failed\" Check : - Google account is still authorized - Re-authorize if needed - Refresh token hasn't expired - Account has access to the spreadsheet Solution : - Click \"Login with Google\" again - Re-select your account - Re-authorize permissions Issue: \"Permission denied\" Check : - You have edit access to the spreadsheet - Spreadsheet isn't in read-only mode - Sheet isn't protected Solution : - Check sharing settings in Google Sheets - Request edit access from owner - Remove sheet protection if applicable Issue: \"Row not found\" Check : - Reference column name is correct - Reference value matches exactly (case-sensitive) - Row actually exists in sheet - No extra spaces in reference value Solution : - Verify column name in spreadsheet - Check variable value matches sheet data - Use CustomCode to trim/clean reference values Issue: \"Column not found\" Check : - Column name matches header exactly - No typos in column name - Header row is row 1 - Sheet has been selected Solution : - Refresh component configuration - Re-select spreadsheet - Verify column names in sheet - Check for hidden columns Issue: Data not inserting Check : - Variables have values - Column mapping is correct - Sheet isn't full (10M cell limit) - No formula errors in sheet Solution : - Test with static values first - Verify variables exist and have data - Check sheet for errors Advanced Patterns Lookup and Insert Pattern QuestionText (email) -> GoogleSheets (Check if email exists) |-- Found -> \"Welcome back!\" \\-- Not found -> Collect more info -> GoogleSheets (Insert new customer) Update with Validation Collect order ID -> GoogleSheets (Use data from sheet) |-- Found -> Show order details \u2502 -> Confirm cancellation \u2502 -> GoogleSheets (Update status) \\-- Not found -> \"Invalid order ID\" Multi-Sheet Operations GoogleSheets (Insert to Orders sheet) -> GoogleSheets (Update Inventory sheet) -> GoogleSheets (Insert to Notifications sheet) Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"GoogleSheets"},{"location":"google-sheets/#googlesheets-component","text":"","title":"GoogleSheets Component"},{"location":"google-sheets/#overview","text":"The GoogleSheets component allows you to read from and write to Google Sheets spreadsheets directly from your bot. Perfect for storing form submissions, updating inventory, reading product catalogs, and managing data in spreadsheets.","title":"Overview"},{"location":"google-sheets/#when-to-use-googlesheets","text":"Ideal for scenarios like: - Storing form responses in spreadsheets - Updating inventory or availability - Reading product information - Managing customer data - Recording orders or bookings - Syncing data between bot and sheets - Creating simple databases","title":"When to Use GoogleSheets"},{"location":"google-sheets/#setup-requirements","text":"","title":"Setup Requirements"},{"location":"google-sheets/#before-you-start","text":"Google Account : You need a Google account with access to Google Sheets Google Drive Access : Authorize Intalos to access your Google Drive Spreadsheet : Create or have access to a Google Sheets file Column Headers : First row must contain column headers","title":"Before You Start"},{"location":"google-sheets/#quick-setup","text":"","title":"Quick Setup"},{"location":"google-sheets/#step-1-connect-google-account","text":"Click \"Login with Google\" in the component Authorize Intalos AI Bot Builder Select your Google account Grant permissions to access Google Sheets","title":"Step 1: Connect Google Account"},{"location":"google-sheets/#step-2-select-spreadsheet","text":"Click \"Select Spreadsheet\" button Browse your Google Drive Select the spreadsheet you want to use Component loads the sheet names and headers","title":"Step 2: Select Spreadsheet"},{"location":"google-sheets/#step-3-choose-sheet","text":"From the \"Sheet\" dropdown, select which sheet (tab) to use Headers from first row are automatically loaded","title":"Step 3: Choose Sheet"},{"location":"google-sheets/#step-4-select-action","text":"Choose what you want to do: - Insert a row - Add new data - Update a row - Modify existing data - Use data from sheet - Read existing data - Delete a row - Remove data","title":"Step 4: Select Action"},{"location":"google-sheets/#actions-explained","text":"","title":"Actions Explained"},{"location":"google-sheets/#1-insert-a-row","text":"Purpose : Add new data to the bottom of your sheet Configuration : 1. Select \"Insert a row\" 2. Map sheet columns to bot variables: - Column: \"Customer Name\" -> Variable: {userName} - Column: \"Email\" -> Variable: {userEmail} - Column: \"Order Total\" -> Variable: {orderTotal} How it works : - New row appended to sheet - Variables inserted into specified columns - Empty columns left blank - No duplicate checking Example : Spreadsheet columns: Name | Email | Phone | Date Bot variables: {userName} | {userEmail} | {userPhone} | {currentDate} Result: New row with customer data added","title":"1. Insert a Row"},{"location":"google-sheets/#2-update-a-row","text":"Purpose : Find and update existing data in a row Configuration : 1. Select \"Update a row\" 2. Reference column : Column to search (e.g., \"Email\") 3. Reference value : Variable to match (e.g., {userEmail} ) 4. Update columns : Which columns to update - Column: \"Status\" -> Variable: {newStatus} - Column: \"Last Contact\" -> Variable: {currentDate} How it works : - Searches for row where reference column matches reference value - Updates specified columns in that row - If multiple matches, updates first match - If no match, routes to \"not found\" port Example : Find row where Email = {userEmail} Update Status column to {newStatus} Update Last Contact to {currentDate}","title":"2. Update a Row"},{"location":"google-sheets/#3-use-data-from-sheet","text":"Purpose : Read data from an existing row Configuration : 1. Select \"Use data from sheet\" 2. Reference column : Column to search 3. Reference value : Variable to match 4. Data columns : Which columns to read - Column: \"Product Price\" -> Store in: {productPrice} - Column: \"Stock Status\" -> Store in: {stockStatus} How it works : - Searches for row where reference column matches reference value - Reads specified columns from that row - Stores values in bot variables - If no match, routes to \"not found\" port Example : Find row where Product ID = {selectedProduct} Read Price column -> store in {productPrice} Read Stock column -> store in {stockLevel}","title":"3. Use Data from Sheet"},{"location":"google-sheets/#4-delete-a-row","text":"Purpose : Remove a row from the sheet Configuration : 1. Select \"Delete a row\" 2. Reference column : Column to search 3. Reference value : Variable to match How it works : - Searches for row where reference column matches reference value - Deletes entire row - Shifts remaining rows up - If no match, routes to \"not found\" port Example : Find row where Order ID = {cancelledOrder} Delete the entire row","title":"4. Delete a Row"},{"location":"google-sheets/#column-variable-mapping","text":"","title":"Column-Variable Mapping"},{"location":"google-sheets/#how-mapping-works","text":"For each action, you map spreadsheet columns to bot variables: Insert a row : Sheet Column -> Bot Variable \"Name\" -> {userName} \"Email\" -> {userEmail} \"Phone\" -> {userPhone} Update a row : Find by: \"Email\" = {userEmail} Update: \"Status\" -> {orderStatus} Update: \"Notes\" -> {orderNotes} Use data from sheet : Find by: \"Product ID\" = {productId} Read: \"Price\" -> {productPrice} Read: \"Stock\" -> {stockQuantity}","title":"How Mapping Works"},{"location":"google-sheets/#reference-column","text":"For update, read, and delete actions: Reference column : Which column to search in Reference value : What value to look for Think of it as: \"Find the row where [Reference Column] equals [Reference Value]\"","title":"Reference Column"},{"location":"google-sheets/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"google-sheets/#1-store-form-submissions","text":"Action : Insert a row Spreadsheet : Contact Form Responses Columns : Name, Email, Phone, Message, Date Configuration : Name -> {userName} Email -> {userEmail} Phone -> {userPhone} Message -> {userMessage} Date -> {currentDate} Flow : Collect name -> Collect email -> Collect phone -> Collect message -> GoogleSheets (insert row) -> Confirmation message","title":"1. Store Form Submissions"},{"location":"google-sheets/#2-update-order-status","text":"Action : Update a row Spreadsheet : Orders Database Reference : Order ID Configuration : Find by: Order ID = {orderId} Update: Status -> \"Confirmed\" Update: Updated At -> {currentTimestamp}","title":"2. Update Order Status"},{"location":"google-sheets/#3-product-catalog-lookup","text":"Action : Use data from sheet Spreadsheet : Product Catalog Reference : Product ID Configuration : Find by: Product ID = {selectedProduct} Read: Price -> {productPrice} Read: Description -> {productDescription} Read: Stock -> {stockLevel} Flow : User selects product -> GoogleSheets (read product data) |-- Found -> Show product details \\-- Not found -> \"Product unavailable\"","title":"3. Product Catalog Lookup"},{"location":"google-sheets/#4-cancel-booking","text":"Action : Delete a row Spreadsheet : Bookings Reference : Booking ID Configuration : Find by: Booking ID = {bookingId} Delete row","title":"4. Cancel Booking"},{"location":"google-sheets/#best-practices","text":"","title":"Best Practices"},{"location":"google-sheets/#spreadsheet-structure","text":"DO : - Use clear, descriptive column headers - Keep first row as headers only - Use consistent data formats - Avoid special characters in headers - Keep sheet organized and clean DON'T : - Use merged cells in header row - Leave header row empty - Use duplicate column names - Include formulas in header row","title":"Spreadsheet Structure"},{"location":"google-sheets/#data-management","text":"DO : - Validate data before inserting - Use reference columns wisely (unique IDs) - Handle \"not found\" scenarios - Test with sample data first - Back up important spreadsheets DON'T : - Insert duplicate records without checking - Use non-unique reference columns - Skip error handling - Modify production data during testing","title":"Data Management"},{"location":"google-sheets/#variable-mapping","text":"DO : - Map all required columns - Use appropriate variable names - Validate data types match - Test mappings thoroughly DON'T : - Leave required columns unmapped - Use undefined variables - Mix up column names - Skip testing","title":"Variable Mapping"},{"location":"google-sheets/#flow-routing","text":"","title":"Flow Routing"},{"location":"google-sheets/#standard-flow","text":"All actions have: - Success port -> Action completed successfully - Error port -> Something went wrong","title":"Standard Flow"},{"location":"google-sheets/#actions-with-not-found-port","text":"Update, Read, and Delete actions have additional routing: - Success port -> Row found and processed - Not found port -> Reference value not found in sheet - Error port -> System error Example routing : GoogleSheets (Update row) |-- Success -> \"Order updated successfully\" |-- Not found -> \"Order not found. Please check your order ID\" \\-- Error -> \"System error. Please try again\"","title":"Actions with \"Not Found\" Port"},{"location":"google-sheets/#error-handling","text":"","title":"Error Handling"},{"location":"google-sheets/#error-output-port","text":"Route the conversation when errors occur: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: Authentication failures Permission denied Sheet not found Invalid column names Network errors","title":"Error Output Port"},{"location":"google-sheets/#not-found-output-port","text":"For actions that search for rows (Update, Read, Delete): Automatically enabled for these actions Connect the \"not found\" arrow to handle missing data Provide helpful user feedback Example : Not found -> \"We couldn't find that order. Please check your order number and try again.\"","title":"Not Found Output Port"},{"location":"google-sheets/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't access the database. Please try again later.","title":"Error Message to User"},{"location":"google-sheets/#admin-email-notification","text":"Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications include error details","title":"Admin Email Notification"},{"location":"google-sheets/#technical-details","text":"","title":"Technical Details"},{"location":"google-sheets/#authentication","text":"OAuth 2.0 : Secure Google authentication Token refresh : Automatic token renewal Permissions : Read/write access to Google Sheets Scope : Limited to Sheets API only","title":"Authentication"},{"location":"google-sheets/#api-limits","text":"Google Sheets API has limits: - Read requests : 300 per minute per project - Write requests : 300 per minute per project - Cells : 10 million cells per spreadsheet Best practices : - Don't update sheets on every message - Batch operations when possible - Monitor usage in Google Cloud Console","title":"API Limits"},{"location":"google-sheets/#data-types","text":"Supported : - Text/strings - Numbers - Dates (as text) - Booleans (as text: \"true\"/\"false\") Not supported : - Images - File attachments - Formulas (can read formula results as values)","title":"Data Types"},{"location":"google-sheets/#row-operations","text":"Insert : - Appends to bottom of sheet - Skips empty rows - Adds data to next available row Update/Read/Delete : - Searches from top to bottom - Matches first occurrence - Case-sensitive matching - Exact match required","title":"Row Operations"},{"location":"google-sheets/#security-privacy","text":"","title":"Security &amp; Privacy"},{"location":"google-sheets/#data-security","text":"DO : - Only grant access to necessary sheets - Use separate spreadsheets for sensitive data - Regularly audit access permissions - Revoke access when no longer needed DON'T : - Share spreadsheets with sensitive data publicly - Store passwords or API keys in sheets - Grant unnecessary permissions","title":"Data Security"},{"location":"google-sheets/#access-control","text":"View permissions : Control in Google Sheets Edit permissions : Required for insert/update/delete Sharing : Manage in Google Drive Revoke access : Available in Google account settings","title":"Access Control"},{"location":"google-sheets/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"google-sheets/#issue-authentication-failed","text":"Check : - Google account is still authorized - Re-authorize if needed - Refresh token hasn't expired - Account has access to the spreadsheet Solution : - Click \"Login with Google\" again - Re-select your account - Re-authorize permissions","title":"Issue: \"Authentication failed\""},{"location":"google-sheets/#issue-permission-denied","text":"Check : - You have edit access to the spreadsheet - Spreadsheet isn't in read-only mode - Sheet isn't protected Solution : - Check sharing settings in Google Sheets - Request edit access from owner - Remove sheet protection if applicable","title":"Issue: \"Permission denied\""},{"location":"google-sheets/#issue-row-not-found","text":"Check : - Reference column name is correct - Reference value matches exactly (case-sensitive) - Row actually exists in sheet - No extra spaces in reference value Solution : - Verify column name in spreadsheet - Check variable value matches sheet data - Use CustomCode to trim/clean reference values","title":"Issue: \"Row not found\""},{"location":"google-sheets/#issue-column-not-found","text":"Check : - Column name matches header exactly - No typos in column name - Header row is row 1 - Sheet has been selected Solution : - Refresh component configuration - Re-select spreadsheet - Verify column names in sheet - Check for hidden columns","title":"Issue: \"Column not found\""},{"location":"google-sheets/#issue-data-not-inserting","text":"Check : - Variables have values - Column mapping is correct - Sheet isn't full (10M cell limit) - No formula errors in sheet Solution : - Test with static values first - Verify variables exist and have data - Check sheet for errors","title":"Issue: Data not inserting"},{"location":"google-sheets/#advanced-patterns","text":"","title":"Advanced Patterns"},{"location":"google-sheets/#lookup-and-insert-pattern","text":"QuestionText (email) -> GoogleSheets (Check if email exists) |-- Found -> \"Welcome back!\" \\-- Not found -> Collect more info -> GoogleSheets (Insert new customer)","title":"Lookup and Insert Pattern"},{"location":"google-sheets/#update-with-validation","text":"Collect order ID -> GoogleSheets (Use data from sheet) |-- Found -> Show order details \u2502 -> Confirm cancellation \u2502 -> GoogleSheets (Update status) \\-- Not found -> \"Invalid order ID\"","title":"Update with Validation"},{"location":"google-sheets/#multi-sheet-operations","text":"GoogleSheets (Insert to Orders sheet) -> GoogleSheets (Update Inventory sheet) -> GoogleSheets (Insert to Notifications sheet)","title":"Multi-Sheet Operations"},{"location":"google-sheets/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"llm-conversation/","text":"LLM Conversation Overview The LLM Conversation component integrates AI-powered conversations into your bot using Large Language Models (LLMs). Create intelligent, context-aware responses, build conversational AI experiences, and add natural language processing to your flows. When to Use LLM Conversation Ideal for scenarios like: - AI-powered customer support - Natural language Q&A - Content generation - Text analysis and summarization - Conversational interfaces - Intelligent recommendations - Dynamic response generation Component Modes Conversation Mode Purpose : Multi-turn conversations with memory Use when : - Building chatbots with ongoing dialogue - Context from previous messages matters - Users ask follow-up questions - Maintaining conversation history Features : - Conversation history tracking - Context preservation across messages - Memory of previous exchanges - Natural back-and-forth dialogue Example flow : User: \"What's the weather?\" AI: \"I can help with that. Which city?\" User: \"New York\" AI: \"Let me check New York weather for you...\" Processing Mode Purpose : Single prompt-response operations Use when : - One-off text processing - Data analysis tasks - Content generation - Translation - Summarization - No conversation history needed Features : - No history tracking - Faster processing - Lower token usage - Stateless operation Example : Input: User's long text Process: Summarize the text Output: Brief summary Configuration AI Provider & Model Select Provider Currently supported: - Google Gemini - Fast, cost-effective, multilingual Select Model Google Gemini models : - gemini-pro - Best for text - gemini-1.5-flash - Fastest, most cost-effective - gemini-1.5-pro - Most capable API Configuration Get API Key Google Gemini : 1. Visit: https://makersuite.google.com/app/apikey 2. Create new API key 3. Copy the key 4. Paste into component Configure in Provider : Select \"Google Gemini\" Model : Choose your model API Token : Paste your API key Click \"Apply Changes\" System Prompt Define the AI's role and behavior: You are a helpful customer service assistant for Acme Corp. You are friendly, professional, and concise. Always end responses with a question to keep the conversation going. Best practices : - Be specific about role and tone - Set clear boundaries - Define response style - Include do's and don'ts Examples : You are a technical support expert. Provide clear, step-by-step solutions. You are a friendly sales assistant. Be enthusiastic but not pushy. Context (Optional) Additional context for every request: Customer Name: {userName} Account Type: {accountType} Previous Orders: {orderHistory} Use for : - Providing user-specific information - Adding business context - Including relevant data - Personalizing responses Conversation Mode Settings Enable History Track conversation across multiple messages: Toggle \"Enable History\" to ON In \"History storage variable\" , enter variable name: Example: chatHistory Example: conversationMemory How it works : - Stores last 5 message pairs (user + AI) - Maintains context across exchanges - Automatically managed - Saved in specified variable Without History When disabled: - Each message treated independently - No memory of previous exchanges - Lower token usage - Faster responses Processing Mode Settings Use LLM for one-time processing tasks: Mode : Select \"Processing\" Prompt variable : Enter variable containing the text to process Example: textToSummarize Example: contentToAnalyze Use cases : - Summarize user's long response - Translate text - Extract information - Analyze sentiment - Generate content Store AI Response Save the AI's response: In \"Store output in variable\" , enter variable name: Example: aiResponse Example: generatedContent Example: summaryText Use the response later: The AI said: {aiResponse} How It Works Conversation Mode Flow User sends message : \"What are your business hours?\" LLM receives : System prompt Context Conversation history (if enabled) User message AI processes and generates response Response stored in variable History updated with user + AI messages Flow continues to next component Processing Mode Flow Text collected in previous component LLM receives : System prompt Context Text to process AI processes the text Result stored in output variable Flow continues Use Cases & Examples 1. Customer Support Chatbot Mode : Conversation System Prompt : You are a customer support agent for TechStore. Help customers with product questions, order tracking, and returns. Be friendly and professional. If you don't know something, offer to connect them with a human agent. Context : Customer: {userName} Order History: {orderHistory} Account Since: {accountCreated} History : Enabled Output Variable : aiResponse 2. Text Summarization Mode : Processing System Prompt : Summarize the following text in 2-3 sentences. Keep it concise and factual. Prompt Variable : userFeedback Output Variable : feedbackSummary Flow : Collect feedback (QuestionText) -> Store in {userFeedback} -> LLM (summarize) -> Email summary to team 3. Product Recommendations Mode : Conversation System Prompt : You are a product recommendation assistant. Ask questions to understand customer needs, then recommend products from our catalog. Be consultative and helpful. Context : Available Products: {productCatalog} Customer Budget: {budget} 4. FAQ Bot Mode : Conversation System Prompt : You are an FAQ assistant for Acme Services. Answer questions about our services, pricing, and policies. Use the provided knowledge base. If question is outside scope, politely redirect to human support. Context : Knowledge Base: {faqContent} Business Hours: Mon-Fri 9AM-5PM EST Best Practices System Prompt Design DO : - Be specific about role and expertise - Set clear boundaries - Define tone and style - Include response guidelines - Specify what to do when unsure DON'T : - Leave prompt too vague - Make unrealistic claims - Ignore potential edge cases - Forget to set tone Context Management DO : - Include relevant user information - Add business-specific data - Keep context focused and concise - Update context with new information DON'T : - Include irrelevant information - Make context too long (increases costs) - Include sensitive data unnecessarily History Management DO : - Enable history for conversations - Use descriptive variable names - Monitor history growth - Disable for processing tasks DON'T : - Enable history when not needed (costs more) - Share history between different conversations - Store excessively long histories Token Usage & Costs Understanding Tokens Tokens : Words or word pieces used in AI processing You pay for : Input tokens + output tokens History multiplies cost : More history = more tokens Optimizing Costs Reduce costs by : - Using processing mode when history not needed - Limiting history to last 5 exchanges - Keeping system prompts concise - Trimming AI output - Choosing efficient models (gemini-1.5-flash) Model Selection gemini-1.5-flash : - Fastest - Most cost-effective - Good for most use cases gemini-1.5-pro : - Most capable - Better for complex tasks - Higher cost gemini-pro : - Balanced option - Good for conversations Error Handling Error Output Port Route the conversation when AI fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: API key invalid or expired Network connection issues Model not available Token limit exceeded Content policy violations Error Message to User Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, our AI assistant is temporarily unavailable. Please try again or contact support. Admin Email Notification Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details and conversation context Testing Test Your Configuration Click \"Test LLM\" button in the component inspector Enter a test question Click \"Send Test\" Review AI response Verify tone, accuracy, and format Test scenarios : - Typical user questions - Edge cases - Follow-up questions (if history enabled) - Unclear or ambiguous inputs Technical Details Request Format Conversation mode : Messages sent to AI: [ {role: \"user\", parts: [\"Previous user message\"]}, {role: \"model\", parts: [\"Previous AI response\"]}, {role: \"user\", parts: [\"Current user message\"]} ] Processing mode : Single prompt from variable History Storage Format : JSON array [ { \"role\" : \"user\" , \"parts\" : [ \"User message 1\" ]}, { \"role\" : \"model\" , \"parts\" : [ \"AI response 1\" ]}, { \"role\" : \"user\" , \"parts\" : [ \"User message 2\" ]}, { \"role\" : \"model\" , \"parts\" : [ \"AI response 2\" ]} ] Limit : Last 5 message pairs (10 total messages) Response Processing Whitespace trimming : Enabled by default Character limit : WhatsApp 1024 char limit applied Format : Plain text (HTML stripped) Encoding : UTF-8 Security & Privacy API Key Security DO : - Keep API keys confidential - Regenerate if exposed - Use separate keys for test/production - Monitor usage in provider dashboard DON'T : - Share API keys - Commit keys to version control - Screenshot keys - Reuse keys across projects User Privacy DO : - Inform users they're talking to AI - Follow data privacy regulations - Clear sensitive data from history - Secure conversation logs DON'T : - Store sensitive personal information in history - Share user conversations - Train models on private data without consent Common Patterns Conversational Support Bot Start -> LLM Conversation (mode: conversation, history: ON) -> User asks questions -> AI responds with context -> Loop back for more questions -> \"Done\" button -> End Text Analysis Pipeline QuestionText (collect feedback) -> LLM (mode: processing, summarize) -> Store summary -> LLM (mode: processing, sentiment analysis) -> Store sentiment -> Route based on sentiment Hybrid Bot Menu (QuestionButtons) |-- \"Talk to AI\" -> LLM Conversation (history: ON) |-- \"Quick FAQ\" -> Predefined responses \\-- \"Human Agent\" -> Transfer to support Troubleshooting Issue: \"Authentication Error\" Solution : - Verify API key is correct - Check key hasn't expired - Ensure key has proper permissions - Regenerate key if needed Issue: Responses are too generic Solution : - Improve system prompt specificity - Add more context - Use more capable model - Include examples in system prompt Issue: AI hallucinates information Solution : - Add \"stick to facts\" in system prompt - Provide reference information in context - Instruct AI to say \"I don't know\" when uncertain - Review and refine system prompt Issue: High costs Solution : - Disable history if not needed - Use processing mode for one-off tasks - Switch to gemini-1.5-flash model - Shorten system prompts and context - Limit conversation length Issue: Slow responses Solution : - Use faster model (gemini-1.5-flash) - Reduce history length - Minimize context size - Check network connection Advanced Tips Dynamic System Prompts Include variables in your system prompt: You are a {businessType} assistant helping with {serviceCategory} inquiries. Customer tier: {customerTier} Structured Outputs Train AI to return structured data: System Prompt: \"Return responses in format: CATEGORY: xxx, PRIORITY: xxx, ACTION: xxx\" Then parse the response with CustomCode. Fallback Pattern LLM Conversation |-- Success -> Check if AI answered satisfactorily \u2502 |-- Yes -> Continue \u2502 \\-- No -> Transfer to human \\-- Error -> Fallback message Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"LLM Conversation"},{"location":"llm-conversation/#llm-conversation","text":"","title":"LLM Conversation"},{"location":"llm-conversation/#overview","text":"The LLM Conversation component integrates AI-powered conversations into your bot using Large Language Models (LLMs). Create intelligent, context-aware responses, build conversational AI experiences, and add natural language processing to your flows.","title":"Overview"},{"location":"llm-conversation/#when-to-use-llm-conversation","text":"Ideal for scenarios like: - AI-powered customer support - Natural language Q&A - Content generation - Text analysis and summarization - Conversational interfaces - Intelligent recommendations - Dynamic response generation","title":"When to Use LLM Conversation"},{"location":"llm-conversation/#component-modes","text":"","title":"Component Modes"},{"location":"llm-conversation/#conversation-mode","text":"Purpose : Multi-turn conversations with memory Use when : - Building chatbots with ongoing dialogue - Context from previous messages matters - Users ask follow-up questions - Maintaining conversation history Features : - Conversation history tracking - Context preservation across messages - Memory of previous exchanges - Natural back-and-forth dialogue Example flow : User: \"What's the weather?\" AI: \"I can help with that. Which city?\" User: \"New York\" AI: \"Let me check New York weather for you...\"","title":"Conversation Mode"},{"location":"llm-conversation/#processing-mode","text":"Purpose : Single prompt-response operations Use when : - One-off text processing - Data analysis tasks - Content generation - Translation - Summarization - No conversation history needed Features : - No history tracking - Faster processing - Lower token usage - Stateless operation Example : Input: User's long text Process: Summarize the text Output: Brief summary","title":"Processing Mode"},{"location":"llm-conversation/#configuration","text":"","title":"Configuration"},{"location":"llm-conversation/#ai-provider-model","text":"","title":"AI Provider &amp; Model"},{"location":"llm-conversation/#select-provider","text":"Currently supported: - Google Gemini - Fast, cost-effective, multilingual","title":"Select Provider"},{"location":"llm-conversation/#select-model","text":"Google Gemini models : - gemini-pro - Best for text - gemini-1.5-flash - Fastest, most cost-effective - gemini-1.5-pro - Most capable","title":"Select Model"},{"location":"llm-conversation/#api-configuration","text":"","title":"API Configuration"},{"location":"llm-conversation/#get-api-key","text":"Google Gemini : 1. Visit: https://makersuite.google.com/app/apikey 2. Create new API key 3. Copy the key 4. Paste into component","title":"Get API Key"},{"location":"llm-conversation/#configure-in","text":"Provider : Select \"Google Gemini\" Model : Choose your model API Token : Paste your API key Click \"Apply Changes\"","title":"Configure in"},{"location":"llm-conversation/#system-prompt","text":"Define the AI's role and behavior: You are a helpful customer service assistant for Acme Corp. You are friendly, professional, and concise. Always end responses with a question to keep the conversation going. Best practices : - Be specific about role and tone - Set clear boundaries - Define response style - Include do's and don'ts Examples : You are a technical support expert. Provide clear, step-by-step solutions. You are a friendly sales assistant. Be enthusiastic but not pushy.","title":"System Prompt"},{"location":"llm-conversation/#context-optional","text":"Additional context for every request: Customer Name: {userName} Account Type: {accountType} Previous Orders: {orderHistory} Use for : - Providing user-specific information - Adding business context - Including relevant data - Personalizing responses","title":"Context (Optional)"},{"location":"llm-conversation/#conversation-mode-settings","text":"","title":"Conversation Mode Settings"},{"location":"llm-conversation/#enable-history","text":"Track conversation across multiple messages: Toggle \"Enable History\" to ON In \"History storage variable\" , enter variable name: Example: chatHistory Example: conversationMemory How it works : - Stores last 5 message pairs (user + AI) - Maintains context across exchanges - Automatically managed - Saved in specified variable","title":"Enable History"},{"location":"llm-conversation/#without-history","text":"When disabled: - Each message treated independently - No memory of previous exchanges - Lower token usage - Faster responses","title":"Without History"},{"location":"llm-conversation/#processing-mode-settings","text":"Use LLM for one-time processing tasks: Mode : Select \"Processing\" Prompt variable : Enter variable containing the text to process Example: textToSummarize Example: contentToAnalyze Use cases : - Summarize user's long response - Translate text - Extract information - Analyze sentiment - Generate content","title":"Processing Mode Settings"},{"location":"llm-conversation/#store-ai-response","text":"Save the AI's response: In \"Store output in variable\" , enter variable name: Example: aiResponse Example: generatedContent Example: summaryText Use the response later: The AI said: {aiResponse}","title":"Store AI Response"},{"location":"llm-conversation/#how-it-works","text":"","title":"How It Works"},{"location":"llm-conversation/#conversation-mode-flow","text":"User sends message : \"What are your business hours?\" LLM receives : System prompt Context Conversation history (if enabled) User message AI processes and generates response Response stored in variable History updated with user + AI messages Flow continues to next component","title":"Conversation Mode Flow"},{"location":"llm-conversation/#processing-mode-flow","text":"Text collected in previous component LLM receives : System prompt Context Text to process AI processes the text Result stored in output variable Flow continues","title":"Processing Mode Flow"},{"location":"llm-conversation/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"llm-conversation/#1-customer-support-chatbot","text":"Mode : Conversation System Prompt : You are a customer support agent for TechStore. Help customers with product questions, order tracking, and returns. Be friendly and professional. If you don't know something, offer to connect them with a human agent. Context : Customer: {userName} Order History: {orderHistory} Account Since: {accountCreated} History : Enabled Output Variable : aiResponse","title":"1. Customer Support Chatbot"},{"location":"llm-conversation/#2-text-summarization","text":"Mode : Processing System Prompt : Summarize the following text in 2-3 sentences. Keep it concise and factual. Prompt Variable : userFeedback Output Variable : feedbackSummary Flow : Collect feedback (QuestionText) -> Store in {userFeedback} -> LLM (summarize) -> Email summary to team","title":"2. Text Summarization"},{"location":"llm-conversation/#3-product-recommendations","text":"Mode : Conversation System Prompt : You are a product recommendation assistant. Ask questions to understand customer needs, then recommend products from our catalog. Be consultative and helpful. Context : Available Products: {productCatalog} Customer Budget: {budget}","title":"3. Product Recommendations"},{"location":"llm-conversation/#4-faq-bot","text":"Mode : Conversation System Prompt : You are an FAQ assistant for Acme Services. Answer questions about our services, pricing, and policies. Use the provided knowledge base. If question is outside scope, politely redirect to human support. Context : Knowledge Base: {faqContent} Business Hours: Mon-Fri 9AM-5PM EST","title":"4. FAQ Bot"},{"location":"llm-conversation/#best-practices","text":"","title":"Best Practices"},{"location":"llm-conversation/#system-prompt-design","text":"DO : - Be specific about role and expertise - Set clear boundaries - Define tone and style - Include response guidelines - Specify what to do when unsure DON'T : - Leave prompt too vague - Make unrealistic claims - Ignore potential edge cases - Forget to set tone","title":"System Prompt Design"},{"location":"llm-conversation/#context-management","text":"DO : - Include relevant user information - Add business-specific data - Keep context focused and concise - Update context with new information DON'T : - Include irrelevant information - Make context too long (increases costs) - Include sensitive data unnecessarily","title":"Context Management"},{"location":"llm-conversation/#history-management","text":"DO : - Enable history for conversations - Use descriptive variable names - Monitor history growth - Disable for processing tasks DON'T : - Enable history when not needed (costs more) - Share history between different conversations - Store excessively long histories","title":"History Management"},{"location":"llm-conversation/#token-usage-costs","text":"","title":"Token Usage &amp; Costs"},{"location":"llm-conversation/#understanding-tokens","text":"Tokens : Words or word pieces used in AI processing You pay for : Input tokens + output tokens History multiplies cost : More history = more tokens","title":"Understanding Tokens"},{"location":"llm-conversation/#optimizing-costs","text":"Reduce costs by : - Using processing mode when history not needed - Limiting history to last 5 exchanges - Keeping system prompts concise - Trimming AI output - Choosing efficient models (gemini-1.5-flash)","title":"Optimizing Costs"},{"location":"llm-conversation/#model-selection","text":"gemini-1.5-flash : - Fastest - Most cost-effective - Good for most use cases gemini-1.5-pro : - Most capable - Better for complex tasks - Higher cost gemini-pro : - Balanced option - Good for conversations","title":"Model Selection"},{"location":"llm-conversation/#error-handling","text":"","title":"Error Handling"},{"location":"llm-conversation/#error-output-port","text":"Route the conversation when AI fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: API key invalid or expired Network connection issues Model not available Token limit exceeded Content policy violations","title":"Error Output Port"},{"location":"llm-conversation/#error-message-to-user","text":"Send a custom message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, our AI assistant is temporarily unavailable. Please try again or contact support.","title":"Error Message to User"},{"location":"llm-conversation/#admin-email-notification","text":"Get notified when errors occur: Toggle \"Admin email when error\" to ON Notifications sent to your registered admin email Includes error details and conversation context","title":"Admin Email Notification"},{"location":"llm-conversation/#testing","text":"","title":"Testing"},{"location":"llm-conversation/#test-your-configuration","text":"Click \"Test LLM\" button in the component inspector Enter a test question Click \"Send Test\" Review AI response Verify tone, accuracy, and format Test scenarios : - Typical user questions - Edge cases - Follow-up questions (if history enabled) - Unclear or ambiguous inputs","title":"Test Your Configuration"},{"location":"llm-conversation/#technical-details","text":"","title":"Technical Details"},{"location":"llm-conversation/#request-format","text":"Conversation mode : Messages sent to AI: [ {role: \"user\", parts: [\"Previous user message\"]}, {role: \"model\", parts: [\"Previous AI response\"]}, {role: \"user\", parts: [\"Current user message\"]} ] Processing mode : Single prompt from variable","title":"Request Format"},{"location":"llm-conversation/#history-storage","text":"Format : JSON array [ { \"role\" : \"user\" , \"parts\" : [ \"User message 1\" ]}, { \"role\" : \"model\" , \"parts\" : [ \"AI response 1\" ]}, { \"role\" : \"user\" , \"parts\" : [ \"User message 2\" ]}, { \"role\" : \"model\" , \"parts\" : [ \"AI response 2\" ]} ] Limit : Last 5 message pairs (10 total messages)","title":"History Storage"},{"location":"llm-conversation/#response-processing","text":"Whitespace trimming : Enabled by default Character limit : WhatsApp 1024 char limit applied Format : Plain text (HTML stripped) Encoding : UTF-8","title":"Response Processing"},{"location":"llm-conversation/#security-privacy","text":"","title":"Security &amp; Privacy"},{"location":"llm-conversation/#api-key-security","text":"DO : - Keep API keys confidential - Regenerate if exposed - Use separate keys for test/production - Monitor usage in provider dashboard DON'T : - Share API keys - Commit keys to version control - Screenshot keys - Reuse keys across projects","title":"API Key Security"},{"location":"llm-conversation/#user-privacy","text":"DO : - Inform users they're talking to AI - Follow data privacy regulations - Clear sensitive data from history - Secure conversation logs DON'T : - Store sensitive personal information in history - Share user conversations - Train models on private data without consent","title":"User Privacy"},{"location":"llm-conversation/#common-patterns","text":"","title":"Common Patterns"},{"location":"llm-conversation/#conversational-support-bot","text":"Start -> LLM Conversation (mode: conversation, history: ON) -> User asks questions -> AI responds with context -> Loop back for more questions -> \"Done\" button -> End","title":"Conversational Support Bot"},{"location":"llm-conversation/#text-analysis-pipeline","text":"QuestionText (collect feedback) -> LLM (mode: processing, summarize) -> Store summary -> LLM (mode: processing, sentiment analysis) -> Store sentiment -> Route based on sentiment","title":"Text Analysis Pipeline"},{"location":"llm-conversation/#hybrid-bot","text":"Menu (QuestionButtons) |-- \"Talk to AI\" -> LLM Conversation (history: ON) |-- \"Quick FAQ\" -> Predefined responses \\-- \"Human Agent\" -> Transfer to support","title":"Hybrid Bot"},{"location":"llm-conversation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"llm-conversation/#issue-authentication-error","text":"Solution : - Verify API key is correct - Check key hasn't expired - Ensure key has proper permissions - Regenerate key if needed","title":"Issue: \"Authentication Error\""},{"location":"llm-conversation/#issue-responses-are-too-generic","text":"Solution : - Improve system prompt specificity - Add more context - Use more capable model - Include examples in system prompt","title":"Issue: Responses are too generic"},{"location":"llm-conversation/#issue-ai-hallucinates-information","text":"Solution : - Add \"stick to facts\" in system prompt - Provide reference information in context - Instruct AI to say \"I don't know\" when uncertain - Review and refine system prompt","title":"Issue: AI hallucinates information"},{"location":"llm-conversation/#issue-high-costs","text":"Solution : - Disable history if not needed - Use processing mode for one-off tasks - Switch to gemini-1.5-flash model - Shorten system prompts and context - Limit conversation length","title":"Issue: High costs"},{"location":"llm-conversation/#issue-slow-responses","text":"Solution : - Use faster model (gemini-1.5-flash) - Reduce history length - Minimize context size - Check network connection","title":"Issue: Slow responses"},{"location":"llm-conversation/#advanced-tips","text":"","title":"Advanced Tips"},{"location":"llm-conversation/#dynamic-system-prompts","text":"Include variables in your system prompt: You are a {businessType} assistant helping with {serviceCategory} inquiries. Customer tier: {customerTier}","title":"Dynamic System Prompts"},{"location":"llm-conversation/#structured-outputs","text":"Train AI to return structured data: System Prompt: \"Return responses in format: CATEGORY: xxx, PRIORITY: xxx, ACTION: xxx\" Then parse the response with CustomCode.","title":"Structured Outputs"},{"location":"llm-conversation/#fallback-pattern","text":"LLM Conversation |-- Success -> Check if AI answered satisfactorily \u2502 |-- Yes -> Continue \u2502 \\-- No -> Transfer to human \\-- Error -> Fallback message","title":"Fallback Pattern"},{"location":"llm-conversation/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"media/","text":"Media Component Overview The Media component allows you to send images, videos, audio files, and PDF documents to your WhatsApp bot users. Perfect for sharing promotional content, documents, tutorials, and multimedia experiences. When to Use Media Ideal for scenarios like: - Sending product images or catalogs - Sharing PDF documents (invoices, contracts, guides) - Delivering video tutorials or demonstrations - Sending audio messages or voice recordings - Sharing promotional graphics or infographics Input Modes Static Mode Best for : Files that don't change, promotional content, standard documents How it works : 1. Upload your file once during bot setup 2. File is stored securely on our servers 3. Same file is sent to all users Example Use Cases : - Company logo - Product catalog PDF - Welcome video - Terms and conditions document Maximum Upload Size : 5 MB Note : While the upload interface has a 5 MB limit for all file types, you can use Dynamic Mode with URLs to send larger files (up to WhatsApp's limits: 16 MB for videos/audio, 100 MB for PDFs). Dynamic Mode Best for : Personalized content, variable media, externally hosted files How it works : 1. Provide a URL that points to the file 2. URL can contain variables for personalization 3. File is fetched when needed and sent to user Supported URL Types : Public URLs : https://yourwebsite.com/files/document.pdf https://cdn.example.com/images/photo.jpg Variables : {userProfilePicture} {invoiceURL} {productImage} Example with Variables : https://yourapi.com/invoices/{invoiceID}.pdf Pro Tip : Use variables from previous components (like APIRequest) to send personalized media. Supported File Types & Sizes Images Formats : JPEG (.jpg), PNG (.png), GIF (.gif) Maximum Size : 5 MB Best for : Photos, graphics, infographics Videos Formats : MP4 (.mp4), QuickTime (.mov) Maximum Size : 16 MB Best for : Tutorials, demos, promotional videos Note : WhatsApp may compress videos Audio Formats : MP3 (.mp3), WAV (.wav), OGG (.ogg), Opus, WebM Maximum Size : 16 MB Best for : Voice messages, audio guides, music Documents Formats : PDF only (.pdf) Maximum Size : 100 MB Best for : Invoices, contracts, reports, guides Note : Other document types (Word, Excel) are not supported by WhatsApp Error Handling Error Output Port Route the conversation when media sending fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: File not found File too large Invalid file type Network errors Error Message to User Send a friendly message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't send that file. Please try again or contact support. Dynamic Error Messages : Hi {userName}, we're having trouble sending your {mediaType}. Please try again. Admin Email Notification Get notified when media sending fails: Toggle \"Send Error Admin Email\" to ON Receive error details via email for troubleshooting Common Use Cases 1. Send Product Image Scenario : Show product photo from your catalog Configuration : - Media Type: Image - Input Mode: Dynamic - Media Source: {productImageURL} Setup : 1. Use APIRequest to fetch product data 2. Store image URL in variable: productImageURL 3. Media component sends the image 2. Share Invoice PDF Scenario : Send personalized invoice after purchase Configuration : - Media Type: Document (pdf) - Input Mode: Dynamic - Media Source: invoices/{orderID}.pdf Setup : 1. Generate invoice on your server 2. Store in S3 as: invoices/ORDER123.pdf 3. Use order ID variable in Media component 3. Send Welcome Video Scenario : Onboarding video for new users Configuration : - Media Type: Video - Input Mode: Static - Upload: welcome_video.mp4 (under 16 MB) Setup : 1. Upload video once during bot setup 2. Add to your welcome flow 3. Same video sent to all new users 4. Audio Tutorial Scenario : Voice instructions in multiple languages Configuration : - Media Type: Audio - Input Mode: Dynamic - Media Source: tutorials/{userLanguage}/instructions.mp3 Setup : 1. Store audio files organized by language 2. Use language variable to select correct file 3. Personalized audio for each user Best Practices File Optimization DO : - Compress images before uploading (use tools like TinyPNG) - Keep videos under 10 MB for faster delivery - Optimize PDFs (remove unnecessary elements) - Use appropriate resolution (WhatsApp on mobile) - Test files on mobile devices before deployment DON'T : - Upload unnecessarily large files - Use exotic file formats - Assume all users have fast internet Content Strategy DO : - Use relevant, high-quality media - Ensure images have good contrast for mobile screens - Add text alternative in message before media - Keep videos short and engaging (under 1 minute ideal) - Provide context in text before sending media DON'T : - Send media without explanation - Overload users with too many files - Send low-quality or pixelated images URL Management DO : - Use HTTPS URLs for security - Verify URLs are publicly accessible (if using public URLs) - Keep URL structure consistent - Use CDN for better performance - Check URLs regularly for availability DON'T : - Use HTTP (non-secure) URLs - Use URLs that require authentication (for public URLs) - Use temporary URLs that might expire - Hardcode URLs that might change Troubleshooting Issue: \"File too large\" error Solution : File exceeds size limits 1. Check the size limits for your media type: - Images: 5 MB - Videos/Audio: 16 MB - PDFs: 100 MB 2. Compress or optimize the file 3. For videos, reduce resolution or length Issue: \"File type not supported\" Solution : Wrong file format 1. Verify file extension matches allowed formats 2. Convert file to supported format 3. Check MIME type matches file extension Issue: \"File not found\" (Dynamic mode) Solution : URL or S3 key is incorrect 1. Verify the URL is publicly accessible 2. Check S3 key path is correct 3. Ensure variables contain valid values 4. Test URL in browser first Issue: Media not displaying properly Solution : Format or encoding issue 1. Use standard formats (JPEG for images, MP4 for video) 2. Check file isn't corrupted 3. Test file on WhatsApp manually first 4. Re-export/convert file with different settings Issue: \"Access denied\" (S3 files) Solution : Permission problem 1. Verify S3 bucket permissions 2. Check AWS credentials are configured 3. Ensure file exists in specified location 4. Confirm S3 key path is correct Issue: Slow media delivery Solution : File too large or slow hosting 1. Optimize file size 2. Use CDN for better performance 3. Consider compressing images 4. Check your hosting server speed Technical Details File Validation The Media component automatically validates: - File size : Checked against WhatsApp limits - MIME type : Verified to match expected format - File extension : Checked for consistency - Accessibility : URL tested before sending (dynamic mode) Delivery Process Static Mode : 1. File uploaded to secure storage 2. URL generated when needed 3. Sent via WhatsApp Cloud API Dynamic Mode : 1. URL or S3 key provided 2. File accessibility verified 3. Presigned URL generated (if S3) 4. Sent via WhatsApp Cloud API Security Private S3 files : Presigned URLs expire after 1 hour Upload security : Files scanned and validated HTTPS only : All URLs must use secure protocol Important Notes WhatsApp Limitations Be aware : - WhatsApp may compress images and videos - Maximum file sizes are enforced by WhatsApp - Only PDF documents are supported (no Word, Excel) - Audio files might be transcoded - GIFs are supported but may lose animation quality File Persistence Static files : Stored permanently on our servers Dynamic URLs : Must remain accessible when bot runs S3 presigned URLs : Generated fresh each time (1-hour expiry) Cost Considerations Static file storage counts towards your storage quota Large files consume more bandwidth Consider user data costs when sending large files Tips for Success Test First : Always test media sending in a development bot before production Mobile-First : Optimize for mobile viewing (most WhatsApp users) Fast Loading : Keep files reasonably sized for quick delivery Fallback Plan : Use error handling for graceful failures User Context : Send media at the right time in conversation flow Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"Media"},{"location":"media/#media-component","text":"","title":"Media Component"},{"location":"media/#overview","text":"The Media component allows you to send images, videos, audio files, and PDF documents to your WhatsApp bot users. Perfect for sharing promotional content, documents, tutorials, and multimedia experiences.","title":"Overview"},{"location":"media/#when-to-use-media","text":"Ideal for scenarios like: - Sending product images or catalogs - Sharing PDF documents (invoices, contracts, guides) - Delivering video tutorials or demonstrations - Sending audio messages or voice recordings - Sharing promotional graphics or infographics","title":"When to Use Media"},{"location":"media/#input-modes","text":"","title":"Input Modes"},{"location":"media/#static-mode","text":"Best for : Files that don't change, promotional content, standard documents How it works : 1. Upload your file once during bot setup 2. File is stored securely on our servers 3. Same file is sent to all users Example Use Cases : - Company logo - Product catalog PDF - Welcome video - Terms and conditions document Maximum Upload Size : 5 MB Note : While the upload interface has a 5 MB limit for all file types, you can use Dynamic Mode with URLs to send larger files (up to WhatsApp's limits: 16 MB for videos/audio, 100 MB for PDFs).","title":"Static Mode"},{"location":"media/#dynamic-mode","text":"Best for : Personalized content, variable media, externally hosted files How it works : 1. Provide a URL that points to the file 2. URL can contain variables for personalization 3. File is fetched when needed and sent to user Supported URL Types : Public URLs : https://yourwebsite.com/files/document.pdf https://cdn.example.com/images/photo.jpg Variables : {userProfilePicture} {invoiceURL} {productImage} Example with Variables : https://yourapi.com/invoices/{invoiceID}.pdf Pro Tip : Use variables from previous components (like APIRequest) to send personalized media.","title":"Dynamic Mode"},{"location":"media/#supported-file-types-sizes","text":"","title":"Supported File Types &amp; Sizes"},{"location":"media/#images","text":"Formats : JPEG (.jpg), PNG (.png), GIF (.gif) Maximum Size : 5 MB Best for : Photos, graphics, infographics","title":"Images"},{"location":"media/#videos","text":"Formats : MP4 (.mp4), QuickTime (.mov) Maximum Size : 16 MB Best for : Tutorials, demos, promotional videos Note : WhatsApp may compress videos","title":"Videos"},{"location":"media/#audio","text":"Formats : MP3 (.mp3), WAV (.wav), OGG (.ogg), Opus, WebM Maximum Size : 16 MB Best for : Voice messages, audio guides, music","title":"Audio"},{"location":"media/#documents","text":"Formats : PDF only (.pdf) Maximum Size : 100 MB Best for : Invoices, contracts, reports, guides Note : Other document types (Word, Excel) are not supported by WhatsApp","title":"Documents"},{"location":"media/#error-handling","text":"","title":"Error Handling"},{"location":"media/#error-output-port","text":"Route the conversation when media sending fails: Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios like: File not found File too large Invalid file type Network errors","title":"Error Output Port"},{"location":"media/#error-message-to-user","text":"Send a friendly message when errors occur: Toggle \"Error Message to User\" to ON Enter your message: Sorry, we couldn't send that file. Please try again or contact support. Dynamic Error Messages : Hi {userName}, we're having trouble sending your {mediaType}. Please try again.","title":"Error Message to User"},{"location":"media/#admin-email-notification","text":"Get notified when media sending fails: Toggle \"Send Error Admin Email\" to ON Receive error details via email for troubleshooting","title":"Admin Email Notification"},{"location":"media/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"media/#1-send-product-image","text":"Scenario : Show product photo from your catalog Configuration : - Media Type: Image - Input Mode: Dynamic - Media Source: {productImageURL} Setup : 1. Use APIRequest to fetch product data 2. Store image URL in variable: productImageURL 3. Media component sends the image","title":"1. Send Product Image"},{"location":"media/#2-share-invoice-pdf","text":"Scenario : Send personalized invoice after purchase Configuration : - Media Type: Document (pdf) - Input Mode: Dynamic - Media Source: invoices/{orderID}.pdf Setup : 1. Generate invoice on your server 2. Store in S3 as: invoices/ORDER123.pdf 3. Use order ID variable in Media component","title":"2. Share Invoice PDF"},{"location":"media/#3-send-welcome-video","text":"Scenario : Onboarding video for new users Configuration : - Media Type: Video - Input Mode: Static - Upload: welcome_video.mp4 (under 16 MB) Setup : 1. Upload video once during bot setup 2. Add to your welcome flow 3. Same video sent to all new users","title":"3. Send Welcome Video"},{"location":"media/#4-audio-tutorial","text":"Scenario : Voice instructions in multiple languages Configuration : - Media Type: Audio - Input Mode: Dynamic - Media Source: tutorials/{userLanguage}/instructions.mp3 Setup : 1. Store audio files organized by language 2. Use language variable to select correct file 3. Personalized audio for each user","title":"4. Audio Tutorial"},{"location":"media/#best-practices","text":"","title":"Best Practices"},{"location":"media/#file-optimization","text":"DO : - Compress images before uploading (use tools like TinyPNG) - Keep videos under 10 MB for faster delivery - Optimize PDFs (remove unnecessary elements) - Use appropriate resolution (WhatsApp on mobile) - Test files on mobile devices before deployment DON'T : - Upload unnecessarily large files - Use exotic file formats - Assume all users have fast internet","title":"File Optimization"},{"location":"media/#content-strategy","text":"DO : - Use relevant, high-quality media - Ensure images have good contrast for mobile screens - Add text alternative in message before media - Keep videos short and engaging (under 1 minute ideal) - Provide context in text before sending media DON'T : - Send media without explanation - Overload users with too many files - Send low-quality or pixelated images","title":"Content Strategy"},{"location":"media/#url-management","text":"DO : - Use HTTPS URLs for security - Verify URLs are publicly accessible (if using public URLs) - Keep URL structure consistent - Use CDN for better performance - Check URLs regularly for availability DON'T : - Use HTTP (non-secure) URLs - Use URLs that require authentication (for public URLs) - Use temporary URLs that might expire - Hardcode URLs that might change","title":"URL Management"},{"location":"media/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"media/#issue-file-too-large-error","text":"Solution : File exceeds size limits 1. Check the size limits for your media type: - Images: 5 MB - Videos/Audio: 16 MB - PDFs: 100 MB 2. Compress or optimize the file 3. For videos, reduce resolution or length","title":"Issue: \"File too large\" error"},{"location":"media/#issue-file-type-not-supported","text":"Solution : Wrong file format 1. Verify file extension matches allowed formats 2. Convert file to supported format 3. Check MIME type matches file extension","title":"Issue: \"File type not supported\""},{"location":"media/#issue-file-not-found-dynamic-mode","text":"Solution : URL or S3 key is incorrect 1. Verify the URL is publicly accessible 2. Check S3 key path is correct 3. Ensure variables contain valid values 4. Test URL in browser first","title":"Issue: \"File not found\" (Dynamic mode)"},{"location":"media/#issue-media-not-displaying-properly","text":"Solution : Format or encoding issue 1. Use standard formats (JPEG for images, MP4 for video) 2. Check file isn't corrupted 3. Test file on WhatsApp manually first 4. Re-export/convert file with different settings","title":"Issue: Media not displaying properly"},{"location":"media/#issue-access-denied-s3-files","text":"Solution : Permission problem 1. Verify S3 bucket permissions 2. Check AWS credentials are configured 3. Ensure file exists in specified location 4. Confirm S3 key path is correct","title":"Issue: \"Access denied\" (S3 files)"},{"location":"media/#issue-slow-media-delivery","text":"Solution : File too large or slow hosting 1. Optimize file size 2. Use CDN for better performance 3. Consider compressing images 4. Check your hosting server speed","title":"Issue: Slow media delivery"},{"location":"media/#technical-details","text":"","title":"Technical Details"},{"location":"media/#file-validation","text":"The Media component automatically validates: - File size : Checked against WhatsApp limits - MIME type : Verified to match expected format - File extension : Checked for consistency - Accessibility : URL tested before sending (dynamic mode)","title":"File Validation"},{"location":"media/#delivery-process","text":"Static Mode : 1. File uploaded to secure storage 2. URL generated when needed 3. Sent via WhatsApp Cloud API Dynamic Mode : 1. URL or S3 key provided 2. File accessibility verified 3. Presigned URL generated (if S3) 4. Sent via WhatsApp Cloud API","title":"Delivery Process"},{"location":"media/#security","text":"Private S3 files : Presigned URLs expire after 1 hour Upload security : Files scanned and validated HTTPS only : All URLs must use secure protocol","title":"Security"},{"location":"media/#important-notes","text":"","title":"Important Notes"},{"location":"media/#whatsapp-limitations","text":"Be aware : - WhatsApp may compress images and videos - Maximum file sizes are enforced by WhatsApp - Only PDF documents are supported (no Word, Excel) - Audio files might be transcoded - GIFs are supported but may lose animation quality","title":"WhatsApp Limitations"},{"location":"media/#file-persistence","text":"Static files : Stored permanently on our servers Dynamic URLs : Must remain accessible when bot runs S3 presigned URLs : Generated fresh each time (1-hour expiry)","title":"File Persistence"},{"location":"media/#cost-considerations","text":"Static file storage counts towards your storage quota Large files consume more bandwidth Consider user data costs when sending large files","title":"Cost Considerations"},{"location":"media/#tips-for-success","text":"Test First : Always test media sending in a development bot before production Mobile-First : Optimize for mobile viewing (most WhatsApp users) Fast Loading : Keep files reasonably sized for quick delivery Fallback Plan : Use error handling for graceful failures User Context : Send media at the right time in conversation flow","title":"Tips for Success"},{"location":"media/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"question-buttons/","text":"QuestionButtons Component Overview The QuestionButtons component allows users to make quick selections by tapping on interactive buttons. Perfect for yes/no questions, multiple choice options, menu selections, and any scenario where you want to guide users with predefined choices. When to Use QuestionButtons Ideal for scenarios like: - Yes/No questions - Multiple choice selections - Menu options (up to 3 choices) - Quick confirmations - Simple decision points - Service or product selection Configuration Adding Buttons Each QuestionButtons component can have up to 3 buttons : Edit button labels : Double-click on the button text in the component Maximum 20 characters per button label Connect arrows : Each button can lead to a different flow path Use variables : Button labels support dynamic variables Example Labels : \"Yes\" \"No\" \"Maybe Later\" \"Small\" \"Medium\" \"Large\" Button Label Variables Use dynamic text in your button labels: \"Option A\" \"Option B ({price})\" \"Select {productName}\" Note : Labels are automatically truncated to 20 characters if too long. Store User Selection Save which button the user clicked: In \"Store output in variable\" , enter a variable name: Example: userChoice Example: productSize Example: confirmationResponse The variable will store the button label text that was clicked Add Image Enhance your question with a visual header: Click \"Add Image\" Upload an image (max 5 MB) Image appears above your question and buttons Helps provide visual context How It Works User Experience Bot sends : Question text with buttons below User : Taps one of the buttons QuestionButtons : Captures which button was clicked Flow : Routes to the path connected to that button Result : Button label stored in your variable WhatsApp Display Buttons appear as: +---------------------+ | Your Question Text | +---------------------+ | [ Button One ] | | [ Button Two ] | | [ Button Three ] | +---------------------+ Use Cases & Examples 1. Yes/No Question Configuration : - Message: \"Would you like to receive our newsletter?\" - Button 1: \"Yes, sign me up\" - Button 2: \"No, thanks\" - Variable: newsletterChoice Flow routing : \"Yes\" button -> Newsletter signup flow \"No\" button -> Main menu 2. Product Size Selection Configuration : - Message: \"What size would you like?\" - Button 1: \"Small\" - Button 2: \"Medium\" - Button 3: \"Large\" - Variable: productSize 3. Customer Service Menu Configuration : - Message: \"How can we help you today?\" - Button 1: \"Track Order\" - Button 2: \"Make Return\" - Button 3: \"Contact Support\" - Variable: serviceChoice Each button routes to a different service flow. 4. Confirmation Dialog Configuration : - Message: \"Are you sure you want to proceed with this order?\" - Button 1: \"Yes, confirm\" - Button 2: \"Cancel\" - Variable: orderConfirmation Button Routing Connecting Button Outputs Each button creates its own output port: Add buttons to your component (they appear as output arrows) Connect each button to its destination: Drag from button's output port Connect to next component Label the connection with the button index (0, 1, 2) Button Order Buttons appear top to bottom in the order they're defined: - First button (index 0) = Top - Second button (index 1) = Middle - Third button (index 2) = Bottom Dynamic Routing You can route users to different paths based on their selection: QuestionButtons |-- Button 1 -> Path A |-- Button 2 -> Path B \\-- Button 3 -> Path C Best Practices Button Design DO : - Use clear, action-oriented labels - Keep labels concise (under 15 characters ideal) - Make options mutually exclusive - Order buttons logically (e.g., Yes before No) DON'T : - Use vague labels (\"Option 1\", \"Click here\") - Exceed 20 characters (will be truncated) - Use empty labels - Create similar-sounding options Question Clarity DO : - Ask one question at a time - Provide clear context - Use simple language - Match button labels to the question DON'T : - Ask multiple questions in one component - Use complex or technical language - Leave questions ambiguous Number of Buttons DO : - Use 2 buttons for binary choices (Yes/No) - Use 3 buttons for multiple options - Consider QuestionList for more than 3 options DON'T : - Try to add more than 3 buttons (use QuestionList instead) - Use buttons when text input is more appropriate Technical Details Button Limitations Maximum buttons : 3 Maximum label length : 20 characters Minimum buttons : 1 Label truncation : Automatic if over 20 characters Variable Storage When a user clicks a button: - Variable stores : The button label text (as clicked) - Type : String - Variables resolved : If button has {variables}, the resolved value is stored WhatsApp Message Format Buttons are sent as: - Message type : Interactive button message - Header : Optional image - Body : Your question text (max 1024 characters) - Buttons : Up to 3 reply buttons - Footer : Empty (reserved for future use) Common Patterns Binary Decision QuestionButtons (2 buttons) |-- \"Yes\" -> Success flow \\-- \"No\" -> Alternative flow Service Menu QuestionButtons (3 options) |-- \"Option A\" -> Service A flow |-- \"Option B\" -> Service B flow \\-- \"Option C\" -> Service C flow Confirmation Loop Show Details -> QuestionButtons (\"Confirm\" / \"Edit\") |-- \"Confirm\" -> Process \\-- \"Edit\" -> Go back to edit Progressive Options Main Menu (QuestionButtons) -> Sub Menu (QuestionButtons) -> Action Troubleshooting Issue: Buttons not appearing Check : - Button labels are not empty - Message text is configured - Component is properly connected in flow Issue: Button leads to wrong destination Solution : - Verify arrow connections in the visual editor - Check that the correct button port is connected - Test the flow to confirm routing Issue: Button text truncated Solution : - Keep labels under 20 characters - Use abbreviations if needed - Rephrase for brevity Issue: Variable not storing Check : - Variable name is properly configured - User actually clicked a button - Variable name is valid (no spaces or special characters) Comparison with Other Components When to Use Buttons vs List Use QuestionButtons when : - You have 2-3 options - Options are simple choices - You want maximum visibility Use QuestionList when : - You have 4-10 options - Options are longer descriptions - You want to save screen space When to Use Buttons vs Text Use QuestionButtons when : - You want to constrain user choices - Options are predefined - You need structured data Use QuestionText when : - You need open-ended responses - Input varies by user - No predefined options exist Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"QuestionButtons"},{"location":"question-buttons/#questionbuttons-component","text":"","title":"QuestionButtons Component"},{"location":"question-buttons/#overview","text":"The QuestionButtons component allows users to make quick selections by tapping on interactive buttons. Perfect for yes/no questions, multiple choice options, menu selections, and any scenario where you want to guide users with predefined choices.","title":"Overview"},{"location":"question-buttons/#when-to-use-questionbuttons","text":"Ideal for scenarios like: - Yes/No questions - Multiple choice selections - Menu options (up to 3 choices) - Quick confirmations - Simple decision points - Service or product selection","title":"When to Use QuestionButtons"},{"location":"question-buttons/#configuration","text":"","title":"Configuration"},{"location":"question-buttons/#adding-buttons","text":"Each QuestionButtons component can have up to 3 buttons : Edit button labels : Double-click on the button text in the component Maximum 20 characters per button label Connect arrows : Each button can lead to a different flow path Use variables : Button labels support dynamic variables Example Labels : \"Yes\" \"No\" \"Maybe Later\" \"Small\" \"Medium\" \"Large\"","title":"Adding Buttons"},{"location":"question-buttons/#button-label-variables","text":"Use dynamic text in your button labels: \"Option A\" \"Option B ({price})\" \"Select {productName}\" Note : Labels are automatically truncated to 20 characters if too long.","title":"Button Label Variables"},{"location":"question-buttons/#store-user-selection","text":"Save which button the user clicked: In \"Store output in variable\" , enter a variable name: Example: userChoice Example: productSize Example: confirmationResponse The variable will store the button label text that was clicked","title":"Store User Selection"},{"location":"question-buttons/#add-image","text":"Enhance your question with a visual header: Click \"Add Image\" Upload an image (max 5 MB) Image appears above your question and buttons Helps provide visual context","title":"Add Image"},{"location":"question-buttons/#how-it-works","text":"","title":"How It Works"},{"location":"question-buttons/#user-experience","text":"Bot sends : Question text with buttons below User : Taps one of the buttons QuestionButtons : Captures which button was clicked Flow : Routes to the path connected to that button Result : Button label stored in your variable","title":"User Experience"},{"location":"question-buttons/#whatsapp-display","text":"Buttons appear as: +---------------------+ | Your Question Text | +---------------------+ | [ Button One ] | | [ Button Two ] | | [ Button Three ] | +---------------------+","title":"WhatsApp Display"},{"location":"question-buttons/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"question-buttons/#1-yesno-question","text":"Configuration : - Message: \"Would you like to receive our newsletter?\" - Button 1: \"Yes, sign me up\" - Button 2: \"No, thanks\" - Variable: newsletterChoice Flow routing : \"Yes\" button -> Newsletter signup flow \"No\" button -> Main menu","title":"1. Yes/No Question"},{"location":"question-buttons/#2-product-size-selection","text":"Configuration : - Message: \"What size would you like?\" - Button 1: \"Small\" - Button 2: \"Medium\" - Button 3: \"Large\" - Variable: productSize","title":"2. Product Size Selection"},{"location":"question-buttons/#3-customer-service-menu","text":"Configuration : - Message: \"How can we help you today?\" - Button 1: \"Track Order\" - Button 2: \"Make Return\" - Button 3: \"Contact Support\" - Variable: serviceChoice Each button routes to a different service flow.","title":"3. Customer Service Menu"},{"location":"question-buttons/#4-confirmation-dialog","text":"Configuration : - Message: \"Are you sure you want to proceed with this order?\" - Button 1: \"Yes, confirm\" - Button 2: \"Cancel\" - Variable: orderConfirmation","title":"4. Confirmation Dialog"},{"location":"question-buttons/#button-routing","text":"","title":"Button Routing"},{"location":"question-buttons/#connecting-button-outputs","text":"Each button creates its own output port: Add buttons to your component (they appear as output arrows) Connect each button to its destination: Drag from button's output port Connect to next component Label the connection with the button index (0, 1, 2)","title":"Connecting Button Outputs"},{"location":"question-buttons/#button-order","text":"Buttons appear top to bottom in the order they're defined: - First button (index 0) = Top - Second button (index 1) = Middle - Third button (index 2) = Bottom","title":"Button Order"},{"location":"question-buttons/#dynamic-routing","text":"You can route users to different paths based on their selection: QuestionButtons |-- Button 1 -> Path A |-- Button 2 -> Path B \\-- Button 3 -> Path C","title":"Dynamic Routing"},{"location":"question-buttons/#best-practices","text":"","title":"Best Practices"},{"location":"question-buttons/#button-design","text":"DO : - Use clear, action-oriented labels - Keep labels concise (under 15 characters ideal) - Make options mutually exclusive - Order buttons logically (e.g., Yes before No) DON'T : - Use vague labels (\"Option 1\", \"Click here\") - Exceed 20 characters (will be truncated) - Use empty labels - Create similar-sounding options","title":"Button Design"},{"location":"question-buttons/#question-clarity","text":"DO : - Ask one question at a time - Provide clear context - Use simple language - Match button labels to the question DON'T : - Ask multiple questions in one component - Use complex or technical language - Leave questions ambiguous","title":"Question Clarity"},{"location":"question-buttons/#number-of-buttons","text":"DO : - Use 2 buttons for binary choices (Yes/No) - Use 3 buttons for multiple options - Consider QuestionList for more than 3 options DON'T : - Try to add more than 3 buttons (use QuestionList instead) - Use buttons when text input is more appropriate","title":"Number of Buttons"},{"location":"question-buttons/#technical-details","text":"","title":"Technical Details"},{"location":"question-buttons/#button-limitations","text":"Maximum buttons : 3 Maximum label length : 20 characters Minimum buttons : 1 Label truncation : Automatic if over 20 characters","title":"Button Limitations"},{"location":"question-buttons/#variable-storage","text":"When a user clicks a button: - Variable stores : The button label text (as clicked) - Type : String - Variables resolved : If button has {variables}, the resolved value is stored","title":"Variable Storage"},{"location":"question-buttons/#whatsapp-message-format","text":"Buttons are sent as: - Message type : Interactive button message - Header : Optional image - Body : Your question text (max 1024 characters) - Buttons : Up to 3 reply buttons - Footer : Empty (reserved for future use)","title":"WhatsApp Message Format"},{"location":"question-buttons/#common-patterns","text":"","title":"Common Patterns"},{"location":"question-buttons/#binary-decision","text":"QuestionButtons (2 buttons) |-- \"Yes\" -> Success flow \\-- \"No\" -> Alternative flow","title":"Binary Decision"},{"location":"question-buttons/#service-menu","text":"QuestionButtons (3 options) |-- \"Option A\" -> Service A flow |-- \"Option B\" -> Service B flow \\-- \"Option C\" -> Service C flow","title":"Service Menu"},{"location":"question-buttons/#confirmation-loop","text":"Show Details -> QuestionButtons (\"Confirm\" / \"Edit\") |-- \"Confirm\" -> Process \\-- \"Edit\" -> Go back to edit","title":"Confirmation Loop"},{"location":"question-buttons/#progressive-options","text":"Main Menu (QuestionButtons) -> Sub Menu (QuestionButtons) -> Action","title":"Progressive Options"},{"location":"question-buttons/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"question-buttons/#issue-buttons-not-appearing","text":"Check : - Button labels are not empty - Message text is configured - Component is properly connected in flow","title":"Issue: Buttons not appearing"},{"location":"question-buttons/#issue-button-leads-to-wrong-destination","text":"Solution : - Verify arrow connections in the visual editor - Check that the correct button port is connected - Test the flow to confirm routing","title":"Issue: Button leads to wrong destination"},{"location":"question-buttons/#issue-button-text-truncated","text":"Solution : - Keep labels under 20 characters - Use abbreviations if needed - Rephrase for brevity","title":"Issue: Button text truncated"},{"location":"question-buttons/#issue-variable-not-storing","text":"Check : - Variable name is properly configured - User actually clicked a button - Variable name is valid (no spaces or special characters)","title":"Issue: Variable not storing"},{"location":"question-buttons/#comparison-with-other-components","text":"","title":"Comparison with Other Components"},{"location":"question-buttons/#when-to-use-buttons-vs-list","text":"Use QuestionButtons when : - You have 2-3 options - Options are simple choices - You want maximum visibility Use QuestionList when : - You have 4-10 options - Options are longer descriptions - You want to save screen space","title":"When to Use Buttons vs List"},{"location":"question-buttons/#when-to-use-buttons-vs-text","text":"Use QuestionButtons when : - You want to constrain user choices - Options are predefined - You need structured data Use QuestionText when : - You need open-ended responses - Input varies by user - No predefined options exist","title":"When to Use Buttons vs Text"},{"location":"question-buttons/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"question-list/","text":"QuestionList Component Overview The QuestionList component allows users to select from a dropdown list of options. Perfect for when you have 4-10 choices and want a compact, organized selection interface. When to Use QuestionList Ideal for scenarios like: - Product category selection - Country or city selection - Service type selection - Time slot selection - Department routing - Multi-option menus (4-10 choices) Configuration Adding List Options Each QuestionList component can have up to 10 options : Edit option labels : Double-click on the option text in the component Maximum 20 characters per option label Connect arrows : Each option can lead to a different flow path Use variables : Option labels support dynamic variables Example Options : \"Electronics\" \"Clothing\" \"Home & Garden\" \"Sports Equipment\" Option Label Variables Use dynamic text in your option labels: \"Product A ({priceA})\" \"Service: {serviceName}\" \"Option {optionNumber}\" Note : Labels are automatically truncated to 20 characters if too long. Store User Selection Save which option the user selected: In \"Store output in variable\" , enter a variable name: Example: selectedCategory Example: chosenService Example: userSelection The variable will store the option label text that was selected Add Image Enhance your question with a visual header: Click \"Add Image\" Upload an image (max 5 MB) Image appears above your question and list Helps provide visual context How It Works User Experience Bot sends : Question text with a \"Select an option\" button User : Taps the button to open the dropdown list User : Scrolls and selects an option QuestionList : Captures which option was selected Flow : Routes to the path connected to that option Result : Option label stored in your variable WhatsApp Display List appears as: +----------------------+ | Your Question Text | | | | [ Select an option v ]| +----------------------+ When tapped: +----------------------+ | [x] Option 1 | | [ ] Option 2 | | [ ] Option 3 | | [ ] Option 4 | | [ ] Option 5 | +----------------------+ Use Cases & Examples 1. Product Category Selection Configuration : - Message: \"Which category are you interested in?\" - Options: - \"Electronics\" - \"Clothing\" - \"Home & Garden\" - \"Sports\" - \"Books\" - Variable: selectedCategory Flow routing : Each option -> Different product catalog flow 2. Support Department Routing Configuration : - Message: \"Which department would you like to contact?\" - Options: - \"Sales\" - \"Technical Support\" - \"Billing\" - \"Returns\" - \"General Inquiry\" - Variable: department 3. Time Slot Selection Configuration : - Message: \"Select your preferred appointment time:\" - Options: - \"9:00 AM - 10:00 AM\" - \"10:00 AM - 11:00 AM\" - \"11:00 AM - 12:00 PM\" - \"1:00 PM - 2:00 PM\" - \"2:00 PM - 3:00 PM\" - Variable: appointmentTime 4. Country Selection Configuration : - Message: \"Which country are you from?\" - Options: - \"United States\" - \"United Kingdom\" - \"Canada\" - \"Australia\" - \"Other\" - Variable: userCountry List Routing Connecting Option Outputs Each option creates its own output port: Add options to your component (they appear as output arrows) Connect each option to its destination: Drag from option's output port Connect to next component Label the connection with the option index (0, 1, 2, ...) Option Order Options appear in the dropdown in the order they're defined: - First option (index 0) = Top of list - Last option = Bottom of list Default Option Routing You can also add a default path that catches any unhandled selections. Best Practices Option Design DO : - Use clear, descriptive labels - Keep labels concise (under 15 characters ideal) - Make options mutually exclusive - Order options logically (alphabetically or by importance) DON'T : - Use vague labels (\"Option 1\", \"Choice A\") - Exceed 20 characters (will be truncated) - Use empty labels - Create duplicate or similar options Question Clarity DO : - Ask clear, specific questions - Provide context for the selection - Use intro text if needed - Group related options DON'T : - Ask multiple questions in one component - Use technical jargon - Assume users understand options Number of Options DO : - Use 4-10 options for optimal user experience - Consider grouping options into categories - Order by frequency of use or importance DON'T : - Use lists for only 2-3 options (use QuestionButtons instead) - Exceed 10 options (consider breaking into multiple lists) - Create unnecessarily long lists Technical Details List Limitations Maximum options : 10 Minimum options : 1 Maximum label length : 20 characters Button text : \"Select an option\" (fixed) Section title : \"Section1\" (fixed) Variable Storage When a user selects an option: - Variable stores : The option label text (as displayed) - Type : String - Variables resolved : If option has {variables}, the resolved value is stored WhatsApp Message Format Lists are sent as: - Message type : Interactive list message - Header : Optional image - Body : Your question text (max 1024 characters) - Button : \"Select an option\" text - Options : Up to 10 items in one section Common Patterns Category -> Subcategory QuestionList (Main categories) \\--> QuestionList (Subcategories) \\--> Show products Location Selection QuestionList (Country) \\--> QuestionList (City) \\--> QuestionList (Store location) Preference Collection QuestionList (Industry) \\--> QuestionList (Company size) \\--> QuestionList (Budget range) \\--> Personalized recommendations Comparison with Other Components QuestionList vs QuestionButtons Feature QuestionButtons QuestionList Max options 3 10 Display All visible Dropdown Best for 2-3 simple choices 4-10 organized options Screen space More space Compact User action One tap Two taps (open + select) Use QuestionButtons when : - You have 2-3 options - Options are simple - You want maximum visibility Use QuestionList when : - You have 4-10 options - You want to save screen space - Options need more context Troubleshooting Issue: List not appearing Check : - Option labels are not empty - Message text is configured - Component is properly connected in flow - At least one option is defined Issue: Option leads to wrong destination Solution : - Verify arrow connections in the visual editor - Check that the correct option port is connected - Test the flow to confirm routing Issue: Option text truncated Solution : - Keep labels under 20 characters - Use abbreviations if needed - Rephrase for brevity - Consider breaking into sub-menus Issue: Variable not storing Check : - Variable name is properly configured - User actually selected an option - Variable name is valid (no spaces or special characters) Issue: Too many options needed Solution : - Break into multiple cascading lists (Category -> Subcategory) - Group related options - Consider using QuestionText with validation instead Advanced Tips Dynamic Option Labels Use variables to personalize options: \"Plan A ({planAPrice})\" \"Plan B ({planBPrice})\" \"Plan C ({planCPrice})\" Conditional List Content Use different QuestionList components based on previous answers: User type -> Business QuestionList -> Personal QuestionList List Chaining Create drill-down experiences: Region List -> Country List -> City List -> Location confirmation Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"QuestionList"},{"location":"question-list/#questionlist-component","text":"","title":"QuestionList Component"},{"location":"question-list/#overview","text":"The QuestionList component allows users to select from a dropdown list of options. Perfect for when you have 4-10 choices and want a compact, organized selection interface.","title":"Overview"},{"location":"question-list/#when-to-use-questionlist","text":"Ideal for scenarios like: - Product category selection - Country or city selection - Service type selection - Time slot selection - Department routing - Multi-option menus (4-10 choices)","title":"When to Use QuestionList"},{"location":"question-list/#configuration","text":"","title":"Configuration"},{"location":"question-list/#adding-list-options","text":"Each QuestionList component can have up to 10 options : Edit option labels : Double-click on the option text in the component Maximum 20 characters per option label Connect arrows : Each option can lead to a different flow path Use variables : Option labels support dynamic variables Example Options : \"Electronics\" \"Clothing\" \"Home & Garden\" \"Sports Equipment\"","title":"Adding List Options"},{"location":"question-list/#option-label-variables","text":"Use dynamic text in your option labels: \"Product A ({priceA})\" \"Service: {serviceName}\" \"Option {optionNumber}\" Note : Labels are automatically truncated to 20 characters if too long.","title":"Option Label Variables"},{"location":"question-list/#store-user-selection","text":"Save which option the user selected: In \"Store output in variable\" , enter a variable name: Example: selectedCategory Example: chosenService Example: userSelection The variable will store the option label text that was selected","title":"Store User Selection"},{"location":"question-list/#add-image","text":"Enhance your question with a visual header: Click \"Add Image\" Upload an image (max 5 MB) Image appears above your question and list Helps provide visual context","title":"Add Image"},{"location":"question-list/#how-it-works","text":"","title":"How It Works"},{"location":"question-list/#user-experience","text":"Bot sends : Question text with a \"Select an option\" button User : Taps the button to open the dropdown list User : Scrolls and selects an option QuestionList : Captures which option was selected Flow : Routes to the path connected to that option Result : Option label stored in your variable","title":"User Experience"},{"location":"question-list/#whatsapp-display","text":"List appears as: +----------------------+ | Your Question Text | | | | [ Select an option v ]| +----------------------+ When tapped: +----------------------+ | [x] Option 1 | | [ ] Option 2 | | [ ] Option 3 | | [ ] Option 4 | | [ ] Option 5 | +----------------------+","title":"WhatsApp Display"},{"location":"question-list/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"question-list/#1-product-category-selection","text":"Configuration : - Message: \"Which category are you interested in?\" - Options: - \"Electronics\" - \"Clothing\" - \"Home & Garden\" - \"Sports\" - \"Books\" - Variable: selectedCategory Flow routing : Each option -> Different product catalog flow","title":"1. Product Category Selection"},{"location":"question-list/#2-support-department-routing","text":"Configuration : - Message: \"Which department would you like to contact?\" - Options: - \"Sales\" - \"Technical Support\" - \"Billing\" - \"Returns\" - \"General Inquiry\" - Variable: department","title":"2. Support Department Routing"},{"location":"question-list/#3-time-slot-selection","text":"Configuration : - Message: \"Select your preferred appointment time:\" - Options: - \"9:00 AM - 10:00 AM\" - \"10:00 AM - 11:00 AM\" - \"11:00 AM - 12:00 PM\" - \"1:00 PM - 2:00 PM\" - \"2:00 PM - 3:00 PM\" - Variable: appointmentTime","title":"3. Time Slot Selection"},{"location":"question-list/#4-country-selection","text":"Configuration : - Message: \"Which country are you from?\" - Options: - \"United States\" - \"United Kingdom\" - \"Canada\" - \"Australia\" - \"Other\" - Variable: userCountry","title":"4. Country Selection"},{"location":"question-list/#list-routing","text":"","title":"List Routing"},{"location":"question-list/#connecting-option-outputs","text":"Each option creates its own output port: Add options to your component (they appear as output arrows) Connect each option to its destination: Drag from option's output port Connect to next component Label the connection with the option index (0, 1, 2, ...)","title":"Connecting Option Outputs"},{"location":"question-list/#option-order","text":"Options appear in the dropdown in the order they're defined: - First option (index 0) = Top of list - Last option = Bottom of list","title":"Option Order"},{"location":"question-list/#default-option-routing","text":"You can also add a default path that catches any unhandled selections.","title":"Default Option Routing"},{"location":"question-list/#best-practices","text":"","title":"Best Practices"},{"location":"question-list/#option-design","text":"DO : - Use clear, descriptive labels - Keep labels concise (under 15 characters ideal) - Make options mutually exclusive - Order options logically (alphabetically or by importance) DON'T : - Use vague labels (\"Option 1\", \"Choice A\") - Exceed 20 characters (will be truncated) - Use empty labels - Create duplicate or similar options","title":"Option Design"},{"location":"question-list/#question-clarity","text":"DO : - Ask clear, specific questions - Provide context for the selection - Use intro text if needed - Group related options DON'T : - Ask multiple questions in one component - Use technical jargon - Assume users understand options","title":"Question Clarity"},{"location":"question-list/#number-of-options","text":"DO : - Use 4-10 options for optimal user experience - Consider grouping options into categories - Order by frequency of use or importance DON'T : - Use lists for only 2-3 options (use QuestionButtons instead) - Exceed 10 options (consider breaking into multiple lists) - Create unnecessarily long lists","title":"Number of Options"},{"location":"question-list/#technical-details","text":"","title":"Technical Details"},{"location":"question-list/#list-limitations","text":"Maximum options : 10 Minimum options : 1 Maximum label length : 20 characters Button text : \"Select an option\" (fixed) Section title : \"Section1\" (fixed)","title":"List Limitations"},{"location":"question-list/#variable-storage","text":"When a user selects an option: - Variable stores : The option label text (as displayed) - Type : String - Variables resolved : If option has {variables}, the resolved value is stored","title":"Variable Storage"},{"location":"question-list/#whatsapp-message-format","text":"Lists are sent as: - Message type : Interactive list message - Header : Optional image - Body : Your question text (max 1024 characters) - Button : \"Select an option\" text - Options : Up to 10 items in one section","title":"WhatsApp Message Format"},{"location":"question-list/#common-patterns","text":"","title":"Common Patterns"},{"location":"question-list/#category-subcategory","text":"QuestionList (Main categories) \\--> QuestionList (Subcategories) \\--> Show products","title":"Category -&gt; Subcategory"},{"location":"question-list/#location-selection","text":"QuestionList (Country) \\--> QuestionList (City) \\--> QuestionList (Store location)","title":"Location Selection"},{"location":"question-list/#preference-collection","text":"QuestionList (Industry) \\--> QuestionList (Company size) \\--> QuestionList (Budget range) \\--> Personalized recommendations","title":"Preference Collection"},{"location":"question-list/#comparison-with-other-components","text":"","title":"Comparison with Other Components"},{"location":"question-list/#questionlist-vs-questionbuttons","text":"Feature QuestionButtons QuestionList Max options 3 10 Display All visible Dropdown Best for 2-3 simple choices 4-10 organized options Screen space More space Compact User action One tap Two taps (open + select) Use QuestionButtons when : - You have 2-3 options - Options are simple - You want maximum visibility Use QuestionList when : - You have 4-10 options - You want to save screen space - Options need more context","title":"QuestionList vs QuestionButtons"},{"location":"question-list/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"question-list/#issue-list-not-appearing","text":"Check : - Option labels are not empty - Message text is configured - Component is properly connected in flow - At least one option is defined","title":"Issue: List not appearing"},{"location":"question-list/#issue-option-leads-to-wrong-destination","text":"Solution : - Verify arrow connections in the visual editor - Check that the correct option port is connected - Test the flow to confirm routing","title":"Issue: Option leads to wrong destination"},{"location":"question-list/#issue-option-text-truncated","text":"Solution : - Keep labels under 20 characters - Use abbreviations if needed - Rephrase for brevity - Consider breaking into sub-menus","title":"Issue: Option text truncated"},{"location":"question-list/#issue-variable-not-storing","text":"Check : - Variable name is properly configured - User actually selected an option - Variable name is valid (no spaces or special characters)","title":"Issue: Variable not storing"},{"location":"question-list/#issue-too-many-options-needed","text":"Solution : - Break into multiple cascading lists (Category -> Subcategory) - Group related options - Consider using QuestionText with validation instead","title":"Issue: Too many options needed"},{"location":"question-list/#advanced-tips","text":"","title":"Advanced Tips"},{"location":"question-list/#dynamic-option-labels","text":"Use variables to personalize options: \"Plan A ({planAPrice})\" \"Plan B ({planBPrice})\" \"Plan C ({planCPrice})\"","title":"Dynamic Option Labels"},{"location":"question-list/#conditional-list-content","text":"Use different QuestionList components based on previous answers: User type -> Business QuestionList -> Personal QuestionList","title":"Conditional List Content"},{"location":"question-list/#list-chaining","text":"Create drill-down experiences: Region List -> Country List -> City List -> Location confirmation","title":"List Chaining"},{"location":"question-list/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"question-media/","text":"QuestionMedia Component Overview The QuestionMedia component allows you to receive and process media files uploaded by your users via WhatsApp. Perfect for collecting photos, documents, voice messages, and videos from your customers. \ud83d\udcf8 Multiple Files : Users can send multiple files at once, and they'll be stored as an array in your variable. When to Use QuestionMedia Ideal for scenarios like: - Collecting product photos or damage reports - Receiving signed documents or forms - Getting voice messages from customers - ID verification and document submission - Property photos for real estate - Service request images How It Works User Experience Bot asks : \"Please upload your invoice\" User : Taps attachment icon in WhatsApp User : Selects and sends one or multiple files QuestionMedia : Receives and processes all files simultaneously Result : Files are validated, saved, and URL(s) stored in variable Behind the Scenes File is downloaded from WhatsApp Type and size are validated Image safety check (optional, for images) File uploaded to secure cloud storage S3 key (file location) stored in your variable Multiple Files How It Works Users can send multiple files simultaneously from WhatsApp: Variable storage: - 1 file -> String: \"uploads/.../photo.jpg\" - 2+ files -> Array: [\"uploads/.../photo1.jpg\", \"uploads/.../photo2.jpg\"] Maximum Media Items setting: - Limit how many files to collect (1-10) - Default: 1 file - User sends 5, max is 3 -> First 3 stored Important : If any file fails validation (size, type, safety check), ALL files are rejected and the user must retry. Example: User sends: 3 photos (2 valid, 1 too large) Result: \"1 of 3 items failed: Media size limit breached. Please try again.\" Action: User must resend ALL 3 photos File Size Limits Important size restrictions : Media Type Maximum Size Why? Images 10 MB WhatsApp resizes large images Videos 10 MB Faster processing Audio 10 MB Voice notes are typically small PDFs 2 MB Quick processing response Note : These limits ensure fast processing and quick responses to users. WhatsApp requires bot responses within 200ms. What happens if file is too large? Single file upload: - User receives an error message - Flow can branch to \"error\" path - User can retry with smaller file Multiple file upload: - All files are rejected (all-or-nothing validation) - User receives: \"1 of 3 items failed: Media size limit breached. Please try again.\" - User must resend ALL files (including the valid ones) Need larger files? Contact us at contact@intalos.de to discuss your use case. Image Safety Check (Optional) What is it? Uses Google Cloud Vision API to automatically detect inappropriate content in uploaded images. When to use it? User-generated content platforms Public-facing submissions Apps with community guidelines Child-safe applications How to enable? Toggle \"Enable Image Safety Check\" to ON Enter your Google Cloud Vision API Key Get an API key: Google Cloud Console What does it check? The system checks for: - Adult content - Violence - Racy/suggestive content - Medical/graphic images - Spoofed/manipulated content What happens if image fails? Single image: - Image is rejected - User receives a notification - File is NOT saved - Flow branches to error path Multiple images: - ALL images are rejected (all-or-nothing validation) - User sees: \"1 of 3 items failed: Image safety check alert. Please try again.\" - NO files are saved - User must resend all images Example message : \"1 of 3 items failed: Image safety check alert - Image rejected due to adult content. Please try again.\" Advanced Configuration Error Handling Error Output Port Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios: File too large Wrong file type Safety check failed Network errors Custom Error Message Toggle \"Error Message to User\" to ON Enter friendly message: Sorry, we couldn't process that file. Please try sending: - A different file - A smaller file (under 10 MB) - A PDF document Admin Email Notification Toggle \"Send Error Admin Email\" to ON Get notified when errors occur Review and troubleshoot issues Storage Modes QuestionMedia offers two storage options for uploaded files: Temporary Storage Purpose : Short-term file handling when you're sending the file to another system How it works : - Files stored on Intalos AI servers - Publicly accessible via URL (no authentication required) - Automatically deleted after 24 hours - Does NOT count toward your storage quota - Free to use Best for : - Sending files to external APIs or services - Files that will be stored elsewhere (AWS S3, your database, etc.) - One-time processing or verification - When you don't need long-term storage Example use case : User uploads invoice PDF -> Temporary storage (publicly accessible) -> APIRequest sends file to your accounting system -> File deleted after 24 hours Permanent Storage Purpose : Long-term file storage within Intalos AI for use in your bot flows How it works : - Files stored in private Intalos AI storage - Private (authentication required for access) - Stored indefinitely until you delete them - Counts toward your storage quota - Can be accessed by bot components later Best for : - Files you need to keep and reference in flows - Building file libraries or archives - Files used across multiple bot executions - Long-term record keeping Example use case : User uploads profile photo -> Permanent storage (private) -> Used in future bot interactions -> Referenced in customer profile -> Kept indefinitely Choosing the Right Mode Use Temporary when : - Forwarding files to external systems - Files are processed and discarded - External system stores the file permanently - You want to avoid storage costs Use Permanent when : - Files are part of your bot's data - You'll reference the file in future flows - Building a file repository - Compliance or record-keeping requirements Accessing Uploaded Files File URL Format After upload, the variable contains the S3 key: Temporary : uploads/question_media/temporary/bot_66_comp_xyz_a1b2c3d4.pdf Permanent : uploads/question_media/permanent/bot_66_comp_xyz_a1b2c3d4.pdf Using the File 1. Send to Your API Use APIRequest component: { \"customer_id\" : \"{{customerID}}\" , \"document_url\" : \"{{uploadedDocument}}\" , \"document_type\" : \"invoice\" } 2. Email to Team Use Email component: New document uploaded by {customerName} File location: {uploadedDocument} 3. Store in GoogleSheets Log file reference in a spreadsheet for tracking Common Use Cases 1. ID Verification Scenario : Verify customer identity with ID card photo Configuration : - Media Type: Image - Storage Mode: Temporary (deleted after 24 hours) - Image Safety Check: ON (prevent inappropriate images) - Store in: idCardImage Flow : Bot: \"Please upload a photo of your ID card\" -> QuestionMedia receives image -> Safety check validates content -> APIRequest sends to verification service -> Bot: \"Thank you! Your ID is being verified\" 2. Document Submission Scenario : Collect signed contract from customer Configuration : - Media Type: Document (pdf) - Storage Mode: Permanent - Store in: signedContract Flow : Bot: \"Please upload your signed contract\" -> QuestionMedia receives PDF -> File validated (PDF, under 2 MB) -> APIRequest stores in CRM -> Email sent to legal team -> Bot: \"Contract received! We'll review and contact you.\" 3. Property Damage Report (Multiple Photos) Scenario : Insurance claim with damage photos Configuration : - Media Type: Image - Maximum Media Items: 3 - Storage Mode: Permanent - Store in: damagePhotos Flow : Bot: \"Please send up to 3 photos of the damage (you can send them all at once)\" -> QuestionMedia collects all photos -> Variable: [\"photo1.jpg\", \"photo2.jpg\", \"photo3.jpg\"] -> APIRequest creates claim -> Bot: \"Claim submitted! Reference: {claimNumber}\" 4. Voice Feedback Scenario : Customer voice feedback/complaints Configuration : - Media Type: Audio - Storage Mode: Permanent - Store in: voiceFeedback Flow : Bot: \"Please record your feedback (voice note)\" -> QuestionMedia receives audio -> File stored in feedback database -> Email notification to customer service -> Bot: \"Thank you for your feedback!\" Best Practices User Communication DO : - Clearly tell users what type of file to send - Specify file size limits upfront - Provide examples of good submissions - Explain what you'll do with their file - Confirm receipt immediately Example : Bot: \"Please upload a clear photo of your receipt\" Requirements: \u2022 JPEG or PNG format \u2022 Under 10 MB \u2022 All text clearly visible DON'T : - Assume users know what format to use - Leave users wondering if upload succeeded - Use technical error messages - Ask for multiple files without clear instructions File Management DO : - Use temporary storage for sensitive documents - Use permanent storage for records you need to keep - Clean up old temporary files regularly (automatic after 24 hours) - Track file uploads in your database - Implement file retention policies DON'T : - Store everything permanently (costs) - Keep sensitive data longer than needed - Forget to handle file deletion requests - Mix temporary and permanent use cases Security & Privacy DO : - Use image safety check for user-generated content - Inform users about data retention policies - Encrypt sensitive documents - Limit access to uploaded files - Comply with GDPR/data protection laws DON'T : - Store sensitive personal data without consent - Share user files publicly - Keep files indefinitely without reason - Skip safety checks for public platforms Troubleshooting Issue: \"File too large\" error User receives : \"Media size limit breached\" Solutions : 1. Ask user to compress the image/video 2. Guide user to resize photo on their phone 3. For PDFs, ask to remove images or reduce quality 4. Consider upgrading limits (contact support) Prevention : Bot: \"Please upload a photo (max 10 MB). Tip: Use your camera app's 'Share > Resize' option if the file is too large.\" Issue: Multiple files rejected Message : \"1 of 3 items failed: Media size limit breached\" Why : One file failed validation, so all files were rejected Solution : Check that ALL files meet requirements, then resend all files Issue: Wrong file type uploaded User uploads : Word document instead of PDF Solutions : 1. Clear error message explaining required format 2. Provide conversion instructions 3. Link to online PDF converter 4. Allow retry Example response : Bot: \"Please upload a PDF file. If you have a Word document, you can: 1. Open the document 2. Select 'Save As' 3. Choose 'PDF' format Then send it again.\" Issue: Image safety check fails Reason : Image contains flagged content Solutions : 1. Ask user to upload different image 2. Explain why image was rejected (tactfully) 3. Provide guidelines for acceptable images Example response : Bot: \"We couldn't process that image. Please upload a clear photo of the item/document without any other content.\" Issue: User confused about what to upload Prevention : Crystal clear instructions Good examples : **Bad**: \"Send document\" **Good**: \"Please upload a PDF copy of your signed contract\" **Bad**: \"Upload image\" **Good**: \"Please send a clear photo of the product with the serial number visible\" **Bad**: \"Voice note\" **Good**: \"Please record a voice message (up to 1 minute) describing the issue\" Issue: Files not accessible later Reason : S3 key incorrect or file deleted Solutions : 1. Verify S3 key is stored correctly in variable 2. Check storage mode (temporary files are deleted after 24 hours) 3. Ensure your backend has S3 access permissions 4. Use presigned URLs for temporary public access Technical Details File Processing Flow 1. User sends file via WhatsApp -> 2. WhatsApp generates media ID -> 3. Bot retrieves file from WhatsApp servers -> 4. File validated (type, size, MIME) -> 5. Optional: Google Vision safety check (images) -> 6. File uploaded to private S3 bucket -> 7. S3 key stored in variable -> 8. Flow continues File Storage Structure Temporary files : uploads/question_media/temporary/{botId}_{componentId}_{uuid}.{ext} Deleted automatically after 24 hours. Permanent files : uploads/question_media/permanent/{botId}_{componentId}_{uuid}.{ext} Stored indefinitely (counts toward quota). Supported MIME Types Images : - image/jpeg - image/png - image/gif Videos : - video/mp4 - video/quicktime Audio : - audio/mpeg (MP3) - audio/wav - audio/ogg - audio/opus - audio/webm Documents : - application/pdf only Security Features Files stored in private S3 bucket (not publicly accessible) Unique UUIDs prevent file name collisions MIME type validation prevents file type spoofing Size limits prevent abuse Optional content safety checks Automatic cleanup of temporary files Cost Considerations Storage Costs Temporary storage : Free (deleted after 24 hours) Permanent storage : Counts toward your storage quota Quota tracking : Monitor in your dashboard Bandwidth Costs Downloads from WhatsApp: No charge to you Uploads to S3: Included in platform costs Large file uploads: More processing time API Costs Google Vision API : Separate billing by Google First 1,000 images/month: Free After: Pay per image Pricing details Compliance & Privacy GDPR Considerations \u2705 Users have right to request file deletion \u2705 Inform users about data retention \u2705 Implement data retention policies \u2705 Provide data export capabilities Data Retention Recommendations : - ID verification : Temporary storage (auto-delete 24 hours) - Contracts : Permanent storage (legal requirement) - Support tickets : 90-day retention, then delete - General submissions : Based on your privacy policy Tips for Success Clear Instructions : Tell users exactly what to upload Visual Examples : In your bot flow, show example of good upload Immediate Feedback : Confirm receipt and next steps Error Recovery : Allow users to retry easily Privacy First : Use appropriate storage duration Test Thoroughly : Upload different file types and sizes during testing Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"QuestionMedia"},{"location":"question-media/#questionmedia-component","text":"","title":"QuestionMedia Component"},{"location":"question-media/#overview","text":"The QuestionMedia component allows you to receive and process media files uploaded by your users via WhatsApp. Perfect for collecting photos, documents, voice messages, and videos from your customers. \ud83d\udcf8 Multiple Files : Users can send multiple files at once, and they'll be stored as an array in your variable.","title":"Overview"},{"location":"question-media/#when-to-use-questionmedia","text":"Ideal for scenarios like: - Collecting product photos or damage reports - Receiving signed documents or forms - Getting voice messages from customers - ID verification and document submission - Property photos for real estate - Service request images","title":"When to Use QuestionMedia"},{"location":"question-media/#how-it-works","text":"","title":"How It Works"},{"location":"question-media/#user-experience","text":"Bot asks : \"Please upload your invoice\" User : Taps attachment icon in WhatsApp User : Selects and sends one or multiple files QuestionMedia : Receives and processes all files simultaneously Result : Files are validated, saved, and URL(s) stored in variable","title":"User Experience"},{"location":"question-media/#behind-the-scenes","text":"File is downloaded from WhatsApp Type and size are validated Image safety check (optional, for images) File uploaded to secure cloud storage S3 key (file location) stored in your variable","title":"Behind the Scenes"},{"location":"question-media/#multiple-files","text":"","title":"Multiple Files"},{"location":"question-media/#how-it-works_1","text":"Users can send multiple files simultaneously from WhatsApp: Variable storage: - 1 file -> String: \"uploads/.../photo.jpg\" - 2+ files -> Array: [\"uploads/.../photo1.jpg\", \"uploads/.../photo2.jpg\"] Maximum Media Items setting: - Limit how many files to collect (1-10) - Default: 1 file - User sends 5, max is 3 -> First 3 stored Important : If any file fails validation (size, type, safety check), ALL files are rejected and the user must retry. Example: User sends: 3 photos (2 valid, 1 too large) Result: \"1 of 3 items failed: Media size limit breached. Please try again.\" Action: User must resend ALL 3 photos","title":"How It Works"},{"location":"question-media/#file-size-limits","text":"Important size restrictions : Media Type Maximum Size Why? Images 10 MB WhatsApp resizes large images Videos 10 MB Faster processing Audio 10 MB Voice notes are typically small PDFs 2 MB Quick processing response Note : These limits ensure fast processing and quick responses to users. WhatsApp requires bot responses within 200ms.","title":"File Size Limits"},{"location":"question-media/#what-happens-if-file-is-too-large","text":"Single file upload: - User receives an error message - Flow can branch to \"error\" path - User can retry with smaller file Multiple file upload: - All files are rejected (all-or-nothing validation) - User receives: \"1 of 3 items failed: Media size limit breached. Please try again.\" - User must resend ALL files (including the valid ones) Need larger files? Contact us at contact@intalos.de to discuss your use case.","title":"What happens if file is too large?"},{"location":"question-media/#image-safety-check-optional","text":"","title":"Image Safety Check (Optional)"},{"location":"question-media/#what-is-it","text":"Uses Google Cloud Vision API to automatically detect inappropriate content in uploaded images.","title":"What is it?"},{"location":"question-media/#when-to-use-it","text":"User-generated content platforms Public-facing submissions Apps with community guidelines Child-safe applications","title":"When to use it?"},{"location":"question-media/#how-to-enable","text":"Toggle \"Enable Image Safety Check\" to ON Enter your Google Cloud Vision API Key Get an API key: Google Cloud Console","title":"How to enable?"},{"location":"question-media/#what-does-it-check","text":"The system checks for: - Adult content - Violence - Racy/suggestive content - Medical/graphic images - Spoofed/manipulated content","title":"What does it check?"},{"location":"question-media/#what-happens-if-image-fails","text":"Single image: - Image is rejected - User receives a notification - File is NOT saved - Flow branches to error path Multiple images: - ALL images are rejected (all-or-nothing validation) - User sees: \"1 of 3 items failed: Image safety check alert. Please try again.\" - NO files are saved - User must resend all images Example message : \"1 of 3 items failed: Image safety check alert - Image rejected due to adult content. Please try again.\"","title":"What happens if image fails?"},{"location":"question-media/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"question-media/#error-handling","text":"","title":"Error Handling"},{"location":"question-media/#error-output-port","text":"Toggle \"Error Output Port\" to ON Connect the error arrow to your error handling flow Handle scenarios: File too large Wrong file type Safety check failed Network errors","title":"Error Output Port"},{"location":"question-media/#custom-error-message","text":"Toggle \"Error Message to User\" to ON Enter friendly message: Sorry, we couldn't process that file. Please try sending: - A different file - A smaller file (under 10 MB) - A PDF document","title":"Custom Error Message"},{"location":"question-media/#admin-email-notification","text":"Toggle \"Send Error Admin Email\" to ON Get notified when errors occur Review and troubleshoot issues","title":"Admin Email Notification"},{"location":"question-media/#storage-modes","text":"QuestionMedia offers two storage options for uploaded files:","title":"Storage Modes"},{"location":"question-media/#temporary-storage","text":"Purpose : Short-term file handling when you're sending the file to another system How it works : - Files stored on Intalos AI servers - Publicly accessible via URL (no authentication required) - Automatically deleted after 24 hours - Does NOT count toward your storage quota - Free to use Best for : - Sending files to external APIs or services - Files that will be stored elsewhere (AWS S3, your database, etc.) - One-time processing or verification - When you don't need long-term storage Example use case : User uploads invoice PDF -> Temporary storage (publicly accessible) -> APIRequest sends file to your accounting system -> File deleted after 24 hours","title":"Temporary Storage"},{"location":"question-media/#permanent-storage","text":"Purpose : Long-term file storage within Intalos AI for use in your bot flows How it works : - Files stored in private Intalos AI storage - Private (authentication required for access) - Stored indefinitely until you delete them - Counts toward your storage quota - Can be accessed by bot components later Best for : - Files you need to keep and reference in flows - Building file libraries or archives - Files used across multiple bot executions - Long-term record keeping Example use case : User uploads profile photo -> Permanent storage (private) -> Used in future bot interactions -> Referenced in customer profile -> Kept indefinitely","title":"Permanent Storage"},{"location":"question-media/#choosing-the-right-mode","text":"Use Temporary when : - Forwarding files to external systems - Files are processed and discarded - External system stores the file permanently - You want to avoid storage costs Use Permanent when : - Files are part of your bot's data - You'll reference the file in future flows - Building a file repository - Compliance or record-keeping requirements","title":"Choosing the Right Mode"},{"location":"question-media/#accessing-uploaded-files","text":"","title":"Accessing Uploaded Files"},{"location":"question-media/#file-url-format","text":"After upload, the variable contains the S3 key: Temporary : uploads/question_media/temporary/bot_66_comp_xyz_a1b2c3d4.pdf Permanent : uploads/question_media/permanent/bot_66_comp_xyz_a1b2c3d4.pdf","title":"File URL Format"},{"location":"question-media/#using-the-file","text":"","title":"Using the File"},{"location":"question-media/#1-send-to-your-api","text":"Use APIRequest component: { \"customer_id\" : \"{{customerID}}\" , \"document_url\" : \"{{uploadedDocument}}\" , \"document_type\" : \"invoice\" }","title":"1. Send to Your API"},{"location":"question-media/#2-email-to-team","text":"Use Email component: New document uploaded by {customerName} File location: {uploadedDocument}","title":"2. Email to Team"},{"location":"question-media/#3-store-in-googlesheets","text":"Log file reference in a spreadsheet for tracking","title":"3. Store in GoogleSheets"},{"location":"question-media/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"question-media/#1-id-verification","text":"Scenario : Verify customer identity with ID card photo Configuration : - Media Type: Image - Storage Mode: Temporary (deleted after 24 hours) - Image Safety Check: ON (prevent inappropriate images) - Store in: idCardImage Flow : Bot: \"Please upload a photo of your ID card\" -> QuestionMedia receives image -> Safety check validates content -> APIRequest sends to verification service -> Bot: \"Thank you! Your ID is being verified\"","title":"1. ID Verification"},{"location":"question-media/#2-document-submission","text":"Scenario : Collect signed contract from customer Configuration : - Media Type: Document (pdf) - Storage Mode: Permanent - Store in: signedContract Flow : Bot: \"Please upload your signed contract\" -> QuestionMedia receives PDF -> File validated (PDF, under 2 MB) -> APIRequest stores in CRM -> Email sent to legal team -> Bot: \"Contract received! We'll review and contact you.\"","title":"2. Document Submission"},{"location":"question-media/#3-property-damage-report-multiple-photos","text":"Scenario : Insurance claim with damage photos Configuration : - Media Type: Image - Maximum Media Items: 3 - Storage Mode: Permanent - Store in: damagePhotos Flow : Bot: \"Please send up to 3 photos of the damage (you can send them all at once)\" -> QuestionMedia collects all photos -> Variable: [\"photo1.jpg\", \"photo2.jpg\", \"photo3.jpg\"] -> APIRequest creates claim -> Bot: \"Claim submitted! Reference: {claimNumber}\"","title":"3. Property Damage Report (Multiple Photos)"},{"location":"question-media/#4-voice-feedback","text":"Scenario : Customer voice feedback/complaints Configuration : - Media Type: Audio - Storage Mode: Permanent - Store in: voiceFeedback Flow : Bot: \"Please record your feedback (voice note)\" -> QuestionMedia receives audio -> File stored in feedback database -> Email notification to customer service -> Bot: \"Thank you for your feedback!\"","title":"4. Voice Feedback"},{"location":"question-media/#best-practices","text":"","title":"Best Practices"},{"location":"question-media/#user-communication","text":"DO : - Clearly tell users what type of file to send - Specify file size limits upfront - Provide examples of good submissions - Explain what you'll do with their file - Confirm receipt immediately Example : Bot: \"Please upload a clear photo of your receipt\" Requirements: \u2022 JPEG or PNG format \u2022 Under 10 MB \u2022 All text clearly visible DON'T : - Assume users know what format to use - Leave users wondering if upload succeeded - Use technical error messages - Ask for multiple files without clear instructions","title":"User Communication"},{"location":"question-media/#file-management","text":"DO : - Use temporary storage for sensitive documents - Use permanent storage for records you need to keep - Clean up old temporary files regularly (automatic after 24 hours) - Track file uploads in your database - Implement file retention policies DON'T : - Store everything permanently (costs) - Keep sensitive data longer than needed - Forget to handle file deletion requests - Mix temporary and permanent use cases","title":"File Management"},{"location":"question-media/#security-privacy","text":"DO : - Use image safety check for user-generated content - Inform users about data retention policies - Encrypt sensitive documents - Limit access to uploaded files - Comply with GDPR/data protection laws DON'T : - Store sensitive personal data without consent - Share user files publicly - Keep files indefinitely without reason - Skip safety checks for public platforms","title":"Security &amp; Privacy"},{"location":"question-media/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"question-media/#issue-file-too-large-error","text":"User receives : \"Media size limit breached\" Solutions : 1. Ask user to compress the image/video 2. Guide user to resize photo on their phone 3. For PDFs, ask to remove images or reduce quality 4. Consider upgrading limits (contact support) Prevention : Bot: \"Please upload a photo (max 10 MB). Tip: Use your camera app's 'Share > Resize' option if the file is too large.\"","title":"Issue: \"File too large\" error"},{"location":"question-media/#issue-multiple-files-rejected","text":"Message : \"1 of 3 items failed: Media size limit breached\" Why : One file failed validation, so all files were rejected Solution : Check that ALL files meet requirements, then resend all files","title":"Issue: Multiple files rejected"},{"location":"question-media/#issue-wrong-file-type-uploaded","text":"User uploads : Word document instead of PDF Solutions : 1. Clear error message explaining required format 2. Provide conversion instructions 3. Link to online PDF converter 4. Allow retry Example response : Bot: \"Please upload a PDF file. If you have a Word document, you can: 1. Open the document 2. Select 'Save As' 3. Choose 'PDF' format Then send it again.\"","title":"Issue: Wrong file type uploaded"},{"location":"question-media/#issue-image-safety-check-fails","text":"Reason : Image contains flagged content Solutions : 1. Ask user to upload different image 2. Explain why image was rejected (tactfully) 3. Provide guidelines for acceptable images Example response : Bot: \"We couldn't process that image. Please upload a clear photo of the item/document without any other content.\"","title":"Issue: Image safety check fails"},{"location":"question-media/#issue-user-confused-about-what-to-upload","text":"Prevention : Crystal clear instructions Good examples : **Bad**: \"Send document\" **Good**: \"Please upload a PDF copy of your signed contract\" **Bad**: \"Upload image\" **Good**: \"Please send a clear photo of the product with the serial number visible\" **Bad**: \"Voice note\" **Good**: \"Please record a voice message (up to 1 minute) describing the issue\"","title":"Issue: User confused about what to upload"},{"location":"question-media/#issue-files-not-accessible-later","text":"Reason : S3 key incorrect or file deleted Solutions : 1. Verify S3 key is stored correctly in variable 2. Check storage mode (temporary files are deleted after 24 hours) 3. Ensure your backend has S3 access permissions 4. Use presigned URLs for temporary public access","title":"Issue: Files not accessible later"},{"location":"question-media/#technical-details","text":"","title":"Technical Details"},{"location":"question-media/#file-processing-flow","text":"1. User sends file via WhatsApp -> 2. WhatsApp generates media ID -> 3. Bot retrieves file from WhatsApp servers -> 4. File validated (type, size, MIME) -> 5. Optional: Google Vision safety check (images) -> 6. File uploaded to private S3 bucket -> 7. S3 key stored in variable -> 8. Flow continues","title":"File Processing Flow"},{"location":"question-media/#file-storage-structure","text":"Temporary files : uploads/question_media/temporary/{botId}_{componentId}_{uuid}.{ext} Deleted automatically after 24 hours. Permanent files : uploads/question_media/permanent/{botId}_{componentId}_{uuid}.{ext} Stored indefinitely (counts toward quota).","title":"File Storage Structure"},{"location":"question-media/#supported-mime-types","text":"Images : - image/jpeg - image/png - image/gif Videos : - video/mp4 - video/quicktime Audio : - audio/mpeg (MP3) - audio/wav - audio/ogg - audio/opus - audio/webm Documents : - application/pdf only","title":"Supported MIME Types"},{"location":"question-media/#security-features","text":"Files stored in private S3 bucket (not publicly accessible) Unique UUIDs prevent file name collisions MIME type validation prevents file type spoofing Size limits prevent abuse Optional content safety checks Automatic cleanup of temporary files","title":"Security Features"},{"location":"question-media/#cost-considerations","text":"","title":"Cost Considerations"},{"location":"question-media/#storage-costs","text":"Temporary storage : Free (deleted after 24 hours) Permanent storage : Counts toward your storage quota Quota tracking : Monitor in your dashboard","title":"Storage Costs"},{"location":"question-media/#bandwidth-costs","text":"Downloads from WhatsApp: No charge to you Uploads to S3: Included in platform costs Large file uploads: More processing time","title":"Bandwidth Costs"},{"location":"question-media/#api-costs","text":"Google Vision API : Separate billing by Google First 1,000 images/month: Free After: Pay per image Pricing details","title":"API Costs"},{"location":"question-media/#compliance-privacy","text":"","title":"Compliance &amp; Privacy"},{"location":"question-media/#gdpr-considerations","text":"\u2705 Users have right to request file deletion \u2705 Inform users about data retention \u2705 Implement data retention policies \u2705 Provide data export capabilities","title":"GDPR Considerations"},{"location":"question-media/#data-retention","text":"Recommendations : - ID verification : Temporary storage (auto-delete 24 hours) - Contracts : Permanent storage (legal requirement) - Support tickets : 90-day retention, then delete - General submissions : Based on your privacy policy","title":"Data Retention"},{"location":"question-media/#tips-for-success","text":"Clear Instructions : Tell users exactly what to upload Visual Examples : In your bot flow, show example of good upload Immediate Feedback : Confirm receipt and next steps Error Recovery : Allow users to retry easily Privacy First : Use appropriate storage duration Test Thoroughly : Upload different file types and sizes during testing","title":"Tips for Success"},{"location":"question-media/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"},{"location":"question-text/","text":"QuestionText Component Overview The QuestionText component allows you to ask users open-ended questions and collect their text responses. Perfect for gathering names, addresses, descriptions, feedback, and any other free-form text input. When to Use QuestionText Ideal for scenarios like: - Collecting user names or contact information - Asking for addresses or locations - Gathering feedback or comments - Getting detailed descriptions - Open-ended survey questions - Custom text input requirements Configuration Store User Response The text entered by the user can be saved to a variable for later use: In \"Store output in variable\" , enter a variable name: Example: userName Example: userAddress Example: feedbackText Use this variable later in your flow: Thank you {userName} for your feedback! Auto Transition Mode Toggle \"Auto transition\" to ON when you want to: - Display a message without waiting for user input - Automatically move to the next step - Show information or instructions When enabled: - No user input is collected - Flow immediately transitions to next component - Variable storage is disabled - Use for informational messages Navigation Buttons Add quick navigation options for better user experience: Go Back Button Toggle \"Go Back\" to ON Customize label (max 20 characters): Default: \"Go Back\" Custom: \"Previous Step\" Allows users to return to previous step Go On Button Toggle \"Go On\" to ON Customize label (max 20 characters): Default: \"Go On\" Custom: \"Continue\" Custom: \"Next\" Allows users to proceed without typing Note : Navigation buttons are only available when auto-transition is OFF. Add Image Enhance your question with a visual element: Click \"Add Image\" Upload an image (max 5 MB) Image appears above your question text Helps provide context or visual instructions Good for : - Showing examples - Visual instructions - Product images - Reference materials How It Works User Experience Bot asks : \"What is your name?\" User : Types their response QuestionText : Captures and stores the response Result : Text stored in your variable for later use Message Length Limits WhatsApp limit : 1024 characters for outgoing messages User input : No limit on incoming text length Messages exceeding 1024 characters will be automatically truncated with \"...\" Use Cases & Examples 1. Name Collection Configuration : - Message: \"What is your full name?\" - Variable: userName - Go On: OFF User flow : Bot: What is your full name? User: John Smith -> Stored in {userName} 2. Address Collection Configuration : - Message: \"Please enter your delivery address\" - Variable: deliveryAddress - Go On: OFF 3. Feedback Collection Configuration : - Message: \"How was your experience with our service?\" - Variable: userFeedback - Go On: ON (\"Skip\") Allows users to skip if they don't want to provide feedback. 4. Information Display (Auto-Transition) Configuration : - Message: \"Thank you! Processing your request...\" - Auto transition: ON - Variable: (disabled) Simply displays the message and moves on automatically. Best Practices Message Clarity DO : - Ask clear, specific questions - Use simple language - Provide examples when helpful - Explain what format you need DON'T : - Ask vague or ambiguous questions - Use technical jargon - Assume users know what to enter Examples Good : \"Please enter your email address (example: john@example.com)\" \"What is your phone number? (10 digits, no spaces)\" \"Describe the issue in a few sentences\" Bad : \"Enter details\" \"Provide information\" \"Input data\" Variable Naming DO : - Use descriptive variable names ( userName , customerEmail ) - Use camelCase for consistency - Keep names concise but meaningful DON'T : - Use generic names ( var1 , temp , x ) - Include spaces or special characters - Use reserved keywords Navigation Buttons DO : - Use \"Go Back\" for returning to previous steps - Use \"Go On\" or \"Skip\" for optional questions - Keep button labels under 20 characters - Use clear, action-oriented labels DON'T : - Use long descriptive labels (they'll be truncated) - Leave labels empty - Use confusing button text Technical Details Input Validation The QuestionText component: - Accepts any text input from users - No automatic validation (use Formula or CustomCode for validation) - Stores raw user input in the variable - Trims whitespace from responses WhatsApp Limitations Outgoing message limit : 1024 characters User input : No character limit Button labels : Maximum 20 characters Variable names : Must be valid identifiers Variable Storage User responses are stored as: - Type : String - Encoding : UTF-8 - Whitespace : Leading/trailing whitespace removed - Empty responses : Stored as empty string Common Patterns Sequential Questions Use multiple QuestionText components in sequence: QuestionText (name) -> QuestionText (email) -> QuestionText (phone) Optional Questions with Skip Enable \"Go On\" button for optional questions: Message: \"Any additional comments? (Optional)\" Go On: \"Skip\" Confirmation Flow Collect input, then confirm: QuestionText (collect) -> Text (confirm: \"You entered: {userInput}\") Validation Pattern Collect input, validate, retry if invalid: QuestionText -> Formula (validate) -> (valid) Success -> (invalid) Error message -> back to QuestionText Troubleshooting Issue: Users send wrong format Solution : Provide clear examples and format instructions in your question Issue: Variable not storing Check : - Variable name is properly configured - Auto-transition is OFF - Component is properly connected in flow Issue: Message too long Solution : - Keep questions concise - Split long messages into multiple Text components - Use variables to reduce repetition Issue: Navigation buttons not working Check : - Auto-transition is OFF - Flow has valid previous/next states - Button labels are under 20 characters Need Help? Email: contact@intalos.de Last Updated : October 20, 2025","title":"QuestionText"},{"location":"question-text/#questiontext-component","text":"","title":"QuestionText Component"},{"location":"question-text/#overview","text":"The QuestionText component allows you to ask users open-ended questions and collect their text responses. Perfect for gathering names, addresses, descriptions, feedback, and any other free-form text input.","title":"Overview"},{"location":"question-text/#when-to-use-questiontext","text":"Ideal for scenarios like: - Collecting user names or contact information - Asking for addresses or locations - Gathering feedback or comments - Getting detailed descriptions - Open-ended survey questions - Custom text input requirements","title":"When to Use QuestionText"},{"location":"question-text/#configuration","text":"","title":"Configuration"},{"location":"question-text/#store-user-response","text":"The text entered by the user can be saved to a variable for later use: In \"Store output in variable\" , enter a variable name: Example: userName Example: userAddress Example: feedbackText Use this variable later in your flow: Thank you {userName} for your feedback!","title":"Store User Response"},{"location":"question-text/#auto-transition-mode","text":"Toggle \"Auto transition\" to ON when you want to: - Display a message without waiting for user input - Automatically move to the next step - Show information or instructions When enabled: - No user input is collected - Flow immediately transitions to next component - Variable storage is disabled - Use for informational messages","title":"Auto Transition Mode"},{"location":"question-text/#navigation-buttons","text":"Add quick navigation options for better user experience:","title":"Navigation Buttons"},{"location":"question-text/#go-back-button","text":"Toggle \"Go Back\" to ON Customize label (max 20 characters): Default: \"Go Back\" Custom: \"Previous Step\" Allows users to return to previous step","title":"Go Back Button"},{"location":"question-text/#go-on-button","text":"Toggle \"Go On\" to ON Customize label (max 20 characters): Default: \"Go On\" Custom: \"Continue\" Custom: \"Next\" Allows users to proceed without typing Note : Navigation buttons are only available when auto-transition is OFF.","title":"Go On Button"},{"location":"question-text/#add-image","text":"Enhance your question with a visual element: Click \"Add Image\" Upload an image (max 5 MB) Image appears above your question text Helps provide context or visual instructions Good for : - Showing examples - Visual instructions - Product images - Reference materials","title":"Add Image"},{"location":"question-text/#how-it-works","text":"","title":"How It Works"},{"location":"question-text/#user-experience","text":"Bot asks : \"What is your name?\" User : Types their response QuestionText : Captures and stores the response Result : Text stored in your variable for later use","title":"User Experience"},{"location":"question-text/#message-length-limits","text":"WhatsApp limit : 1024 characters for outgoing messages User input : No limit on incoming text length Messages exceeding 1024 characters will be automatically truncated with \"...\"","title":"Message Length Limits"},{"location":"question-text/#use-cases-examples","text":"","title":"Use Cases &amp; Examples"},{"location":"question-text/#1-name-collection","text":"Configuration : - Message: \"What is your full name?\" - Variable: userName - Go On: OFF User flow : Bot: What is your full name? User: John Smith -> Stored in {userName}","title":"1. Name Collection"},{"location":"question-text/#2-address-collection","text":"Configuration : - Message: \"Please enter your delivery address\" - Variable: deliveryAddress - Go On: OFF","title":"2. Address Collection"},{"location":"question-text/#3-feedback-collection","text":"Configuration : - Message: \"How was your experience with our service?\" - Variable: userFeedback - Go On: ON (\"Skip\") Allows users to skip if they don't want to provide feedback.","title":"3. Feedback Collection"},{"location":"question-text/#4-information-display-auto-transition","text":"Configuration : - Message: \"Thank you! Processing your request...\" - Auto transition: ON - Variable: (disabled) Simply displays the message and moves on automatically.","title":"4. Information Display (Auto-Transition)"},{"location":"question-text/#best-practices","text":"","title":"Best Practices"},{"location":"question-text/#message-clarity","text":"DO : - Ask clear, specific questions - Use simple language - Provide examples when helpful - Explain what format you need DON'T : - Ask vague or ambiguous questions - Use technical jargon - Assume users know what to enter","title":"Message Clarity"},{"location":"question-text/#examples","text":"Good : \"Please enter your email address (example: john@example.com)\" \"What is your phone number? (10 digits, no spaces)\" \"Describe the issue in a few sentences\" Bad : \"Enter details\" \"Provide information\" \"Input data\"","title":"Examples"},{"location":"question-text/#variable-naming","text":"DO : - Use descriptive variable names ( userName , customerEmail ) - Use camelCase for consistency - Keep names concise but meaningful DON'T : - Use generic names ( var1 , temp , x ) - Include spaces or special characters - Use reserved keywords","title":"Variable Naming"},{"location":"question-text/#navigation-buttons_1","text":"DO : - Use \"Go Back\" for returning to previous steps - Use \"Go On\" or \"Skip\" for optional questions - Keep button labels under 20 characters - Use clear, action-oriented labels DON'T : - Use long descriptive labels (they'll be truncated) - Leave labels empty - Use confusing button text","title":"Navigation Buttons"},{"location":"question-text/#technical-details","text":"","title":"Technical Details"},{"location":"question-text/#input-validation","text":"The QuestionText component: - Accepts any text input from users - No automatic validation (use Formula or CustomCode for validation) - Stores raw user input in the variable - Trims whitespace from responses","title":"Input Validation"},{"location":"question-text/#whatsapp-limitations","text":"Outgoing message limit : 1024 characters User input : No character limit Button labels : Maximum 20 characters Variable names : Must be valid identifiers","title":"WhatsApp Limitations"},{"location":"question-text/#variable-storage","text":"User responses are stored as: - Type : String - Encoding : UTF-8 - Whitespace : Leading/trailing whitespace removed - Empty responses : Stored as empty string","title":"Variable Storage"},{"location":"question-text/#common-patterns","text":"","title":"Common Patterns"},{"location":"question-text/#sequential-questions","text":"Use multiple QuestionText components in sequence: QuestionText (name) -> QuestionText (email) -> QuestionText (phone)","title":"Sequential Questions"},{"location":"question-text/#optional-questions-with-skip","text":"Enable \"Go On\" button for optional questions: Message: \"Any additional comments? (Optional)\" Go On: \"Skip\"","title":"Optional Questions with Skip"},{"location":"question-text/#confirmation-flow","text":"Collect input, then confirm: QuestionText (collect) -> Text (confirm: \"You entered: {userInput}\")","title":"Confirmation Flow"},{"location":"question-text/#validation-pattern","text":"Collect input, validate, retry if invalid: QuestionText -> Formula (validate) -> (valid) Success -> (invalid) Error message -> back to QuestionText","title":"Validation Pattern"},{"location":"question-text/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"question-text/#issue-users-send-wrong-format","text":"Solution : Provide clear examples and format instructions in your question","title":"Issue: Users send wrong format"},{"location":"question-text/#issue-variable-not-storing","text":"Check : - Variable name is properly configured - Auto-transition is OFF - Component is properly connected in flow","title":"Issue: Variable not storing"},{"location":"question-text/#issue-message-too-long","text":"Solution : - Keep questions concise - Split long messages into multiple Text components - Use variables to reduce repetition","title":"Issue: Message too long"},{"location":"question-text/#issue-navigation-buttons-not-working","text":"Check : - Auto-transition is OFF - Flow has valid previous/next states - Button labels are under 20 characters","title":"Issue: Navigation buttons not working"},{"location":"question-text/#need-help","text":"Email: contact@intalos.de Last Updated : October 20, 2025","title":"Need Help?"}]}